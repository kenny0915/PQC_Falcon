// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module solve_NTRU_zint_mod_small_signed_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        vla1_address0,
        vla1_ce0,
        vla1_q0,
        d,
        dlen,
        p,
        p0i,
        R2,
        Rx,
        ap_return
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] vla1_address0;
output   vla1_ce0;
input  [31:0] vla1_q0;
input  [13:0] d;
input  [7:0] dlen;
input  [24:0] p;
input  [30:0] p0i;
input  [30:0] R2;
input  [31:0] Rx;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[11:0] vla1_address0;
reg vla1_ce0;
reg[31:0] ap_return;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] p0i_cast_fu_153_p1;
reg   [31:0] p0i_cast_reg_466;
wire   [31:0] p_cast_cast_cast_cast_fu_161_p1;
reg   [31:0] p_cast_cast_cast_cast_reg_471;
wire   [31:0] R2_cast_fu_165_p1;
reg   [31:0] R2_cast_reg_478;
wire   [8:0] u_fu_186_p2;
reg   [8:0] u_reg_483;
wire    ap_CS_fsm_state2;
wire   [31:0] x_4_modp_montymul_fu_141_ap_return;
reg   [31:0] x_4_reg_489;
wire   [31:0] x_7_fu_303_p2;
reg   [31:0] x_7_reg_499;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln1597_fu_309_p2;
wire    x_4_modp_montymul_fu_141_ap_ready;
wire   [63:0] zext_ln1601_fu_219_p1;
wire   [63:0] zext_ln1621_1_fu_355_p1;
reg   [31:0] x_fu_76;
reg   [8:0] u_22_fu_80;
wire   [8:0] dlen_cast1_fu_149_p1;
wire  signed [24:0] p_cast_cast_cast_fu_157_p0;
wire  signed [30:0] p_cast_cast_cast_fu_157_p1;
wire   [10:0] shl_ln_fu_192_p3;
wire  signed [13:0] sext_ln1601_fu_200_p1;
wire   [13:0] add_ln1601_fu_204_p2;
wire   [11:0] lshr_ln_fu_209_p4;
wire   [31:0] w_fu_224_p2;
wire   [0:0] tmp_fu_229_p3;
wire   [24:0] select_ln1602_fu_237_p3;
wire  signed [24:0] and_ln1602_fu_245_p1;
wire   [24:0] and_ln1602_fu_245_p2;
wire  signed [30:0] sext_ln1598_fu_250_p1;
wire   [31:0] zext_ln1598_fu_254_p1;
wire   [31:0] add_ln685_fu_262_p2;
wire   [31:0] w_5_fu_258_p2;
wire   [31:0] add_ln685_3_fu_268_p2;
wire   [0:0] tmp_9_fu_274_p3;
wire   [24:0] select_ln685_fu_282_p3;
wire  signed [24:0] and_ln685_fu_290_p1;
wire   [24:0] and_ln685_fu_290_p2;
wire  signed [30:0] sext_ln685_fu_295_p1;
wire   [31:0] zext_ln685_fu_299_p1;
wire   [9:0] shl_ln11_fu_323_p3;
wire   [9:0] add_ln1621_fu_330_p2;
wire   [13:0] zext_ln1621_fu_336_p1;
wire   [13:0] add_ln1621_1_fu_340_p2;
wire   [11:0] lshr_ln1621_1_fu_345_p4;
wire    ap_CS_fsm_state4;
wire   [1:0] trunc_ln_fu_360_p4;
wire   [2:0] zext_ln1621_2_fu_370_p1;
wire   [2:0] sub_ln1621_fu_374_p2;
wire  signed [31:0] sext_ln1621_fu_380_p1;
wire   [31:0] and_ln1621_fu_384_p2;
wire   [31:0] sub_ln697_fu_389_p2;
wire   [0:0] tmp_10_fu_394_p3;
wire   [24:0] select_ln697_fu_402_p3;
wire  signed [24:0] and_ln697_fu_410_p1;
wire   [24:0] and_ln697_fu_410_p2;
wire  signed [30:0] sext_ln697_fu_415_p1;
wire   [31:0] zext_ln697_fu_419_p1;
wire   [31:0] z_fu_423_p2;
reg   [31:0] ap_return_preg;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_return_preg = 32'd0;
end

solve_NTRU_modp_montymul x_4_modp_montymul_fu_141(
    .ap_ready(x_4_modp_montymul_fu_141_ap_ready),
    .a(x_fu_76),
    .b(R2_cast_reg_478),
    .p(p_cast_cast_cast_cast_reg_471),
    .p0i(p0i_cast_reg_466),
    .ap_return(x_4_modp_montymul_fu_141_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_return_preg <= z_fu_423_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        u_22_fu_80 <= dlen_cast1_fu_149_p1;
    end else if (((icmp_ln1597_fu_309_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        u_22_fu_80 <= u_reg_483;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        x_fu_76 <= 32'd0;
    end else if (((icmp_ln1597_fu_309_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        x_fu_76 <= x_7_fu_303_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        R2_cast_reg_478[30 : 0] <= R2_cast_fu_165_p1[30 : 0];
        p0i_cast_reg_466[30 : 0] <= p0i_cast_fu_153_p1[30 : 0];
        p_cast_cast_cast_cast_reg_471[30 : 0] <= p_cast_cast_cast_cast_fu_161_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        u_reg_483 <= u_fu_186_p2;
        x_4_reg_489 <= x_4_modp_montymul_fu_141_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        x_7_reg_499 <= x_7_fu_303_p2;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_return = z_fu_423_p2;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        vla1_address0 = zext_ln1621_1_fu_355_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        vla1_address0 = zext_ln1601_fu_219_p1;
    end else begin
        vla1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        vla1_ce0 = 1'b1;
    end else begin
        vla1_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln1597_fu_309_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign R2_cast_fu_165_p1 = R2;

assign add_ln1601_fu_204_p2 = ($signed(sext_ln1601_fu_200_p1) + $signed(d));

assign add_ln1621_1_fu_340_p2 = (zext_ln1621_fu_336_p1 + d);

assign add_ln1621_fu_330_p2 = ($signed(shl_ln11_fu_323_p3) + $signed(10'd1020));

assign add_ln685_3_fu_268_p2 = (add_ln685_fu_262_p2 + w_5_fu_258_p2);

assign add_ln685_fu_262_p2 = (w_fu_224_p2 + zext_ln1598_fu_254_p1);

assign and_ln1602_fu_245_p1 = p;

assign and_ln1602_fu_245_p2 = (select_ln1602_fu_237_p3 & and_ln1602_fu_245_p1);

assign and_ln1621_fu_384_p2 = (sext_ln1621_fu_380_p1 & Rx);

assign and_ln685_fu_290_p1 = p;

assign and_ln685_fu_290_p2 = (select_ln685_fu_282_p3 & and_ln685_fu_290_p1);

assign and_ln697_fu_410_p1 = p;

assign and_ln697_fu_410_p2 = (select_ln697_fu_402_p3 & and_ln697_fu_410_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign dlen_cast1_fu_149_p1 = dlen;

assign icmp_ln1597_fu_309_p2 = ((u_reg_483 == 9'd0) ? 1'b1 : 1'b0);

assign lshr_ln1621_1_fu_345_p4 = {{add_ln1621_1_fu_340_p2[13:2]}};

assign lshr_ln_fu_209_p4 = {{add_ln1601_fu_204_p2[13:2]}};

assign p0i_cast_fu_153_p1 = p0i;

assign p_cast_cast_cast_cast_fu_161_p1 = $unsigned(p_cast_cast_cast_fu_157_p1);

assign p_cast_cast_cast_fu_157_p0 = p;

assign p_cast_cast_cast_fu_157_p1 = p_cast_cast_cast_fu_157_p0;

assign select_ln1602_fu_237_p3 = ((tmp_fu_229_p3[0:0] == 1'b1) ? 25'd33554431 : 25'd0);

assign select_ln685_fu_282_p3 = ((tmp_9_fu_274_p3[0:0] == 1'b1) ? 25'd33554431 : 25'd0);

assign select_ln697_fu_402_p3 = ((tmp_10_fu_394_p3[0:0] == 1'b1) ? 25'd33554431 : 25'd0);

assign sext_ln1598_fu_250_p1 = $signed(and_ln1602_fu_245_p2);

assign sext_ln1601_fu_200_p1 = $signed(shl_ln_fu_192_p3);

assign sext_ln1621_fu_380_p1 = $signed(sub_ln1621_fu_374_p2);

assign sext_ln685_fu_295_p1 = $signed(and_ln685_fu_290_p2);

assign sext_ln697_fu_415_p1 = $signed(and_ln697_fu_410_p2);

assign shl_ln11_fu_323_p3 = {{dlen}, {2'd0}};

assign shl_ln_fu_192_p3 = {{u_fu_186_p2}, {2'd0}};

assign sub_ln1621_fu_374_p2 = (3'd0 - zext_ln1621_2_fu_370_p1);

assign sub_ln697_fu_389_p2 = (x_7_reg_499 - and_ln1621_fu_384_p2);

assign tmp_10_fu_394_p3 = sub_ln697_fu_389_p2[32'd31];

assign tmp_9_fu_274_p3 = add_ln685_3_fu_268_p2[32'd31];

assign tmp_fu_229_p3 = w_fu_224_p2[32'd31];

assign trunc_ln_fu_360_p4 = {{vla1_q0[31:30]}};

assign u_fu_186_p2 = ($signed(u_22_fu_80) + $signed(9'd511));

assign w_5_fu_258_p2 = (x_4_reg_489 - p_cast_cast_cast_cast_reg_471);

assign w_fu_224_p2 = (vla1_q0 - p_cast_cast_cast_cast_reg_471);

assign x_7_fu_303_p2 = (zext_ln685_fu_299_p1 + add_ln685_3_fu_268_p2);

assign z_fu_423_p2 = (zext_ln697_fu_419_p1 + sub_ln697_fu_389_p2);

assign zext_ln1598_fu_254_p1 = $unsigned(sext_ln1598_fu_250_p1);

assign zext_ln1601_fu_219_p1 = lshr_ln_fu_209_p4;

assign zext_ln1621_1_fu_355_p1 = lshr_ln1621_1_fu_345_p4;

assign zext_ln1621_2_fu_370_p1 = trunc_ln_fu_360_p4;

assign zext_ln1621_fu_336_p1 = add_ln1621_fu_330_p2;

assign zext_ln685_fu_299_p1 = $unsigned(sext_ln685_fu_295_p1);

assign zext_ln697_fu_419_p1 = $unsigned(sext_ln697_fu_415_p1);

always @ (posedge ap_clk) begin
    p0i_cast_reg_466[31] <= 1'b0;
    p_cast_cast_cast_cast_reg_471[31] <= 1'b0;
    R2_cast_reg_478[31] <= 1'b0;
end

endmodule //solve_NTRU_zint_mod_small_signed_1
