// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module solve_NTRU_poly_mul_fft_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        vla1_address0,
        vla1_ce0,
        vla1_we0,
        vla1_d0,
        vla1_q0,
        vla1_address1,
        vla1_ce1,
        vla1_we1,
        vla1_d1,
        vla1_q1,
        a,
        b,
        logn
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] vla1_address0;
output   vla1_ce0;
output  [3:0] vla1_we0;
output  [31:0] vla1_d0;
input  [31:0] vla1_q0;
output  [11:0] vla1_address1;
output   vla1_ce1;
output  [3:0] vla1_we1;
output  [31:0] vla1_d1;
input  [31:0] vla1_q1;
input  [13:0] a;
input  [13:0] b;
input  [31:0] logn;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[11:0] vla1_address0;
reg vla1_ce0;
reg[3:0] vla1_we0;
reg[31:0] vla1_d0;
reg[11:0] vla1_address1;
reg vla1_ce1;
reg[3:0] vla1_we1;
reg[31:0] vla1_d1;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [62:0] trunc_ln_reg_488;
reg   [10:0] trunc_ln23_reg_493;
reg   [11:0] vla1_addr_reg_501;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln511_fu_225_p2;
reg   [11:0] vla1_addr_298_reg_507;
reg   [11:0] trunc_ln516_2_reg_512;
reg   [11:0] trunc_ln25_reg_518;
reg   [11:0] trunc_ln26_reg_524;
reg   [31:0] vla1_load_reg_530;
wire    ap_CS_fsm_state3;
reg   [31:0] vla1_load_199_reg_535;
reg   [11:0] vla1_addr_299_reg_540;
reg   [11:0] vla1_addr_300_reg_546;
reg   [31:0] vla1_load_200_reg_551;
wire    ap_CS_fsm_state4;
reg   [31:0] vla1_load_201_reg_556;
reg   [31:0] vla1_load_202_reg_571;
wire    ap_CS_fsm_state5;
reg   [31:0] vla1_load_203_reg_576;
wire   [63:0] a_re_fu_386_p1;
wire    ap_CS_fsm_state6;
wire   [63:0] a_im_fu_398_p1;
wire   [63:0] b_re_fu_410_p1;
wire   [63:0] b_im_fu_424_p1;
wire   [63:0] grp_fu_167_p2;
reg   [63:0] test1_reg_615;
wire    ap_CS_fsm_state9;
wire   [63:0] grp_fu_171_p2;
reg   [63:0] test2_reg_620;
wire   [63:0] grp_fu_175_p2;
reg   [63:0] test1_4_reg_625;
wire   [63:0] grp_fu_179_p2;
reg   [63:0] test2_4_reg_630;
wire   [63:0] grp_fu_163_p2;
reg   [63:0] fpct_d_im_reg_635;
wire    ap_CS_fsm_state12;
wire   [63:0] zext_ln515_fu_259_p1;
wire   [63:0] zext_ln515_1_fu_270_p1;
wire   [63:0] zext_ln516_fu_338_p1;
wire   [63:0] zext_ln516_1_fu_347_p1;
wire   [63:0] zext_ln517_fu_352_p1;
wire   [63:0] zext_ln517_1_fu_361_p1;
wire   [63:0] zext_ln518_fu_366_p1;
wire   [63:0] zext_ln518_1_fu_375_p1;
reg   [62:0] u_02_fu_64;
wire   [62:0] u_195_fu_230_p2;
wire   [31:0] trunc_ln64_fu_434_p1;
wire    ap_CS_fsm_state13;
wire   [31:0] trunc_ln65_fu_453_p1;
wire    ap_CS_fsm_state10;
wire   [63:0] zext_ln509_fu_183_p1;
wire   [63:0] n_fu_187_p2;
wire   [10:0] trunc_ln511_fu_221_p1;
wire   [13:0] shl_ln_fu_236_p3;
wire   [13:0] add_ln515_fu_244_p2;
wire   [11:0] trunc_ln24_fu_249_p4;
wire   [11:0] add_ln515_1_fu_264_p2;
wire   [10:0] add_ln516_fu_275_p2;
wire   [13:0] shl_ln72_fu_280_p3;
wire   [13:0] add_ln516_1_fu_288_p2;
wire   [13:0] add_ln517_fu_303_p2;
wire   [13:0] add_ln518_fu_318_p2;
wire   [11:0] add_ln516_2_fu_342_p2;
wire   [11:0] add_ln517_1_fu_356_p2;
wire   [11:0] add_ln518_1_fu_370_p2;
wire   [63:0] tmp_fu_380_p3;
wire   [63:0] tmp_s_fu_392_p3;
wire   [63:0] tmp_76_fu_404_p3;
wire   [63:0] tmp_77_fu_416_p3;
wire   [63:0] grp_fu_159_p2;
wire   [63:0] bitcast_ln64_fu_430_p1;
wire   [63:0] bitcast_ln65_fu_450_p1;
reg   [12:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
end

solve_NTRU_dsub_64ns_64ns_64_3_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dsub_64ns_64ns_64_3_full_dsp_1_U108(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(test1_reg_615),
    .din1(test2_reg_620),
    .ce(1'b1),
    .dout(grp_fu_159_p2)
);

solve_NTRU_dadd_64ns_64ns_64_3_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadd_64ns_64ns_64_3_full_dsp_1_U109(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(test1_4_reg_625),
    .din1(test2_4_reg_630),
    .ce(1'b1),
    .dout(grp_fu_163_p2)
);

solve_NTRU_dmul_64ns_64ns_64_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_4_max_dsp_1_U110(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(a_re_fu_386_p1),
    .din1(b_re_fu_410_p1),
    .ce(1'b1),
    .dout(grp_fu_167_p2)
);

solve_NTRU_dmul_64ns_64ns_64_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_4_max_dsp_1_U111(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(a_im_fu_398_p1),
    .din1(b_im_fu_424_p1),
    .ce(1'b1),
    .dout(grp_fu_171_p2)
);

solve_NTRU_dmul_64ns_64ns_64_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_4_max_dsp_1_U112(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(a_re_fu_386_p1),
    .din1(b_im_fu_424_p1),
    .ce(1'b1),
    .dout(grp_fu_175_p2)
);

solve_NTRU_dmul_64ns_64ns_64_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_4_max_dsp_1_U113(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(a_im_fu_398_p1),
    .din1(b_re_fu_410_p1),
    .ce(1'b1),
    .dout(grp_fu_179_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        u_02_fu_64 <= 63'd0;
    end else if (((icmp_ln511_fu_225_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        u_02_fu_64 <= u_195_fu_230_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        fpct_d_im_reg_635 <= grp_fu_163_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        test1_4_reg_625 <= grp_fu_175_p2;
        test1_reg_615 <= grp_fu_167_p2;
        test2_4_reg_630 <= grp_fu_179_p2;
        test2_reg_620 <= grp_fu_171_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        trunc_ln23_reg_493 <= {{n_fu_187_p2[11:1]}};
        trunc_ln_reg_488 <= {{n_fu_187_p2[63:1]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln511_fu_225_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        trunc_ln25_reg_518 <= {{add_ln517_fu_303_p2[13:2]}};
        trunc_ln26_reg_524 <= {{add_ln518_fu_318_p2[13:2]}};
        trunc_ln516_2_reg_512 <= {{add_ln516_1_fu_288_p2[13:2]}};
        vla1_addr_298_reg_507 <= zext_ln515_1_fu_270_p1;
        vla1_addr_reg_501 <= zext_ln515_fu_259_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        vla1_addr_299_reg_540 <= zext_ln516_fu_338_p1;
        vla1_addr_300_reg_546 <= zext_ln516_1_fu_347_p1;
        vla1_load_199_reg_535 <= vla1_q0;
        vla1_load_reg_530 <= vla1_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        vla1_load_200_reg_551 <= vla1_q1;
        vla1_load_201_reg_556 <= vla1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        vla1_load_202_reg_571 <= vla1_q1;
        vla1_load_203_reg_576 <= vla1_q0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((((icmp_ln511_fu_225_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln511_fu_225_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        vla1_address0 = vla1_addr_300_reg_546;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        vla1_address0 = vla1_addr_298_reg_507;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        vla1_address0 = zext_ln518_1_fu_375_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        vla1_address0 = zext_ln517_1_fu_361_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        vla1_address0 = zext_ln516_1_fu_347_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        vla1_address0 = zext_ln515_1_fu_270_p1;
    end else begin
        vla1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        vla1_address1 = vla1_addr_299_reg_540;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        vla1_address1 = vla1_addr_reg_501;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        vla1_address1 = zext_ln518_fu_366_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        vla1_address1 = zext_ln517_fu_352_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        vla1_address1 = zext_ln516_fu_338_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        vla1_address1 = zext_ln515_fu_259_p1;
    end else begin
        vla1_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state5))) begin
        vla1_ce0 = 1'b1;
    end else begin
        vla1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state5))) begin
        vla1_ce1 = 1'b1;
    end else begin
        vla1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        vla1_d0 = {{bitcast_ln65_fu_450_p1[63:32]}};
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        vla1_d0 = {{bitcast_ln64_fu_430_p1[63:32]}};
    end else begin
        vla1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        vla1_d1 = trunc_ln65_fu_453_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        vla1_d1 = trunc_ln64_fu_434_p1;
    end else begin
        vla1_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        vla1_we0 = 4'd15;
    end else begin
        vla1_we0 = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        vla1_we1 = 4'd15;
    end else begin
        vla1_we1 = 4'd0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln511_fu_225_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_im_fu_398_p1 = tmp_s_fu_392_p3;

assign a_re_fu_386_p1 = tmp_fu_380_p3;

assign add_ln515_1_fu_264_p2 = (trunc_ln24_fu_249_p4 + 12'd1);

assign add_ln515_fu_244_p2 = (shl_ln_fu_236_p3 + a);

assign add_ln516_1_fu_288_p2 = (shl_ln72_fu_280_p3 + a);

assign add_ln516_2_fu_342_p2 = (trunc_ln516_2_reg_512 + 12'd1);

assign add_ln516_fu_275_p2 = (trunc_ln511_fu_221_p1 + trunc_ln23_reg_493);

assign add_ln517_1_fu_356_p2 = (trunc_ln25_reg_518 + 12'd1);

assign add_ln517_fu_303_p2 = (shl_ln_fu_236_p3 + b);

assign add_ln518_1_fu_370_p2 = (trunc_ln26_reg_524 + 12'd1);

assign add_ln518_fu_318_p2 = (shl_ln72_fu_280_p3 + b);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign b_im_fu_424_p1 = tmp_77_fu_416_p3;

assign b_re_fu_410_p1 = tmp_76_fu_404_p3;

assign bitcast_ln64_fu_430_p1 = grp_fu_159_p2;

assign bitcast_ln65_fu_450_p1 = fpct_d_im_reg_635;

assign icmp_ln511_fu_225_p2 = ((u_02_fu_64 == trunc_ln_reg_488) ? 1'b1 : 1'b0);

assign n_fu_187_p2 = 64'd1 << zext_ln509_fu_183_p1;

assign shl_ln72_fu_280_p3 = {{add_ln516_fu_275_p2}, {3'd0}};

assign shl_ln_fu_236_p3 = {{trunc_ln511_fu_221_p1}, {3'd0}};

assign tmp_76_fu_404_p3 = {{vla1_load_203_reg_576}, {vla1_load_202_reg_571}};

assign tmp_77_fu_416_p3 = {{vla1_q0}, {vla1_q1}};

assign tmp_fu_380_p3 = {{vla1_load_199_reg_535}, {vla1_load_reg_530}};

assign tmp_s_fu_392_p3 = {{vla1_load_201_reg_556}, {vla1_load_200_reg_551}};

assign trunc_ln24_fu_249_p4 = {{add_ln515_fu_244_p2[13:2]}};

assign trunc_ln511_fu_221_p1 = u_02_fu_64[10:0];

assign trunc_ln64_fu_434_p1 = bitcast_ln64_fu_430_p1[31:0];

assign trunc_ln65_fu_453_p1 = bitcast_ln65_fu_450_p1[31:0];

assign u_195_fu_230_p2 = (u_02_fu_64 + 63'd1);

assign zext_ln509_fu_183_p1 = logn;

assign zext_ln515_1_fu_270_p1 = add_ln515_1_fu_264_p2;

assign zext_ln515_fu_259_p1 = trunc_ln24_fu_249_p4;

assign zext_ln516_1_fu_347_p1 = add_ln516_2_fu_342_p2;

assign zext_ln516_fu_338_p1 = trunc_ln516_2_reg_512;

assign zext_ln517_1_fu_361_p1 = add_ln517_1_fu_356_p2;

assign zext_ln517_fu_352_p1 = trunc_ln25_reg_518;

assign zext_ln518_1_fu_375_p1 = add_ln518_1_fu_370_p2;

assign zext_ln518_fu_366_p1 = trunc_ln26_reg_524;

endmodule //solve_NTRU_poly_mul_fft_1
