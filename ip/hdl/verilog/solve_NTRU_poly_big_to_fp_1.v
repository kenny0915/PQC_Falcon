// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module solve_NTRU_poly_big_to_fp_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        vla1_address0,
        vla1_ce0,
        vla1_we0,
        vla1_d0,
        vla1_q0,
        vla1_address1,
        vla1_ce1,
        vla1_we1,
        vla1_d1,
        vla1_q1,
        d,
        f,
        flen,
        fstride,
        logn
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] vla1_address0;
output   vla1_ce0;
output  [3:0] vla1_we0;
output  [31:0] vla1_d0;
input  [31:0] vla1_q0;
output  [11:0] vla1_address1;
output   vla1_ce1;
output  [3:0] vla1_we1;
output  [31:0] vla1_d1;
input  [31:0] vla1_q1;
input  [13:0] d;
input  [13:0] f;
input  [3:0] flen;
input  [8:0] fstride;
input  [31:0] logn;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[11:0] vla1_address0;
reg vla1_ce0;
reg[3:0] vla1_we0;
reg[31:0] vla1_d0;
reg[11:0] vla1_address1;
reg vla1_ce1;
reg[3:0] vla1_we1;
reg[31:0] vla1_d1;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] fstride_cast_fu_248_p1;
reg   [63:0] fstride_cast_reg_658;
wire   [63:0] n_fu_256_p2;
reg   [63:0] n_reg_663;
wire   [0:0] icmp_ln2413_fu_262_p2;
reg   [0:0] icmp_ln2413_reg_669;
wire   [11:0] zext_ln2419_fu_268_p1;
reg   [11:0] zext_ln2419_reg_689;
wire   [63:0] u_198_fu_295_p2;
reg   [63:0] u_198_reg_700;
wire    ap_CS_fsm_state2;
wire   [11:0] trunc_ln2429_fu_301_p1;
reg   [11:0] trunc_ln2429_reg_705;
wire   [0:0] icmp_ln2419_fu_290_p2;
wire  signed [31:0] sext_ln2421_fu_423_p1;
reg  signed [31:0] sext_ln2421_reg_718;
wire    ap_CS_fsm_state3;
wire   [0:0] cc_fu_427_p1;
wire  signed [30:0] sext_ln2430_fu_441_p1;
reg  signed [30:0] sext_ln2430_reg_728;
wire   [31:0] zext_ln2430_fu_445_p1;
reg   [31:0] zext_ln2430_reg_733;
wire   [3:0] v_32_fu_454_p2;
reg   [3:0] v_32_reg_741;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln2434_fu_449_p2;
reg   [0:0] tmp_reg_751;
wire    ap_CS_fsm_state5;
wire  signed [63:0] sext_ln2441_fu_636_p1;
reg   [63:0] sext_ln2441_reg_756;
wire   [63:0] grp_fpr_of_fu_228_ap_return;
reg   [63:0] x_assign_reg_761;
wire    ap_CS_fsm_state6;
wire   [63:0] grp_fu_238_p2;
reg   [63:0] fsc_reg_766;
wire    ap_CS_fsm_state7;
reg   [63:0] y_assign_s_reg_771;
wire    ap_CS_fsm_state10;
wire   [63:0] grp_fu_233_p2;
wire    ap_CS_fsm_state13;
wire    grp_fpr_of_fu_228_ap_start;
wire    grp_fpr_of_fu_228_ap_done;
wire    grp_fpr_of_fu_228_ap_idle;
wire    grp_fpr_of_fu_228_ap_ready;
reg   [63:0] fsc_1_reg_183;
reg   [63:0] x_22_reg_195;
reg   [0:0] cc_04_reg_207;
reg   [3:0] v_reg_217;
reg    grp_fpr_of_fu_228_ap_start_reg;
wire   [63:0] zext_ln2429_fu_339_p1;
wire   [63:0] zext_ln2415_fu_382_p1;
wire   [0:0] icmp_ln2414_fu_344_p2;
wire   [63:0] zext_ln2415_1_fu_393_p1;
wire   [63:0] zext_ln2437_1_fu_492_p1;
wire   [63:0] zext_ln2443_fu_527_p1;
wire   [63:0] zext_ln2443_1_fu_554_p1;
reg   [63:0] u_01_fu_92;
wire   [63:0] add_ln2419_1_fu_559_p2;
wire   [63:0] u_196_fu_349_p2;
reg   [63:0] u_17_fu_96;
wire   [31:0] trunc_ln2443_3_fu_532_p1;
wire    ap_CS_fsm_state11;
reg   [63:0] grp_fu_238_p0;
reg   [63:0] grp_fu_238_p1;
wire   [63:0] zext_ln2412_fu_252_p1;
wire   [11:0] add_ln2429_fu_305_p2;
wire   [11:0] add_ln2429_2_fu_311_p2;
wire   [13:0] shl_ln73_fu_316_p3;
wire   [13:0] add_ln2429_1_fu_324_p2;
wire   [11:0] lshr_ln2429_1_fu_329_p4;
wire   [10:0] trunc_ln2415_fu_355_p1;
wire   [13:0] shl_ln_fu_359_p3;
wire   [13:0] add_ln2415_fu_367_p2;
wire   [11:0] trunc_ln_fu_372_p4;
wire   [11:0] add_ln2415_1_fu_387_p2;
wire   [1:0] trunc_ln2429_1_fu_403_p4;
wire   [2:0] zext_ln2429_1_fu_413_p1;
wire  signed [2:0] neg_fu_417_p2;
wire   [1:0] xm_fu_431_p4;
wire   [11:0] zext_ln2437_fu_460_p1;
wire   [11:0] add_ln2437_fu_464_p2;
wire   [13:0] shl_ln75_fu_469_p3;
wire   [13:0] add_ln2437_1_fu_477_p2;
wire   [11:0] lshr_ln_fu_482_p4;
wire   [10:0] trunc_ln2443_fu_497_p1;
wire   [13:0] shl_ln74_fu_500_p3;
wire   [13:0] add_ln2443_fu_508_p2;
wire   [11:0] trunc_ln2443_2_fu_517_p4;
wire   [63:0] bitcast_ln2443_fu_513_p1;
wire   [11:0] add_ln2443_1_fu_548_p2;
wire   [30:0] trunc_ln2437_fu_573_p1;
wire   [31:0] xor_ln2437_fu_577_p2;
wire   [31:0] zext_ln2434_fu_591_p1;
wire   [30:0] xor_ln2437_1_fu_586_p2;
wire   [30:0] zext_ln2437_2_fu_582_p1;
wire   [31:0] w_fu_595_p2;
wire   [30:0] w_57_fu_601_p2;
wire   [31:0] shl_ln2440_fu_619_p2;
wire   [31:0] zext_ln2435_fu_615_p1;
wire   [31:0] and_ln2440_fu_625_p2;
wire   [31:0] w_58_fu_630_p2;
reg    grp_fu_238_ce;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
reg   [12:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
#0 grp_fpr_of_fu_228_ap_start_reg = 1'b0;
end

solve_NTRU_fpr_of grp_fpr_of_fu_228(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_fpr_of_fu_228_ap_start),
    .ap_done(grp_fpr_of_fu_228_ap_done),
    .ap_idle(grp_fpr_of_fu_228_ap_idle),
    .ap_ready(grp_fpr_of_fu_228_ap_ready),
    .i(sext_ln2441_reg_756),
    .ap_return(grp_fpr_of_fu_228_ap_return)
);

solve_NTRU_dadd_64ns_64ns_64_3_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadd_64ns_64ns_64_3_full_dsp_1_U100(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(x_22_reg_195),
    .din1(y_assign_s_reg_771),
    .ce(1'b1),
    .dout(grp_fu_233_p2)
);

solve_NTRU_dmul_64ns_64ns_64_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_4_max_dsp_1_U101(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_238_p0),
    .din1(grp_fu_238_p1),
    .ce(grp_fu_238_ce),
    .dout(grp_fu_238_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_fpr_of_fu_228_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            grp_fpr_of_fu_228_ap_start_reg <= 1'b1;
        end else if ((grp_fpr_of_fu_228_ap_ready == 1'b1)) begin
            grp_fpr_of_fu_228_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        cc_04_reg_207 <= tmp_reg_751;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        cc_04_reg_207 <= cc_fu_427_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        fsc_1_reg_183 <= fsc_reg_766;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        fsc_1_reg_183 <= 64'd4607182418800017408;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln2413_fu_262_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | ((icmp_ln2413_fu_262_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        u_01_fu_92 <= 64'd0;
    end else if (((icmp_ln2413_reg_669 == 1'd1) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln2414_fu_344_p2 == 1'd0))) begin
        u_01_fu_92 <= u_196_fu_349_p2;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln2434_fu_449_p2 == 1'd1))) begin
        u_01_fu_92 <= add_ln2419_1_fu_559_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln2413_fu_262_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        u_17_fu_96 <= 64'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln2434_fu_449_p2 == 1'd1))) begin
        u_17_fu_96 <= u_198_reg_700;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        v_reg_217 <= v_32_reg_741;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        v_reg_217 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        x_22_reg_195 <= grp_fu_233_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        x_22_reg_195 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        fsc_reg_766 <= grp_fu_238_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        fstride_cast_reg_658[8 : 0] <= fstride_cast_fu_248_p1[8 : 0];
        icmp_ln2413_reg_669 <= icmp_ln2413_fu_262_p2;
        n_reg_663 <= n_fu_256_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sext_ln2421_reg_718 <= sext_ln2421_fu_423_p1;
        sext_ln2430_reg_728 <= sext_ln2430_fu_441_p1;
        zext_ln2430_reg_733[30 : 0] <= zext_ln2430_fu_445_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sext_ln2441_reg_756 <= sext_ln2441_fu_636_p1;
        tmp_reg_751 <= w_fu_595_p2[32'd31];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln2419_fu_290_p2 == 1'd0) & (icmp_ln2413_reg_669 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        trunc_ln2429_reg_705 <= trunc_ln2429_fu_301_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln2413_reg_669 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        u_198_reg_700 <= u_198_fu_295_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        v_32_reg_741 <= v_32_fu_454_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        x_assign_reg_761 <= grp_fpr_of_fu_228_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        y_assign_s_reg_771 <= grp_fu_238_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln2413_fu_262_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        zext_ln2419_reg_689[3 : 0] <= zext_ln2419_fu_268_p1[3 : 0];
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((grp_fpr_of_fu_228_ap_done == 1'b0)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (((icmp_ln2419_fu_290_p2 == 1'd1) & (icmp_ln2413_reg_669 == 1'd0)) | ((icmp_ln2413_reg_669 == 1'd1) & (icmp_ln2414_fu_344_p2 == 1'd1)))) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (((icmp_ln2419_fu_290_p2 == 1'd1) & (icmp_ln2413_reg_669 == 1'd0)) | ((icmp_ln2413_reg_669 == 1'd1) & (icmp_ln2414_fu_344_p2 == 1'd1))))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state6) & (grp_fpr_of_fu_228_ap_done == 1'b1)))) begin
        grp_fu_238_ce = 1'b1;
    end else begin
        grp_fu_238_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_238_p0 = x_assign_reg_761;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_238_p0 = fsc_1_reg_183;
    end else begin
        grp_fu_238_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_238_p1 = fsc_1_reg_183;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_238_p1 = 64'd4746794007248502784;
    end else begin
        grp_fu_238_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        vla1_address0 = zext_ln2443_fu_527_p1;
    end else if (((icmp_ln2413_reg_669 == 1'd1) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln2414_fu_344_p2 == 1'd0))) begin
        vla1_address0 = zext_ln2415_1_fu_393_p1;
    end else if (((icmp_ln2419_fu_290_p2 == 1'd0) & (icmp_ln2413_reg_669 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        vla1_address0 = zext_ln2429_fu_339_p1;
    end else begin
        vla1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln2434_fu_449_p2 == 1'd1))) begin
        vla1_address1 = zext_ln2443_1_fu_554_p1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln2434_fu_449_p2 == 1'd0))) begin
        vla1_address1 = zext_ln2437_1_fu_492_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        vla1_address1 = zext_ln2415_fu_382_p1;
    end else begin
        vla1_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((icmp_ln2419_fu_290_p2 == 1'd0) & (icmp_ln2413_reg_669 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((icmp_ln2413_reg_669 == 1'd1) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln2414_fu_344_p2 == 1'd0)))) begin
        vla1_ce0 = 1'b1;
    end else begin
        vla1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state4) & (icmp_ln2434_fu_449_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state4) & (icmp_ln2434_fu_449_p2 == 1'd0)))) begin
        vla1_ce1 = 1'b1;
    end else begin
        vla1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        vla1_d0 = trunc_ln2443_3_fu_532_p1;
    end else if (((icmp_ln2413_reg_669 == 1'd1) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln2414_fu_344_p2 == 1'd0))) begin
        vla1_d0 = 32'd0;
    end else begin
        vla1_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln2434_fu_449_p2 == 1'd1))) begin
        vla1_d1 = {{bitcast_ln2443_fu_513_p1[63:32]}};
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        vla1_d1 = 32'd0;
    end else begin
        vla1_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln2413_reg_669 == 1'd1) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln2414_fu_344_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state4) & (icmp_ln2434_fu_449_p2 == 1'd1)))) begin
        vla1_we0 = 4'd15;
    end else begin
        vla1_we0 = 4'd0;
    end
end

always @ (*) begin
    if ((((icmp_ln2413_reg_669 == 1'd1) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln2414_fu_344_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state4) & (icmp_ln2434_fu_449_p2 == 1'd1)))) begin
        vla1_we1 = 4'd15;
    end else begin
        vla1_we1 = 4'd0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (((icmp_ln2419_fu_290_p2 == 1'd1) & (icmp_ln2413_reg_669 == 1'd0)) | ((icmp_ln2413_reg_669 == 1'd1) & (icmp_ln2414_fu_344_p2 == 1'd1))))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((icmp_ln2413_reg_669 == 1'd1) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln2414_fu_344_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln2434_fu_449_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (grp_fpr_of_fu_228_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln2415_1_fu_387_p2 = (trunc_ln_fu_372_p4 + 12'd1);

assign add_ln2415_fu_367_p2 = (shl_ln_fu_359_p3 + d);

assign add_ln2419_1_fu_559_p2 = (u_01_fu_92 + fstride_cast_reg_658);

assign add_ln2429_1_fu_324_p2 = (shl_ln73_fu_316_p3 + f);

assign add_ln2429_2_fu_311_p2 = (add_ln2429_fu_305_p2 + zext_ln2419_reg_689);

assign add_ln2429_fu_305_p2 = ($signed(trunc_ln2429_fu_301_p1) + $signed(12'd4095));

assign add_ln2437_1_fu_477_p2 = (shl_ln75_fu_469_p3 + f);

assign add_ln2437_fu_464_p2 = (zext_ln2437_fu_460_p1 + trunc_ln2429_reg_705);

assign add_ln2443_1_fu_548_p2 = (trunc_ln2443_2_fu_517_p4 + 12'd1);

assign add_ln2443_fu_508_p2 = (shl_ln74_fu_500_p3 + d);

assign and_ln2440_fu_625_p2 = (shl_ln2440_fu_619_p2 & sext_ln2421_reg_718);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bitcast_ln2443_fu_513_p1 = x_22_reg_195;

assign cc_fu_427_p1 = neg_fu_417_p2[0:0];

assign fstride_cast_fu_248_p1 = fstride;

assign grp_fpr_of_fu_228_ap_start = grp_fpr_of_fu_228_ap_start_reg;

assign icmp_ln2413_fu_262_p2 = ((flen == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln2414_fu_344_p2 = ((u_01_fu_92 == n_reg_663) ? 1'b1 : 1'b0);

assign icmp_ln2419_fu_290_p2 = ((u_17_fu_96 == n_reg_663) ? 1'b1 : 1'b0);

assign icmp_ln2434_fu_449_p2 = ((v_reg_217 == flen) ? 1'b1 : 1'b0);

assign lshr_ln2429_1_fu_329_p4 = {{add_ln2429_1_fu_324_p2[13:2]}};

assign lshr_ln_fu_482_p4 = {{add_ln2437_1_fu_477_p2[13:2]}};

assign n_fu_256_p2 = 64'd1 << zext_ln2412_fu_252_p1;

assign neg_fu_417_p2 = (3'd0 - zext_ln2429_1_fu_413_p1);

assign sext_ln2421_fu_423_p1 = neg_fu_417_p2;

assign sext_ln2430_fu_441_p1 = $signed(xm_fu_431_p4);

assign sext_ln2441_fu_636_p1 = $signed(w_58_fu_630_p2);

assign shl_ln2440_fu_619_p2 = w_fu_595_p2 << 32'd1;

assign shl_ln73_fu_316_p3 = {{add_ln2429_2_fu_311_p2}, {2'd0}};

assign shl_ln74_fu_500_p3 = {{trunc_ln2443_fu_497_p1}, {3'd0}};

assign shl_ln75_fu_469_p3 = {{add_ln2437_fu_464_p2}, {2'd0}};

assign shl_ln_fu_359_p3 = {{trunc_ln2415_fu_355_p1}, {3'd0}};

assign trunc_ln2415_fu_355_p1 = u_01_fu_92[10:0];

assign trunc_ln2429_1_fu_403_p4 = {{vla1_q0[31:30]}};

assign trunc_ln2429_fu_301_p1 = u_01_fu_92[11:0];

assign trunc_ln2437_fu_573_p1 = vla1_q1[30:0];

assign trunc_ln2443_2_fu_517_p4 = {{add_ln2443_fu_508_p2[13:2]}};

assign trunc_ln2443_3_fu_532_p1 = bitcast_ln2443_fu_513_p1[31:0];

assign trunc_ln2443_fu_497_p1 = u_17_fu_96[10:0];

assign trunc_ln_fu_372_p4 = {{add_ln2415_fu_367_p2[13:2]}};

assign u_196_fu_349_p2 = (u_01_fu_92 + 64'd1);

assign u_198_fu_295_p2 = (u_17_fu_96 + 64'd1);

assign v_32_fu_454_p2 = (v_reg_217 + 4'd1);

assign w_57_fu_601_p2 = (xor_ln2437_1_fu_586_p2 + zext_ln2437_2_fu_582_p1);

assign w_58_fu_630_p2 = (zext_ln2435_fu_615_p1 - and_ln2440_fu_625_p2);

assign w_fu_595_p2 = (xor_ln2437_fu_577_p2 + zext_ln2434_fu_591_p1);

assign xm_fu_431_p4 = {{neg_fu_417_p2[2:1]}};

assign xor_ln2437_1_fu_586_p2 = (trunc_ln2437_fu_573_p1 ^ sext_ln2430_reg_728);

assign xor_ln2437_fu_577_p2 = (zext_ln2430_reg_733 ^ vla1_q1);

assign zext_ln2412_fu_252_p1 = logn;

assign zext_ln2415_1_fu_393_p1 = add_ln2415_1_fu_387_p2;

assign zext_ln2415_fu_382_p1 = trunc_ln_fu_372_p4;

assign zext_ln2419_fu_268_p1 = flen;

assign zext_ln2429_1_fu_413_p1 = trunc_ln2429_1_fu_403_p4;

assign zext_ln2429_fu_339_p1 = lshr_ln2429_1_fu_329_p4;

assign zext_ln2430_fu_445_p1 = $unsigned(sext_ln2430_fu_441_p1);

assign zext_ln2434_fu_591_p1 = cc_04_reg_207;

assign zext_ln2435_fu_615_p1 = w_57_fu_601_p2;

assign zext_ln2437_1_fu_492_p1 = lshr_ln_fu_482_p4;

assign zext_ln2437_2_fu_582_p1 = cc_04_reg_207;

assign zext_ln2437_fu_460_p1 = v_reg_217;

assign zext_ln2443_1_fu_554_p1 = add_ln2443_1_fu_548_p2;

assign zext_ln2443_fu_527_p1 = trunc_ln2443_2_fu_517_p4;

always @ (posedge ap_clk) begin
    fstride_cast_reg_658[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln2419_reg_689[11:4] <= 8'b00000000;
    zext_ln2430_reg_733[31] <= 1'b0;
end

endmodule //solve_NTRU_poly_big_to_fp_1
