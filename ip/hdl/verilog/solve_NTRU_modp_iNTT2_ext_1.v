// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module solve_NTRU_modp_iNTT2_ext_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        vla1_address0,
        vla1_ce0,
        vla1_we0,
        vla1_d0,
        vla1_q0,
        vla1_address1,
        vla1_ce1,
        vla1_we1,
        vla1_d1,
        vla1_q1,
        a,
        stride,
        igm,
        logn,
        p,
        p0i
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] vla1_address0;
output   vla1_ce0;
output  [3:0] vla1_we0;
output  [31:0] vla1_d0;
input  [31:0] vla1_q0;
output  [11:0] vla1_address1;
output   vla1_ce1;
output  [3:0] vla1_we1;
output  [31:0] vla1_d1;
input  [31:0] vla1_q1;
input  [13:0] a;
input  [8:0] stride;
input  [13:0] igm;
input  [31:0] logn;
input  [24:0] p;
input  [30:0] p0i;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[11:0] vla1_address0;
reg vla1_ce0;
reg[3:0] vla1_we0;
reg[31:0] vla1_d0;
reg[11:0] vla1_address1;
reg vla1_ce1;
reg[3:0] vla1_we1;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] stride_cast1_fu_235_p1;
reg   [63:0] stride_cast1_reg_698;
wire   [31:0] p0i_cast_fu_239_p1;
reg   [31:0] p0i_cast_reg_704;
wire   [31:0] p_cast_cast_cast_cast_fu_247_p1;
reg   [31:0] p_cast_cast_cast_cast_reg_709;
wire   [11:0] stride_cast_fu_251_p1;
reg   [11:0] stride_cast_reg_715;
wire   [0:0] icmp_ln1411_fu_255_p2;
reg   [0:0] icmp_ln1411_reg_721;
wire   [63:0] n_fu_265_p2;
reg   [63:0] n_reg_739;
wire   [62:0] hm_fu_300_p4;
reg   [62:0] hm_reg_747;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln1416_fu_294_p2;
wire   [63:0] zext_ln1420_fu_310_p1;
reg   [63:0] zext_ln1420_reg_752;
wire   [63:0] dt_fu_314_p2;
reg   [63:0] dt_reg_757;
reg   [11:0] trunc_ln_reg_763;
wire   [31:0] ni_fu_335_p2;
reg   [31:0] ni_reg_782;
wire   [62:0] u_fu_356_p2;
reg   [62:0] u_reg_790;
wire    ap_CS_fsm_state3;
reg   [11:0] lshr_ln_reg_795;
wire   [0:0] icmp_ln1422_fu_351_p2;
wire  signed [11:0] trunc_ln1422_fu_394_p1;
wire    ap_CS_fsm_state5;
reg   [31:0] s_reg_815;
wire    ap_CS_fsm_state6;
wire  signed [11:0] grp_fu_665_p2;
reg  signed [11:0] mul_ln1429_reg_820;
wire  signed [11:0] grp_fu_670_p2;
reg  signed [11:0] mul_ln1430_reg_825;
wire   [63:0] v_fu_426_p2;
reg   [63:0] v_reg_833;
wire    ap_CS_fsm_state7;
reg   [11:0] vla1_addr_312_reg_838;
wire   [0:0] icmp_ln1431_fu_420_p2;
reg   [11:0] vla1_addr_313_reg_844;
wire   [63:0] add_ln1431_1_fu_502_p2;
reg   [63:0] add_ln1431_1_reg_849;
wire   [63:0] v1_1_fu_507_p2;
wire   [31:0] grp_modp_montymul_fu_222_ap_return;
reg   [31:0] tmp_s_reg_859;
wire    ap_CS_fsm_state8;
reg   [11:0] vla1_addr_311_reg_867;
wire    ap_CS_fsm_state10;
wire   [0:0] icmp_ln1450_fu_604_p2;
wire    grp_modp_montymul_fu_222_ap_ready;
reg   [31:0] grp_modp_montymul_fu_222_a;
reg   [31:0] grp_modp_montymul_fu_222_b;
reg   [63:0] v1_reg_177;
reg   [62:0] u_09_reg_189;
reg   [63:0] v_05_reg_200;
wire    ap_CS_fsm_state9;
reg   [63:0] idx18_reg_211;
wire   [31:0] add_ln697_fu_594_p2;
wire    ap_CS_fsm_state11;
wire   [63:0] zext_ln1428_fu_416_p1;
wire   [63:0] zext_ln1435_fu_482_p1;
wire   [63:0] zext_ln1436_fu_497_p1;
wire   [63:0] zext_ln1451_fu_645_p1;
reg   [63:0] t_fu_84;
reg   [63:0] m_fu_88;
reg   [63:0] idx_fu_92;
wire   [63:0] add_ln1450_1_fu_650_p2;
reg   [63:0] k_02_fu_96;
wire   [63:0] k_13_fu_609_p2;
wire  signed [24:0] p_cast_cast_cast_fu_243_p0;
wire  signed [30:0] p_cast_cast_cast_fu_243_p1;
wire   [63:0] zext_ln1414_fu_261_p1;
wire   [62:0] tmp_174_fu_284_p4;
wire   [31:0] sub_ln1449_fu_330_p2;
wire   [11:0] trunc_ln1428_fu_362_p1;
wire   [11:0] add_ln1428_fu_366_p2;
wire   [13:0] shl_ln_fu_371_p3;
wire   [13:0] add_ln1428_1_fu_379_p2;
wire   [11:0] trunc_ln1406_1_fu_398_p1;
wire   [11:0] trunc_ln1431_fu_432_p1;
(* use_dsp48 = "no" *) wire   [11:0] add_ln1425_fu_436_p2;
wire   [13:0] shl_ln77_fu_441_p3;
(* use_dsp48 = "no" *) wire   [11:0] add_ln1425_2_fu_454_p2;
wire   [13:0] shl_ln1425_1_fu_459_p3;
wire   [13:0] r1_fu_449_p2;
wire   [11:0] lshr_ln36_fu_472_p4;
wire   [13:0] r2_fu_467_p2;
wire   [11:0] lshr_ln37_fu_487_p4;
wire   [31:0] sub_ln685_fu_512_p2;
wire   [31:0] add_ln685_fu_517_p2;
wire   [0:0] tmp_175_fu_523_p3;
wire   [24:0] select_ln685_fu_531_p3;
wire  signed [24:0] and_ln685_fu_539_p1;
wire   [24:0] and_ln685_fu_539_p2;
wire  signed [30:0] sext_ln685_fu_544_p1;
wire   [31:0] zext_ln685_fu_548_p1;
wire   [31:0] sub_ln697_fu_559_p2;
wire   [0:0] tmp_176_fu_565_p3;
wire   [24:0] select_ln697_fu_573_p3;
wire  signed [24:0] and_ln697_fu_581_p1;
wire   [24:0] and_ln697_fu_581_p2;
wire  signed [30:0] sext_ln697_fu_586_p1;
wire   [31:0] zext_ln697_fu_590_p1;
wire   [11:0] trunc_ln1406_fu_618_p1;
wire   [13:0] shl_ln76_fu_622_p3;
wire   [13:0] r_fu_630_p2;
wire   [11:0] lshr_ln35_fu_635_p4;
wire   [8:0] grp_fu_665_p1;
wire  signed [11:0] grp_fu_670_p0;
wire   [8:0] grp_fu_670_p1;
reg   [10:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
end

solve_NTRU_modp_montymul grp_modp_montymul_fu_222(
    .ap_ready(grp_modp_montymul_fu_222_ap_ready),
    .a(grp_modp_montymul_fu_222_a),
    .b(grp_modp_montymul_fu_222_b),
    .p(p_cast_cast_cast_cast_reg_709),
    .p0i(p0i_cast_reg_704),
    .ap_return(grp_modp_montymul_fu_222_ap_return)
);

solve_NTRU_mul_mul_12s_9ns_12_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 12 ))
mul_mul_12s_9ns_12_4_1_U29(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln1422_fu_394_p1),
    .din1(grp_fu_665_p1),
    .ce(1'b1),
    .dout(grp_fu_665_p2)
);

solve_NTRU_mul_mul_12s_9ns_12_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 12 ))
mul_mul_12s_9ns_12_4_1_U30(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_670_p0),
    .din1(grp_fu_670_p1),
    .ce(1'b1),
    .dout(grp_fu_670_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        idx18_reg_211 <= add_ln1431_1_reg_849;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        idx18_reg_211 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1416_fu_294_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        idx_fu_92 <= 64'd0;
    end else if (((icmp_ln1411_reg_721 == 1'd0) & (1'b1 == ap_CS_fsm_state10) & (icmp_ln1450_fu_604_p2 == 1'd0))) begin
        idx_fu_92 <= add_ln1450_1_fu_650_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1416_fu_294_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        k_02_fu_96 <= 64'd0;
    end else if (((icmp_ln1411_reg_721 == 1'd0) & (1'b1 == ap_CS_fsm_state10) & (icmp_ln1450_fu_604_p2 == 1'd0))) begin
        k_02_fu_96 <= k_13_fu_609_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1411_fu_255_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        m_fu_88 <= n_fu_265_p2;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln1422_fu_351_p2 == 1'd1))) begin
        m_fu_88 <= zext_ln1420_reg_752;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1411_fu_255_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        t_fu_84 <= 64'd1;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln1422_fu_351_p2 == 1'd1))) begin
        t_fu_84 <= dt_reg_757;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln1431_fu_420_p2 == 1'd1))) begin
        u_09_reg_189 <= u_reg_790;
    end else if (((icmp_ln1416_fu_294_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        u_09_reg_189 <= 63'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln1431_fu_420_p2 == 1'd1))) begin
        v1_reg_177 <= v1_1_fu_507_p2;
    end else if (((icmp_ln1416_fu_294_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        v1_reg_177 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        v_05_reg_200 <= v_reg_833;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        v_05_reg_200 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln1431_fu_420_p2 == 1'd0))) begin
        add_ln1431_1_reg_849 <= add_ln1431_1_fu_502_p2;
        vla1_addr_312_reg_838 <= zext_ln1435_fu_482_p1;
        vla1_addr_313_reg_844 <= zext_ln1436_fu_497_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1416_fu_294_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        dt_reg_757[63 : 1] <= dt_fu_314_p2[63 : 1];
        hm_reg_747 <= {{m_fu_88[63:1]}};
        trunc_ln_reg_763 <= {{m_fu_88[12:1]}};
        zext_ln1420_reg_752[62 : 0] <= zext_ln1420_fu_310_p1[62 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        icmp_ln1411_reg_721 <= icmp_ln1411_fu_255_p2;
        p0i_cast_reg_704[30 : 0] <= p0i_cast_fu_239_p1[30 : 0];
        p_cast_cast_cast_cast_reg_709[30 : 0] <= p_cast_cast_cast_cast_fu_247_p1[30 : 0];
        stride_cast1_reg_698[8 : 0] <= stride_cast1_fu_235_p1[8 : 0];
        stride_cast_reg_715[8 : 0] <= stride_cast_fu_251_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln1422_fu_351_p2 == 1'd0))) begin
        lshr_ln_reg_795 <= {{add_ln1428_1_fu_379_p2[13:2]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        mul_ln1429_reg_820 <= grp_fu_665_p2;
        mul_ln1430_reg_825 <= grp_fu_670_p2;
        s_reg_815 <= vla1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1411_fu_255_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        n_reg_739 <= n_fu_265_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1416_fu_294_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ni_reg_782 <= ni_fu_335_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_s_reg_859 <= grp_modp_montymul_fu_222_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        u_reg_790 <= u_fu_356_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        v_reg_833 <= v_fu_426_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1411_reg_721 == 1'd0) & (1'b1 == ap_CS_fsm_state10) & (icmp_ln1450_fu_604_p2 == 1'd0))) begin
        vla1_addr_311_reg_867 <= zext_ln1451_fu_645_p1;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) | ((1'b1 == ap_CS_fsm_state10) & ((icmp_ln1411_reg_721 == 1'd1) | (icmp_ln1450_fu_604_p2 == 1'd1))))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & ((icmp_ln1411_reg_721 == 1'd1) | (icmp_ln1450_fu_604_p2 == 1'd1)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_modp_montymul_fu_222_a = vla1_q1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_modp_montymul_fu_222_a = add_ln697_fu_594_p2;
    end else begin
        grp_modp_montymul_fu_222_a = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_modp_montymul_fu_222_b = ni_reg_782;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_modp_montymul_fu_222_b = s_reg_815;
    end else begin
        grp_modp_montymul_fu_222_b = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        vla1_address0 = vla1_addr_311_reg_867;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        vla1_address0 = vla1_addr_313_reg_844;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        vla1_address0 = zext_ln1436_fu_497_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        vla1_address0 = zext_ln1428_fu_416_p1;
    end else begin
        vla1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        vla1_address1 = zext_ln1451_fu_645_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        vla1_address1 = vla1_addr_312_reg_838;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        vla1_address1 = zext_ln1435_fu_482_p1;
    end else begin
        vla1_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5))) begin
        vla1_ce0 = 1'b1;
    end else begin
        vla1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        vla1_ce1 = 1'b1;
    end else begin
        vla1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        vla1_d0 = grp_modp_montymul_fu_222_ap_return;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        vla1_d0 = tmp_s_reg_859;
    end else begin
        vla1_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9))) begin
        vla1_we0 = 4'd15;
    end else begin
        vla1_we0 = 4'd0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        vla1_we1 = 4'd15;
    end else begin
        vla1_we1 = 4'd0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((icmp_ln1411_fu_255_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((icmp_ln1411_fu_255_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln1416_fu_294_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln1422_fu_351_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln1431_fu_420_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & ((icmp_ln1411_reg_721 == 1'd1) | (icmp_ln1450_fu_604_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1425_2_fu_454_p2 = ($signed(trunc_ln1431_fu_432_p1) + $signed(mul_ln1430_reg_825));

assign add_ln1425_fu_436_p2 = ($signed(trunc_ln1431_fu_432_p1) + $signed(mul_ln1429_reg_820));

assign add_ln1428_1_fu_379_p2 = (shl_ln_fu_371_p3 + igm);

assign add_ln1428_fu_366_p2 = (trunc_ln1428_fu_362_p1 + trunc_ln_reg_763);

assign add_ln1431_1_fu_502_p2 = (idx18_reg_211 + stride_cast1_reg_698);

assign add_ln1450_1_fu_650_p2 = (idx_fu_92 + stride_cast1_reg_698);

assign add_ln685_fu_517_p2 = (vla1_q0 + sub_ln685_fu_512_p2);

assign add_ln697_fu_594_p2 = (zext_ln697_fu_590_p1 + sub_ln697_fu_559_p2);

assign and_ln685_fu_539_p1 = p;

assign and_ln685_fu_539_p2 = (select_ln685_fu_531_p3 & and_ln685_fu_539_p1);

assign and_ln697_fu_581_p1 = p;

assign and_ln697_fu_581_p2 = (select_ln697_fu_573_p3 & and_ln697_fu_581_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign dt_fu_314_p2 = t_fu_84 << 64'd1;

assign grp_fu_665_p1 = stride_cast_reg_715;

assign grp_fu_670_p0 = ($signed(trunc_ln1422_fu_394_p1) + $signed(trunc_ln1406_1_fu_398_p1));

assign grp_fu_670_p1 = stride_cast_reg_715;

assign hm_fu_300_p4 = {{m_fu_88[63:1]}};

assign icmp_ln1411_fu_255_p2 = ((logn == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln1416_fu_294_p2 = ((tmp_174_fu_284_p4 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln1422_fu_351_p2 = ((u_09_reg_189 == hm_reg_747) ? 1'b1 : 1'b0);

assign icmp_ln1431_fu_420_p2 = ((v_05_reg_200 == t_fu_84) ? 1'b1 : 1'b0);

assign icmp_ln1450_fu_604_p2 = ((k_02_fu_96 == n_reg_739) ? 1'b1 : 1'b0);

assign k_13_fu_609_p2 = (k_02_fu_96 + 64'd1);

assign lshr_ln35_fu_635_p4 = {{r_fu_630_p2[13:2]}};

assign lshr_ln36_fu_472_p4 = {{r1_fu_449_p2[13:2]}};

assign lshr_ln37_fu_487_p4 = {{r2_fu_467_p2[13:2]}};

assign n_fu_265_p2 = 64'd1 << zext_ln1414_fu_261_p1;

assign ni_fu_335_p2 = 32'd1 << sub_ln1449_fu_330_p2;

assign p0i_cast_fu_239_p1 = p0i;

assign p_cast_cast_cast_cast_fu_247_p1 = $unsigned(p_cast_cast_cast_fu_243_p1);

assign p_cast_cast_cast_fu_243_p0 = p;

assign p_cast_cast_cast_fu_243_p1 = p_cast_cast_cast_fu_243_p0;

assign r1_fu_449_p2 = (shl_ln77_fu_441_p3 + a);

assign r2_fu_467_p2 = (shl_ln1425_1_fu_459_p3 + a);

assign r_fu_630_p2 = (shl_ln76_fu_622_p3 + a);

assign select_ln685_fu_531_p3 = ((tmp_175_fu_523_p3[0:0] == 1'b1) ? 25'd33554431 : 25'd0);

assign select_ln697_fu_573_p3 = ((tmp_176_fu_565_p3[0:0] == 1'b1) ? 25'd33554431 : 25'd0);

assign sext_ln685_fu_544_p1 = $signed(and_ln685_fu_539_p2);

assign sext_ln697_fu_586_p1 = $signed(and_ln697_fu_581_p2);

assign shl_ln1425_1_fu_459_p3 = {{add_ln1425_2_fu_454_p2}, {2'd0}};

assign shl_ln76_fu_622_p3 = {{trunc_ln1406_fu_618_p1}, {2'd0}};

assign shl_ln77_fu_441_p3 = {{add_ln1425_fu_436_p2}, {2'd0}};

assign shl_ln_fu_371_p3 = {{add_ln1428_fu_366_p2}, {2'd0}};

assign stride_cast1_fu_235_p1 = stride;

assign stride_cast_fu_251_p1 = stride;

assign sub_ln1449_fu_330_p2 = (32'd31 - logn);

assign sub_ln685_fu_512_p2 = (vla1_q1 - p_cast_cast_cast_cast_reg_709);

assign sub_ln697_fu_559_p2 = (vla1_q1 - vla1_q0);

assign tmp_174_fu_284_p4 = {{m_fu_88[63:1]}};

assign tmp_175_fu_523_p3 = add_ln685_fu_517_p2[32'd31];

assign tmp_176_fu_565_p3 = sub_ln697_fu_559_p2[32'd31];

assign trunc_ln1406_1_fu_398_p1 = t_fu_84[11:0];

assign trunc_ln1406_fu_618_p1 = idx_fu_92[11:0];

assign trunc_ln1422_fu_394_p1 = v1_reg_177[11:0];

assign trunc_ln1428_fu_362_p1 = u_09_reg_189[11:0];

assign trunc_ln1431_fu_432_p1 = idx18_reg_211[11:0];

assign u_fu_356_p2 = (u_09_reg_189 + 63'd1);

assign v1_1_fu_507_p2 = (dt_reg_757 + v1_reg_177);

assign v_fu_426_p2 = (v_05_reg_200 + 64'd1);

assign vla1_d1 = (zext_ln685_fu_548_p1 + add_ln685_fu_517_p2);

assign zext_ln1414_fu_261_p1 = logn;

assign zext_ln1420_fu_310_p1 = hm_fu_300_p4;

assign zext_ln1428_fu_416_p1 = lshr_ln_reg_795;

assign zext_ln1435_fu_482_p1 = lshr_ln36_fu_472_p4;

assign zext_ln1436_fu_497_p1 = lshr_ln37_fu_487_p4;

assign zext_ln1451_fu_645_p1 = lshr_ln35_fu_635_p4;

assign zext_ln685_fu_548_p1 = $unsigned(sext_ln685_fu_544_p1);

assign zext_ln697_fu_590_p1 = $unsigned(sext_ln697_fu_586_p1);

always @ (posedge ap_clk) begin
    stride_cast1_reg_698[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    p0i_cast_reg_704[31] <= 1'b0;
    p_cast_cast_cast_cast_reg_709[31] <= 1'b0;
    stride_cast_reg_715[11:9] <= 3'b000;
    zext_ln1420_reg_752[63] <= 1'b0;
    dt_reg_757[0] <= 1'b0;
end

endmodule //solve_NTRU_modp_iNTT2_ext_1
