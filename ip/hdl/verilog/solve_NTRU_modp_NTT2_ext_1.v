// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module solve_NTRU_modp_NTT2_ext_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        vla1_address0,
        vla1_ce0,
        vla1_we0,
        vla1_d0,
        vla1_q0,
        vla1_address1,
        vla1_ce1,
        vla1_we1,
        vla1_d1,
        vla1_q1,
        a,
        stride,
        gm,
        logn,
        p,
        p0i
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] vla1_address0;
output   vla1_ce0;
output  [3:0] vla1_we0;
output  [31:0] vla1_d0;
input  [31:0] vla1_q0;
output  [11:0] vla1_address1;
output   vla1_ce1;
output  [3:0] vla1_we1;
output  [31:0] vla1_d1;
input  [31:0] vla1_q1;
input  [63:0] a;
input  [63:0] stride;
input  [63:0] gm;
input  [31:0] logn;
input  [31:0] p;
input  [31:0] p0i;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[11:0] vla1_address0;
reg vla1_ce0;
reg[3:0] vla1_we0;
reg[11:0] vla1_address1;
reg vla1_ce1;
reg[3:0] vla1_we1;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [30:0] empty_fu_206_p1;
reg   [30:0] empty_reg_556;
wire   [13:0] empty_304_fu_210_p1;
reg   [13:0] empty_304_reg_562;
wire   [11:0] stride_cast_cast_fu_218_p1;
reg   [11:0] stride_cast_cast_reg_568;
wire   [13:0] empty_306_fu_222_p1;
reg   [13:0] empty_306_reg_574;
wire   [0:0] icmp_ln1227_fu_226_p2;
reg   [0:0] icmp_ln1227_reg_579;
wire   [63:0] n_fu_236_p2;
reg   [63:0] n_reg_597;
wire   [62:0] ht_fu_260_p4;
reg   [62:0] ht_reg_608;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln1232_fu_255_p2;
wire   [63:0] zext_ln1236_fu_270_p1;
reg   [63:0] zext_ln1236_reg_613;
reg   [11:0] trunc_ln1234_1_reg_618;
wire   [11:0] trunc_ln1242_fu_284_p1;
reg   [11:0] trunc_ln1242_reg_623;
wire   [63:0] u_fu_293_p2;
reg   [63:0] u_reg_631;
wire    ap_CS_fsm_state3;
reg   [11:0] lshr_ln_reg_636;
wire   [0:0] icmp_ln1237_fu_288_p2;
wire  signed [11:0] trunc_ln1237_fu_331_p1;
wire    ap_CS_fsm_state5;
reg   [31:0] s_reg_656;
wire    ap_CS_fsm_state6;
wire  signed [11:0] grp_fu_530_p2;
reg  signed [11:0] mul_ln1243_reg_661;
wire  signed [11:0] grp_fu_535_p2;
reg  signed [11:0] mul_ln1244_reg_666;
wire   [62:0] v_fu_363_p2;
reg   [62:0] v_reg_674;
wire    ap_CS_fsm_state7;
reg   [11:0] vla1_addr_314_reg_679;
wire   [0:0] icmp_ln1245_fu_358_p2;
reg   [11:0] vla1_addr_315_reg_685;
wire   [63:0] add_ln1245_1_fu_439_p2;
reg   [63:0] add_ln1245_1_reg_690;
wire   [63:0] v1_2_fu_444_p2;
wire   [31:0] add_ln697_fu_524_p2;
reg   [31:0] add_ln697_reg_700;
wire    ap_CS_fsm_state8;
wire    y_modp_montymul_fu_194_ap_ready;
wire   [31:0] y_modp_montymul_fu_194_ap_return;
reg   [63:0] v1_reg_149;
reg   [63:0] u_07_reg_161;
reg   [62:0] v_03_reg_172;
wire    ap_CS_fsm_state9;
reg   [63:0] idx_reg_183;
wire   [63:0] zext_ln1242_fu_354_p1;
wire   [63:0] zext_ln1248_fu_419_p1;
wire   [63:0] zext_ln1249_fu_434_p1;
reg   [63:0] t_fu_72;
reg   [63:0] m_fu_76;
wire   [63:0] m_6_fu_340_p2;
wire   [7:0] empty_305_fu_214_p1;
wire   [63:0] zext_ln1230_fu_232_p1;
wire   [11:0] trunc_ln1242_1_fu_299_p1;
wire   [11:0] add_ln1242_fu_303_p2;
wire   [13:0] shl_ln_fu_308_p3;
wire   [13:0] add_ln1242_1_fu_316_p2;
wire   [11:0] trunc_ln1245_fu_369_p1;
(* use_dsp48 = "no" *) wire   [11:0] add_ln1239_fu_373_p2;
wire   [13:0] shl_ln78_fu_378_p3;
(* use_dsp48 = "no" *) wire   [11:0] add_ln1239_2_fu_391_p2;
wire   [13:0] shl_ln1239_1_fu_396_p3;
wire   [13:0] r1_fu_386_p2;
wire   [11:0] lshr_ln38_fu_409_p4;
wire   [13:0] r2_fu_404_p2;
wire   [11:0] lshr_ln39_fu_424_p4;
wire   [31:0] sub_ln685_fu_450_p2;
wire   [31:0] add_ln685_fu_455_p2;
wire   [0:0] tmp_fu_461_p3;
wire   [30:0] select_ln685_fu_469_p3;
wire   [30:0] and_ln685_fu_477_p2;
wire   [31:0] zext_ln685_fu_482_p1;
wire   [31:0] sub_ln697_fu_493_p2;
wire   [0:0] tmp_177_fu_499_p3;
wire   [30:0] select_ln697_fu_507_p3;
wire   [30:0] and_ln697_fu_515_p2;
wire   [31:0] zext_ln697_fu_520_p1;
wire   [7:0] grp_fu_530_p1;
wire  signed [11:0] grp_fu_535_p0;
wire   [7:0] grp_fu_535_p1;
reg   [8:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
end

solve_NTRU_modp_montymul y_modp_montymul_fu_194(
    .ap_ready(y_modp_montymul_fu_194_ap_ready),
    .a(vla1_q0),
    .b(s_reg_656),
    .p(p),
    .p0i(p0i),
    .ap_return(y_modp_montymul_fu_194_ap_return)
);

solve_NTRU_mul_mul_12s_8ns_12_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 12 ))
mul_mul_12s_8ns_12_4_1_U19(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln1237_fu_331_p1),
    .din1(grp_fu_530_p1),
    .ce(1'b1),
    .dout(grp_fu_530_p2)
);

solve_NTRU_mul_mul_12s_8ns_12_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 12 ))
mul_mul_12s_8ns_12_4_1_U20(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_535_p0),
    .din1(grp_fu_535_p1),
    .ce(1'b1),
    .dout(grp_fu_535_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        idx_reg_183 <= add_ln1245_1_reg_690;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        idx_reg_183 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1227_fu_226_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        m_fu_76 <= 64'd1;
    end else if (((icmp_ln1237_fu_288_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        m_fu_76 <= m_6_fu_340_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1227_fu_226_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        t_fu_72 <= n_fu_236_p2;
    end else if (((icmp_ln1237_fu_288_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        t_fu_72 <= zext_ln1236_reg_613;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln1245_fu_358_p2 == 1'd1))) begin
        u_07_reg_161 <= u_reg_631;
    end else if (((icmp_ln1232_fu_255_p2 == 1'd1) & (icmp_ln1227_reg_579 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        u_07_reg_161 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln1245_fu_358_p2 == 1'd1))) begin
        v1_reg_149 <= v1_2_fu_444_p2;
    end else if (((icmp_ln1232_fu_255_p2 == 1'd1) & (icmp_ln1227_reg_579 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        v1_reg_149 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        v_03_reg_172 <= v_reg_674;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        v_03_reg_172 <= 63'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln1245_fu_358_p2 == 1'd0))) begin
        add_ln1245_1_reg_690 <= add_ln1245_1_fu_439_p2;
        vla1_addr_314_reg_679 <= zext_ln1248_fu_419_p1;
        vla1_addr_315_reg_685 <= zext_ln1249_fu_434_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        add_ln697_reg_700 <= add_ln697_fu_524_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        empty_304_reg_562 <= empty_304_fu_210_p1;
        empty_306_reg_574 <= empty_306_fu_222_p1;
        empty_reg_556 <= empty_fu_206_p1;
        icmp_ln1227_reg_579 <= icmp_ln1227_fu_226_p2;
        stride_cast_cast_reg_568[7 : 0] <= stride_cast_cast_fu_218_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1232_fu_255_p2 == 1'd1) & (icmp_ln1227_reg_579 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ht_reg_608 <= {{t_fu_72[63:1]}};
        trunc_ln1234_1_reg_618 <= {{t_fu_72[12:1]}};
        trunc_ln1242_reg_623 <= trunc_ln1242_fu_284_p1;
        zext_ln1236_reg_613[62 : 0] <= zext_ln1236_fu_270_p1[62 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1237_fu_288_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        lshr_ln_reg_636 <= {{add_ln1242_1_fu_316_p2[13:2]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        mul_ln1243_reg_661 <= grp_fu_530_p2;
        mul_ln1244_reg_666 <= grp_fu_535_p2;
        s_reg_656 <= vla1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1227_fu_226_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        n_reg_597 <= n_fu_236_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        u_reg_631 <= u_fu_293_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        v_reg_674 <= v_fu_363_p2;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & ((icmp_ln1232_fu_255_p2 == 1'd0) | (icmp_ln1227_reg_579 == 1'd1))) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ((icmp_ln1232_fu_255_p2 == 1'd0) | (icmp_ln1227_reg_579 == 1'd1)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        vla1_address0 = vla1_addr_315_reg_685;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        vla1_address0 = zext_ln1249_fu_434_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        vla1_address0 = zext_ln1242_fu_354_p1;
    end else begin
        vla1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        vla1_address1 = vla1_addr_314_reg_679;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        vla1_address1 = zext_ln1248_fu_419_p1;
    end else begin
        vla1_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5))) begin
        vla1_ce0 = 1'b1;
    end else begin
        vla1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        vla1_ce1 = 1'b1;
    end else begin
        vla1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        vla1_we0 = 4'd15;
    end else begin
        vla1_we0 = 4'd0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        vla1_we1 = 4'd15;
    end else begin
        vla1_we1 = 4'd0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & ((icmp_ln1232_fu_255_p2 == 1'd0) | (icmp_ln1227_reg_579 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln1237_fu_288_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln1245_fu_358_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1239_2_fu_391_p2 = ($signed(trunc_ln1245_fu_369_p1) + $signed(mul_ln1244_reg_666));

assign add_ln1239_fu_373_p2 = ($signed(trunc_ln1245_fu_369_p1) + $signed(mul_ln1243_reg_661));

assign add_ln1242_1_fu_316_p2 = (shl_ln_fu_308_p3 + empty_306_reg_574);

assign add_ln1242_fu_303_p2 = (trunc_ln1242_1_fu_299_p1 + trunc_ln1242_reg_623);

assign add_ln1245_1_fu_439_p2 = (idx_reg_183 + stride);

assign add_ln685_fu_455_p2 = (y_modp_montymul_fu_194_ap_return + sub_ln685_fu_450_p2);

assign add_ln697_fu_524_p2 = (zext_ln697_fu_520_p1 + sub_ln697_fu_493_p2);

assign and_ln685_fu_477_p2 = (select_ln685_fu_469_p3 & empty_reg_556);

assign and_ln697_fu_515_p2 = (select_ln697_fu_507_p3 & empty_reg_556);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign empty_304_fu_210_p1 = a[13:0];

assign empty_305_fu_214_p1 = stride[7:0];

assign empty_306_fu_222_p1 = gm[13:0];

assign empty_fu_206_p1 = p[30:0];

assign grp_fu_530_p1 = stride_cast_cast_reg_568;

assign grp_fu_535_p0 = ($signed(trunc_ln1237_fu_331_p1) + $signed(trunc_ln1234_1_reg_618));

assign grp_fu_535_p1 = stride_cast_cast_reg_568;

assign ht_fu_260_p4 = {{t_fu_72[63:1]}};

assign icmp_ln1227_fu_226_p2 = ((logn == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln1232_fu_255_p2 = ((m_fu_76 < n_reg_597) ? 1'b1 : 1'b0);

assign icmp_ln1237_fu_288_p2 = ((u_07_reg_161 == m_fu_76) ? 1'b1 : 1'b0);

assign icmp_ln1245_fu_358_p2 = ((v_03_reg_172 == ht_reg_608) ? 1'b1 : 1'b0);

assign lshr_ln38_fu_409_p4 = {{r1_fu_386_p2[13:2]}};

assign lshr_ln39_fu_424_p4 = {{r2_fu_404_p2[13:2]}};

assign m_6_fu_340_p2 = m_fu_76 << 64'd1;

assign n_fu_236_p2 = 64'd1 << zext_ln1230_fu_232_p1;

assign r1_fu_386_p2 = (shl_ln78_fu_378_p3 + empty_304_reg_562);

assign r2_fu_404_p2 = (shl_ln1239_1_fu_396_p3 + empty_304_reg_562);

assign select_ln685_fu_469_p3 = ((tmp_fu_461_p3[0:0] == 1'b1) ? 31'd2147483647 : 31'd0);

assign select_ln697_fu_507_p3 = ((tmp_177_fu_499_p3[0:0] == 1'b1) ? 31'd2147483647 : 31'd0);

assign shl_ln1239_1_fu_396_p3 = {{add_ln1239_2_fu_391_p2}, {2'd0}};

assign shl_ln78_fu_378_p3 = {{add_ln1239_fu_373_p2}, {2'd0}};

assign shl_ln_fu_308_p3 = {{add_ln1242_fu_303_p2}, {2'd0}};

assign stride_cast_cast_fu_218_p1 = empty_305_fu_214_p1;

assign sub_ln685_fu_450_p2 = (vla1_q1 - p);

assign sub_ln697_fu_493_p2 = (vla1_q1 - y_modp_montymul_fu_194_ap_return);

assign tmp_177_fu_499_p3 = sub_ln697_fu_493_p2[32'd31];

assign tmp_fu_461_p3 = add_ln685_fu_455_p2[32'd31];

assign trunc_ln1237_fu_331_p1 = v1_reg_149[11:0];

assign trunc_ln1242_1_fu_299_p1 = u_07_reg_161[11:0];

assign trunc_ln1242_fu_284_p1 = m_fu_76[11:0];

assign trunc_ln1245_fu_369_p1 = idx_reg_183[11:0];

assign u_fu_293_p2 = (u_07_reg_161 + 64'd1);

assign v1_2_fu_444_p2 = (t_fu_72 + v1_reg_149);

assign v_fu_363_p2 = (v_03_reg_172 + 63'd1);

assign vla1_d0 = add_ln697_reg_700;

assign vla1_d1 = (zext_ln685_fu_482_p1 + add_ln685_fu_455_p2);

assign zext_ln1230_fu_232_p1 = logn;

assign zext_ln1236_fu_270_p1 = ht_fu_260_p4;

assign zext_ln1242_fu_354_p1 = lshr_ln_reg_636;

assign zext_ln1248_fu_419_p1 = lshr_ln38_fu_409_p4;

assign zext_ln1249_fu_434_p1 = lshr_ln39_fu_424_p4;

assign zext_ln685_fu_482_p1 = and_ln685_fu_477_p2;

assign zext_ln697_fu_520_p1 = and_ln697_fu_515_p2;

always @ (posedge ap_clk) begin
    stride_cast_cast_reg_568[11:8] <= 4'b0000;
    zext_ln1236_reg_613[63] <= 1'b0;
end

endmodule //solve_NTRU_modp_NTT2_ext_1
