-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity solve_NTRU_iFFT_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    vla1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    vla1_ce0 : OUT STD_LOGIC;
    vla1_we0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    vla1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    vla1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    vla1_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    vla1_ce1 : OUT STD_LOGIC;
    vla1_we1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    vla1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    vla1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    f : IN STD_LOGIC_VECTOR (13 downto 0);
    logn : IN STD_LOGIC_VECTOR (31 downto 0);
    fpr_gm_tab_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    fpr_gm_tab_ce0 : OUT STD_LOGIC;
    fpr_gm_tab_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    fpr_gm_tab_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    fpr_gm_tab_ce1 : OUT STD_LOGIC;
    fpr_gm_tab_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of solve_NTRU_iFFT_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (24 downto 0) := "0000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (24 downto 0) := "0000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (24 downto 0) := "0000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (24 downto 0) := "0000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (24 downto 0) := "0000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (24 downto 0) := "0000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (24 downto 0) := "0001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (24 downto 0) := "0010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (24 downto 0) := "0100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (24 downto 0) := "1000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv64_8000000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal fpr_p2_tab_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal fpr_p2_tab_ce0 : STD_LOGIC;
    signal fpr_p2_tab_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_288_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_308 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal zext_ln1449_fu_314_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1449_reg_961 : STD_LOGIC_VECTOR (63 downto 0);
    signal n_fu_318_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal n_reg_966 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1452_fu_334_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1452_reg_971 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln_reg_976 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1457_fu_398_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1457_reg_991 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln1453_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal dt_fu_402_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal dt_reg_996 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln29_reg_1003 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln1474_fu_418_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln1474_reg_1008 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln1489_fu_422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1489_reg_1013 : STD_LOGIC_VECTOR (0 downto 0);
    signal i1_1_fu_437_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal i1_1_reg_1032 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln1459_fu_432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_re_reg_1047 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal s_im_fu_504_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_im_reg_1053 : STD_LOGIC_VECTOR (63 downto 0);
    signal vla1_addr_345_reg_1062 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln1468_fu_508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal vla1_addr_346_reg_1068 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln1473_2_reg_1073 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln1474_1_reg_1079 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln31_reg_1085 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_8_fu_641_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_8_reg_1091 : STD_LOGIC_VECTOR (63 downto 0);
    signal j1_fu_647_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln1459_fu_652_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal vla1_load_225_reg_1106 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal vla1_load_226_reg_1111 : STD_LOGIC_VECTOR (31 downto 0);
    signal vla1_addr_347_reg_1116 : STD_LOGIC_VECTOR (11 downto 0);
    signal vla1_addr_348_reg_1122 : STD_LOGIC_VECTOR (11 downto 0);
    signal vla1_load_227_reg_1127 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal vla1_load_228_reg_1132 : STD_LOGIC_VECTOR (31 downto 0);
    signal vla1_addr_349_reg_1137 : STD_LOGIC_VECTOR (11 downto 0);
    signal vla1_addr_350_reg_1143 : STD_LOGIC_VECTOR (11 downto 0);
    signal x_re_fu_691_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal y_re_fu_705_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal vla1_addr_351_reg_1160 : STD_LOGIC_VECTOR (11 downto 0);
    signal vla1_addr_352_reg_1166 : STD_LOGIC_VECTOR (11 downto 0);
    signal x_im_fu_731_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal y_im_fu_745_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal fpct_im_2_reg_1183 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_292_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal test1_reg_1189 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_fu_296_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal test2_reg_1194 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_300_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal test1_5_reg_1199 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_304_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal test2_5_reg_1204 : STD_LOGIC_VECTOR (63 downto 0);
    signal ni_reg_1209 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal vla1_addr_reg_1217 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal icmp_ln1493_fu_834_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal vla1_addr_344_reg_1223 : STD_LOGIC_VECTOR (11 downto 0);
    signal bitcast_ln1494_1_fu_901_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal indvars_iv_reg_241 : STD_LOGIC_VECTOR (63 downto 0);
    signal i1_reg_251 : STD_LOGIC_VECTOR (63 downto 0);
    signal j1_2_reg_262 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_03_reg_274 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal zext_ln1466_fu_460_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1467_fu_471_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1472_fu_541_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1472_1_fu_552_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1473_fu_657_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1473_1_fu_666_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1474_fu_671_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1474_1_fu_680_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1475_fu_711_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1475_1_fu_720_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1494_fu_872_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1494_1_fu_883_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_5_fu_86 : STD_LOGIC_VECTOR (63 downto 0);
    signal u_08_fu_90 : STD_LOGIC_VECTOR (63 downto 0);
    signal u_fu_476_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_fu_94 : STD_LOGIC_VECTOR (63 downto 0);
    signal u_11_fu_98 : STD_LOGIC_VECTOR (63 downto 0);
    signal u_214_fu_839_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln12_fu_755_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln13_fu_775_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln64_fu_795_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln65_fu_815_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal trunc_ln1494_3_fu_910_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_284_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_284_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_fu_288_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_288_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_292_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_292_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal hn_fu_324_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_188_fu_369_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal hm_fu_388_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln1466_fu_443_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1466_fu_447_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln_fu_452_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln1467_fu_465_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal bitcast_ln147_fu_494_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln147_fu_498_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1472_fu_514_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln108_fu_518_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln1472_fu_526_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln30_fu_531_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1472_1_fu_546_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1473_fu_557_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln109_fu_562_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln1473_1_fu_570_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln1474_fu_585_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln110_fu_590_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln1474_1_fu_598_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln1475_fu_613_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln111_fu_618_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln1475_1_fu_626_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln1473_2_fu_661_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1474_2_fu_675_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_s_fu_685_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_85_fu_697_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln1475_2_fu_715_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_84_fu_725_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_86_fu_737_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_284_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln12_fu_751_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln13_fu_771_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln64_fu_791_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln65_fu_811_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1494_fu_845_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln107_fu_849_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln1494_fu_857_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln1494_2_fu_862_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1494_1_fu_877_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_fu_893_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln1494_fu_906_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_284_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_288_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component solve_NTRU_dadddsub_64ns_64ns_64_3_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component solve_NTRU_dmul_64ns_64ns_64_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component solve_NTRU_iFFT_1_fpr_p2_tab_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    fpr_p2_tab_U : component solve_NTRU_iFFT_1_fpr_p2_tab_ROM_AUTO_1R
    generic map (
        DataWidth => 64,
        AddressRange => 11,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fpr_p2_tab_address0,
        ce0 => fpr_p2_tab_ce0,
        q0 => fpr_p2_tab_q0);

    dadddsub_64ns_64ns_64_3_full_dsp_1_U54 : component solve_NTRU_dadddsub_64ns_64ns_64_3_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_284_p0,
        din1 => grp_fu_284_p1,
        opcode => grp_fu_284_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_284_p2);

    dadddsub_64ns_64ns_64_3_full_dsp_1_U55 : component solve_NTRU_dadddsub_64ns_64ns_64_3_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_288_p0,
        din1 => grp_fu_288_p1,
        opcode => grp_fu_288_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_288_p2);

    dmul_64ns_64ns_64_4_max_dsp_1_U56 : component solve_NTRU_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_292_p0,
        din1 => grp_fu_292_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_292_p2);

    dmul_64ns_64ns_64_4_max_dsp_1_U57 : component solve_NTRU_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => fpct_im_2_reg_1183,
        din1 => s_im_reg_1053,
        ce => ap_const_logic_1,
        dout => grp_fu_296_p2);

    dmul_64ns_64ns_64_4_max_dsp_1_U58 : component solve_NTRU_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_308,
        din1 => s_im_reg_1053,
        ce => ap_const_logic_1,
        dout => grp_fu_300_p2);

    dmul_64ns_64ns_64_4_max_dsp_1_U59 : component solve_NTRU_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => fpct_im_2_reg_1183,
        din1 => s_re_reg_1047,
        ce => ap_const_logic_1,
        dout => grp_fu_304_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i1_reg_251_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln1453_fu_379_p2 = ap_const_lv1_0))) then 
                i1_reg_251 <= ap_const_lv64_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln1468_fu_508_p2 = ap_const_lv1_0))) then 
                i1_reg_251 <= i1_1_reg_1032;
            end if; 
        end if;
    end process;

    indvars_iv_reg_241_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln1453_fu_379_p2 = ap_const_lv1_0))) then 
                indvars_iv_reg_241 <= t_fu_94;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln1468_fu_508_p2 = ap_const_lv1_0))) then 
                indvars_iv_reg_241 <= add_ln1459_fu_652_p2;
            end if; 
        end if;
    end process;

    j1_2_reg_262_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln1453_fu_379_p2 = ap_const_lv1_0))) then 
                j1_2_reg_262 <= ap_const_lv64_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln1468_fu_508_p2 = ap_const_lv1_0))) then 
                j1_2_reg_262 <= j1_fu_647_p2;
            end if; 
        end if;
    end process;

    j_03_reg_274_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                j_03_reg_274 <= j_8_reg_1091;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_03_reg_274 <= j1_2_reg_262;
            end if; 
        end if;
    end process;

    m_5_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                m_5_fu_86 <= n_fu_318_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln1459_fu_432_p2 = ap_const_lv1_0))) then 
                m_5_fu_86 <= zext_ln1457_reg_991;
            end if; 
        end if;
    end process;

    t_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                t_fu_94 <= ap_const_lv64_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln1459_fu_432_p2 = ap_const_lv1_0))) then 
                t_fu_94 <= dt_reg_996;
            end if; 
        end if;
    end process;

    u_08_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                u_08_fu_90 <= zext_ln1449_fu_314_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln1459_fu_432_p2 = ap_const_lv1_0))) then 
                u_08_fu_90 <= u_fu_476_p2;
            end if; 
        end if;
    end process;

    u_11_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln1489_fu_422_p2 = ap_const_lv1_0) and (icmp_ln1453_fu_379_p2 = ap_const_lv1_1))) then 
                u_11_fu_98 <= ap_const_lv64_0;
            elsif (((icmp_ln1493_fu_834_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln1489_reg_1013 = ap_const_lv1_0))) then 
                u_11_fu_98 <= u_214_fu_839_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln1453_fu_379_p2 = ap_const_lv1_0))) then
                    dt_reg_996(63 downto 1) <= dt_fu_402_p2(63 downto 1);
                trunc_ln1474_reg_1008 <= trunc_ln1474_fu_418_p1;
                trunc_ln29_reg_1003 <= m_5_fu_86(10 downto 1);
                    zext_ln1457_reg_991(62 downto 0) <= zext_ln1457_fu_398_p1(62 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                fpct_im_2_reg_1183 <= grp_fu_288_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i1_1_reg_1032 <= i1_1_fu_437_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln1453_fu_379_p2 = ap_const_lv1_1))) then
                icmp_ln1489_reg_1013 <= icmp_ln1489_fu_422_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln1468_fu_508_p2 = ap_const_lv1_1))) then
                j_8_reg_1091 <= j_8_fu_641_p2;
                trunc_ln1473_2_reg_1073 <= add_ln1473_1_fu_570_p2(13 downto 2);
                trunc_ln1474_1_reg_1079 <= add_ln1474_1_fu_598_p2(13 downto 2);
                trunc_ln31_reg_1085 <= add_ln1475_1_fu_626_p2(13 downto 2);
                vla1_addr_345_reg_1062 <= zext_ln1472_fu_541_p1(12 - 1 downto 0);
                vla1_addr_346_reg_1068 <= zext_ln1472_1_fu_552_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                n_reg_966 <= n_fu_318_p2;
                trunc_ln_reg_976 <= n_fu_318_p2(11 downto 1);
                    zext_ln1449_reg_961(31 downto 0) <= zext_ln1449_fu_314_p1(31 downto 0);
                    zext_ln1452_reg_971(62 downto 0) <= zext_ln1452_fu_334_p1(62 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                ni_reg_1209 <= fpr_p2_tab_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state10))) then
                reg_308 <= grp_fu_288_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                s_im_reg_1053 <= s_im_fu_504_p1;
                s_re_reg_1047 <= fpr_gm_tab_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                test1_5_reg_1199 <= grp_fu_300_p2;
                test1_reg_1189 <= grp_fu_292_p2;
                test2_5_reg_1204 <= grp_fu_304_p2;
                test2_reg_1194 <= grp_fu_296_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1493_fu_834_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln1489_reg_1013 = ap_const_lv1_0))) then
                vla1_addr_344_reg_1223 <= zext_ln1494_1_fu_883_p1(12 - 1 downto 0);
                vla1_addr_reg_1217 <= zext_ln1494_fu_872_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                vla1_addr_347_reg_1116 <= zext_ln1473_fu_657_p1(12 - 1 downto 0);
                vla1_addr_348_reg_1122 <= zext_ln1473_1_fu_666_p1(12 - 1 downto 0);
                vla1_load_225_reg_1106 <= vla1_q1;
                vla1_load_226_reg_1111 <= vla1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                vla1_addr_349_reg_1137 <= zext_ln1474_fu_671_p1(12 - 1 downto 0);
                vla1_addr_350_reg_1143 <= zext_ln1474_1_fu_680_p1(12 - 1 downto 0);
                vla1_load_227_reg_1127 <= vla1_q1;
                vla1_load_228_reg_1132 <= vla1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                vla1_addr_351_reg_1160 <= zext_ln1475_fu_711_p1(12 - 1 downto 0);
                vla1_addr_352_reg_1166 <= zext_ln1475_1_fu_720_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;
    zext_ln1449_reg_961(63 downto 32) <= "00000000000000000000000000000000";
    zext_ln1452_reg_971(63) <= '0';
    zext_ln1457_reg_991(63) <= '0';
    dt_reg_996(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln1453_fu_379_p2, icmp_ln1489_fu_422_p2, icmp_ln1489_reg_1013, ap_CS_fsm_state3, icmp_ln1459_fu_432_p2, ap_CS_fsm_state5, icmp_ln1468_fu_508_p2, ap_CS_fsm_state21, icmp_ln1493_fu_834_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln1489_fu_422_p2 = ap_const_lv1_1) and (icmp_ln1453_fu_379_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln1489_fu_422_p2 = ap_const_lv1_0) and (icmp_ln1453_fu_379_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln1459_fu_432_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln1468_fu_508_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state21) and ((icmp_ln1493_fu_834_p2 = ap_const_lv1_1) or (icmp_ln1489_reg_1013 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln1459_fu_652_p2 <= std_logic_vector(unsigned(dt_reg_996) + unsigned(indvars_iv_reg_241));
    add_ln1466_fu_447_p2 <= std_logic_vector(unsigned(trunc_ln1466_fu_443_p1) + unsigned(trunc_ln29_reg_1003));
    add_ln1472_1_fu_546_p2 <= std_logic_vector(unsigned(trunc_ln30_fu_531_p4) + unsigned(ap_const_lv12_1));
    add_ln1472_fu_526_p2 <= std_logic_vector(unsigned(shl_ln108_fu_518_p3) + unsigned(f));
    add_ln1473_1_fu_570_p2 <= std_logic_vector(unsigned(shl_ln109_fu_562_p3) + unsigned(f));
    add_ln1473_2_fu_661_p2 <= std_logic_vector(unsigned(trunc_ln1473_2_reg_1073) + unsigned(ap_const_lv12_1));
    add_ln1473_fu_557_p2 <= std_logic_vector(unsigned(trunc_ln1472_fu_514_p1) + unsigned(trunc_ln_reg_976));
    add_ln1474_1_fu_598_p2 <= std_logic_vector(unsigned(shl_ln110_fu_590_p3) + unsigned(f));
    add_ln1474_2_fu_675_p2 <= std_logic_vector(unsigned(trunc_ln1474_1_reg_1079) + unsigned(ap_const_lv12_1));
    add_ln1474_fu_585_p2 <= std_logic_vector(unsigned(trunc_ln1472_fu_514_p1) + unsigned(trunc_ln1474_reg_1008));
    add_ln1475_1_fu_626_p2 <= std_logic_vector(unsigned(shl_ln111_fu_618_p3) + unsigned(f));
    add_ln1475_2_fu_715_p2 <= std_logic_vector(unsigned(trunc_ln31_reg_1085) + unsigned(ap_const_lv12_1));
    add_ln1475_fu_613_p2 <= std_logic_vector(unsigned(add_ln1474_fu_585_p2) + unsigned(trunc_ln_reg_976));
    add_ln1494_1_fu_877_p2 <= std_logic_vector(unsigned(trunc_ln1494_2_fu_862_p4) + unsigned(ap_const_lv12_1));
    add_ln1494_fu_857_p2 <= std_logic_vector(unsigned(shl_ln107_fu_849_p3) + unsigned(f));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln1489_reg_1013, ap_CS_fsm_state21, icmp_ln1493_fu_834_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state21) and ((icmp_ln1493_fu_834_p2 = ap_const_lv1_1) or (icmp_ln1489_reg_1013 = ap_const_lv1_1))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln1489_reg_1013, ap_CS_fsm_state21, icmp_ln1493_fu_834_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) and ((icmp_ln1493_fu_834_p2 = ap_const_lv1_1) or (icmp_ln1489_reg_1013 = ap_const_lv1_1)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln12_fu_751_p1 <= grp_fu_284_p2;
    bitcast_ln13_fu_771_p1 <= grp_fu_284_p2;
    bitcast_ln147_fu_494_p1 <= fpr_gm_tab_q0;
    bitcast_ln1494_1_fu_901_p1 <= tmp_fu_893_p3;
    bitcast_ln1494_fu_906_p1 <= grp_fu_292_p2;
    bitcast_ln64_fu_791_p1 <= grp_fu_284_p2;
    bitcast_ln65_fu_811_p1 <= reg_308;
    dt_fu_402_p2 <= std_logic_vector(shift_left(unsigned(t_fu_94),to_integer(unsigned('0' & ap_const_lv64_1(31-1 downto 0)))));
    fpr_gm_tab_address0 <= zext_ln1467_fu_471_p1(11 - 1 downto 0);
    fpr_gm_tab_address1 <= zext_ln1466_fu_460_p1(11 - 1 downto 0);

    fpr_gm_tab_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fpr_gm_tab_ce0 <= ap_const_logic_1;
        else 
            fpr_gm_tab_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fpr_gm_tab_ce1_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fpr_gm_tab_ce1 <= ap_const_logic_1;
        else 
            fpr_gm_tab_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    fpr_p2_tab_address0 <= zext_ln1449_reg_961(4 - 1 downto 0);

    fpr_p2_tab_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            fpr_p2_tab_ce0 <= ap_const_logic_1;
        else 
            fpr_p2_tab_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_284_opcode_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_284_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            grp_fu_284_opcode <= ap_const_lv2_0;
        else 
            grp_fu_284_opcode <= "XX";
        end if; 
    end process;


    grp_fu_284_p0_assign_proc : process(x_re_fu_691_p1, ap_CS_fsm_state8, x_im_fu_731_p1, ap_CS_fsm_state9, test1_reg_1189, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_284_p0 <= test1_reg_1189;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_284_p0 <= x_im_fu_731_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_284_p0 <= x_re_fu_691_p1;
        else 
            grp_fu_284_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_284_p1_assign_proc : process(ap_CS_fsm_state8, y_re_fu_705_p1, ap_CS_fsm_state9, y_im_fu_745_p1, test2_reg_1194, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_284_p1 <= test2_reg_1194;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_284_p1 <= y_im_fu_745_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_284_p1 <= y_re_fu_705_p1;
        else 
            grp_fu_284_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_288_opcode_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            grp_fu_288_opcode <= ap_const_lv2_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_288_opcode <= ap_const_lv2_0;
        else 
            grp_fu_288_opcode <= "XX";
        end if; 
    end process;


    grp_fu_288_p0_assign_proc : process(x_re_fu_691_p1, ap_CS_fsm_state8, x_im_fu_731_p1, ap_CS_fsm_state9, test1_5_reg_1199, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_288_p0 <= test1_5_reg_1199;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_288_p0 <= x_im_fu_731_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_288_p0 <= x_re_fu_691_p1;
        else 
            grp_fu_288_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_288_p1_assign_proc : process(ap_CS_fsm_state8, y_re_fu_705_p1, ap_CS_fsm_state9, y_im_fu_745_p1, test2_5_reg_1204, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_288_p1 <= test2_5_reg_1204;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_288_p1 <= y_im_fu_745_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_288_p1 <= y_re_fu_705_p1;
        else 
            grp_fu_288_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_292_p0_assign_proc : process(reg_308, bitcast_ln1494_1_fu_901_p1, ap_CS_fsm_state22, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_292_p0 <= bitcast_ln1494_1_fu_901_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_292_p0 <= reg_308;
        else 
            grp_fu_292_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_292_p1_assign_proc : process(s_re_reg_1047, ni_reg_1209, ap_CS_fsm_state22, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_292_p1 <= ni_reg_1209;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_292_p1 <= s_re_reg_1047;
        else 
            grp_fu_292_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    hm_fu_388_p4 <= m_5_fu_86(63 downto 1);
    hn_fu_324_p4 <= n_fu_318_p2(63 downto 1);
    i1_1_fu_437_p2 <= std_logic_vector(unsigned(i1_reg_251) + unsigned(ap_const_lv64_1));
    icmp_ln1453_fu_379_p2 <= "1" when (tmp_188_fu_369_p4 = ap_const_lv63_0) else "0";
    icmp_ln1459_fu_432_p2 <= "1" when (unsigned(j1_2_reg_262) < unsigned(zext_ln1452_reg_971)) else "0";
    icmp_ln1468_fu_508_p2 <= "1" when (unsigned(j_03_reg_274) < unsigned(indvars_iv_reg_241)) else "0";
    icmp_ln1489_fu_422_p2 <= "1" when (logn = ap_const_lv32_0) else "0";
    icmp_ln1493_fu_834_p2 <= "1" when (u_11_fu_98 = n_reg_966) else "0";
    j1_fu_647_p2 <= std_logic_vector(unsigned(dt_reg_996) + unsigned(j1_2_reg_262));
    j_8_fu_641_p2 <= std_logic_vector(unsigned(j_03_reg_274) + unsigned(ap_const_lv64_1));
    n_fu_318_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_1),to_integer(unsigned('0' & zext_ln1449_fu_314_p1(31-1 downto 0)))));
    or_ln1467_fu_465_p2 <= (shl_ln_fu_452_p3 or ap_const_lv11_1);
    s_im_fu_504_p1 <= xor_ln147_fu_498_p2;
    shl_ln107_fu_849_p3 <= (trunc_ln1494_fu_845_p1 & ap_const_lv3_0);
    shl_ln108_fu_518_p3 <= (trunc_ln1472_fu_514_p1 & ap_const_lv3_0);
    shl_ln109_fu_562_p3 <= (add_ln1473_fu_557_p2 & ap_const_lv3_0);
    shl_ln110_fu_590_p3 <= (add_ln1474_fu_585_p2 & ap_const_lv3_0);
    shl_ln111_fu_618_p3 <= (add_ln1475_fu_613_p2 & ap_const_lv3_0);
    shl_ln_fu_452_p3 <= (add_ln1466_fu_447_p2 & ap_const_lv1_0);
    tmp_188_fu_369_p4 <= u_08_fu_90(63 downto 1);
    tmp_84_fu_725_p3 <= (vla1_load_228_reg_1132 & vla1_load_227_reg_1127);
    tmp_85_fu_697_p3 <= (vla1_q0 & vla1_q1);
    tmp_86_fu_737_p3 <= (vla1_q0 & vla1_q1);
    tmp_fu_893_p3 <= (vla1_q0 & vla1_q1);
    tmp_s_fu_685_p3 <= (vla1_load_226_reg_1111 & vla1_load_225_reg_1106);
    trunc_ln12_fu_755_p1 <= bitcast_ln12_fu_751_p1(32 - 1 downto 0);
    trunc_ln13_fu_775_p1 <= bitcast_ln13_fu_771_p1(32 - 1 downto 0);
    trunc_ln1466_fu_443_p1 <= i1_reg_251(10 - 1 downto 0);
    trunc_ln1472_fu_514_p1 <= j_03_reg_274(11 - 1 downto 0);
    trunc_ln1474_fu_418_p1 <= t_fu_94(11 - 1 downto 0);
    trunc_ln1494_2_fu_862_p4 <= add_ln1494_fu_857_p2(13 downto 2);
    trunc_ln1494_3_fu_910_p1 <= bitcast_ln1494_fu_906_p1(32 - 1 downto 0);
    trunc_ln1494_fu_845_p1 <= u_11_fu_98(11 - 1 downto 0);
    trunc_ln30_fu_531_p4 <= add_ln1472_fu_526_p2(13 downto 2);
    trunc_ln64_fu_795_p1 <= bitcast_ln64_fu_791_p1(32 - 1 downto 0);
    trunc_ln65_fu_815_p1 <= bitcast_ln65_fu_811_p1(32 - 1 downto 0);
    u_214_fu_839_p2 <= std_logic_vector(unsigned(u_11_fu_98) + unsigned(ap_const_lv64_1));
    u_fu_476_p2 <= std_logic_vector(unsigned(u_08_fu_90) + unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF));

    vla1_address0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state18, ap_CS_fsm_state5, vla1_addr_346_reg_1068, ap_CS_fsm_state6, vla1_addr_348_reg_1122, ap_CS_fsm_state7, vla1_addr_350_reg_1143, ap_CS_fsm_state8, vla1_addr_352_reg_1166, ap_CS_fsm_state11, ap_CS_fsm_state21, vla1_addr_344_reg_1223, ap_CS_fsm_state19, zext_ln1472_1_fu_552_p1, zext_ln1473_1_fu_666_p1, zext_ln1474_1_fu_680_p1, zext_ln1475_1_fu_720_p1, zext_ln1494_1_fu_883_p1, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            vla1_address0 <= vla1_addr_344_reg_1223;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            vla1_address0 <= zext_ln1494_1_fu_883_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            vla1_address0 <= vla1_addr_352_reg_1166;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            vla1_address0 <= vla1_addr_350_reg_1143;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            vla1_address0 <= vla1_addr_348_reg_1122;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            vla1_address0 <= vla1_addr_346_reg_1068;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            vla1_address0 <= zext_ln1475_1_fu_720_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            vla1_address0 <= zext_ln1474_1_fu_680_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            vla1_address0 <= zext_ln1473_1_fu_666_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            vla1_address0 <= zext_ln1472_1_fu_552_p1(12 - 1 downto 0);
        else 
            vla1_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    vla1_address1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state18, vla1_addr_345_reg_1062, ap_CS_fsm_state5, ap_CS_fsm_state6, vla1_addr_347_reg_1116, ap_CS_fsm_state7, vla1_addr_349_reg_1137, ap_CS_fsm_state8, vla1_addr_351_reg_1160, ap_CS_fsm_state11, vla1_addr_reg_1217, ap_CS_fsm_state21, ap_CS_fsm_state19, zext_ln1472_fu_541_p1, zext_ln1473_fu_657_p1, zext_ln1474_fu_671_p1, zext_ln1475_fu_711_p1, zext_ln1494_fu_872_p1, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            vla1_address1 <= vla1_addr_reg_1217;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            vla1_address1 <= zext_ln1494_fu_872_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            vla1_address1 <= vla1_addr_351_reg_1160;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            vla1_address1 <= vla1_addr_349_reg_1137;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            vla1_address1 <= vla1_addr_347_reg_1116;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            vla1_address1 <= vla1_addr_345_reg_1062;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            vla1_address1 <= zext_ln1475_fu_711_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            vla1_address1 <= zext_ln1474_fu_671_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            vla1_address1 <= zext_ln1473_fu_657_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            vla1_address1 <= zext_ln1472_fu_541_p1(12 - 1 downto 0);
        else 
            vla1_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    vla1_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state18, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state21, ap_CS_fsm_state19, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            vla1_ce0 <= ap_const_logic_1;
        else 
            vla1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    vla1_ce1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state18, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state21, ap_CS_fsm_state19, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            vla1_ce1 <= ap_const_logic_1;
        else 
            vla1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    vla1_d0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state18, ap_CS_fsm_state11, ap_CS_fsm_state19, ap_CS_fsm_state25, bitcast_ln12_fu_751_p1, bitcast_ln13_fu_771_p1, bitcast_ln64_fu_791_p1, bitcast_ln65_fu_811_p1, bitcast_ln1494_fu_906_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            vla1_d0 <= bitcast_ln1494_fu_906_p1(63 downto 32);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            vla1_d0 <= bitcast_ln65_fu_811_p1(63 downto 32);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            vla1_d0 <= bitcast_ln64_fu_791_p1(63 downto 32);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            vla1_d0 <= bitcast_ln13_fu_771_p1(63 downto 32);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            vla1_d0 <= bitcast_ln12_fu_751_p1(63 downto 32);
        else 
            vla1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    vla1_d1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state18, ap_CS_fsm_state11, ap_CS_fsm_state19, trunc_ln12_fu_755_p1, trunc_ln13_fu_775_p1, trunc_ln64_fu_795_p1, trunc_ln65_fu_815_p1, ap_CS_fsm_state25, trunc_ln1494_3_fu_910_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            vla1_d1 <= trunc_ln1494_3_fu_910_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            vla1_d1 <= trunc_ln65_fu_815_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            vla1_d1 <= trunc_ln64_fu_795_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            vla1_d1 <= trunc_ln13_fu_775_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            vla1_d1 <= trunc_ln12_fu_755_p1;
        else 
            vla1_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    vla1_we0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state18, ap_CS_fsm_state11, ap_CS_fsm_state19, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            vla1_we0 <= ap_const_lv4_F;
        else 
            vla1_we0 <= ap_const_lv4_0;
        end if; 
    end process;


    vla1_we1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state18, ap_CS_fsm_state11, ap_CS_fsm_state19, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            vla1_we1 <= ap_const_lv4_F;
        else 
            vla1_we1 <= ap_const_lv4_0;
        end if; 
    end process;

    x_im_fu_731_p1 <= tmp_84_fu_725_p3;
    x_re_fu_691_p1 <= tmp_s_fu_685_p3;
    xor_ln147_fu_498_p2 <= (bitcast_ln147_fu_494_p1 xor ap_const_lv64_8000000000000000);
    y_im_fu_745_p1 <= tmp_86_fu_737_p3;
    y_re_fu_705_p1 <= tmp_85_fu_697_p3;
    zext_ln1449_fu_314_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(logn),64));
    zext_ln1452_fu_334_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(hn_fu_324_p4),64));
    zext_ln1457_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(hm_fu_388_p4),64));
    zext_ln1466_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_452_p3),64));
    zext_ln1467_fu_471_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln1467_fu_465_p2),64));
    zext_ln1472_1_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1472_1_fu_546_p2),64));
    zext_ln1472_fu_541_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln30_fu_531_p4),64));
    zext_ln1473_1_fu_666_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1473_2_fu_661_p2),64));
    zext_ln1473_fu_657_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1473_2_reg_1073),64));
    zext_ln1474_1_fu_680_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1474_2_fu_675_p2),64));
    zext_ln1474_fu_671_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1474_1_reg_1079),64));
    zext_ln1475_1_fu_720_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1475_2_fu_715_p2),64));
    zext_ln1475_fu_711_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln31_reg_1085),64));
    zext_ln1494_1_fu_883_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1494_1_fu_877_p2),64));
    zext_ln1494_fu_872_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1494_2_fu_862_p4),64));
end behav;
