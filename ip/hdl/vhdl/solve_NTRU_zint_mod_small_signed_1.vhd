-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity solve_NTRU_zint_mod_small_signed_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    vla1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    vla1_ce0 : OUT STD_LOGIC;
    vla1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    d : IN STD_LOGIC_VECTOR (13 downto 0);
    dlen : IN STD_LOGIC_VECTOR (7 downto 0);
    p : IN STD_LOGIC_VECTOR (24 downto 0);
    p0i : IN STD_LOGIC_VECTOR (30 downto 0);
    R2 : IN STD_LOGIC_VECTOR (30 downto 0);
    Rx : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of solve_NTRU_zint_mod_small_signed_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv25_1FFFFFF : STD_LOGIC_VECTOR (24 downto 0) := "1111111111111111111111111";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv10_3FC : STD_LOGIC_VECTOR (9 downto 0) := "1111111100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p0i_cast_fu_153_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p0i_cast_reg_466 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast_cast_cast_cast_fu_161_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast_cast_cast_cast_reg_471 : STD_LOGIC_VECTOR (31 downto 0);
    signal R2_cast_fu_165_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal R2_cast_reg_478 : STD_LOGIC_VECTOR (31 downto 0);
    signal u_fu_186_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal u_reg_483 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal x_4_modp_montymul_fu_141_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal x_4_reg_489 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_7_fu_303_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_7_reg_499 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln1597_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_4_modp_montymul_fu_141_ap_ready : STD_LOGIC;
    signal zext_ln1601_fu_219_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1621_1_fu_355_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_fu_76 : STD_LOGIC_VECTOR (31 downto 0);
    signal u_22_fu_80 : STD_LOGIC_VECTOR (8 downto 0);
    signal dlen_cast1_fu_149_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_cast_cast_cast_fu_157_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_cast_cast_cast_fu_157_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal shl_ln_fu_192_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln1601_fu_200_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln1601_fu_204_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal lshr_ln_fu_209_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal w_fu_224_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_229_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1602_fu_237_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal and_ln1602_fu_245_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal and_ln1602_fu_245_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln1598_fu_250_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln1598_fu_254_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln685_fu_262_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_5_fu_258_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln685_3_fu_268_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_274_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln685_fu_282_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal and_ln685_fu_290_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal and_ln685_fu_290_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln685_fu_295_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln685_fu_299_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln11_fu_323_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1621_fu_330_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1621_fu_336_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln1621_1_fu_340_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal lshr_ln1621_1_fu_345_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal trunc_ln_fu_360_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln1621_2_fu_370_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sub_ln1621_fu_374_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln1621_fu_380_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln1621_fu_384_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln697_fu_389_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_394_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln697_fu_402_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal and_ln697_fu_410_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal and_ln697_fu_410_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln697_fu_415_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln697_fu_419_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal z_fu_423_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component solve_NTRU_modp_montymul IS
    port (
        ap_ready : OUT STD_LOGIC;
        a : IN STD_LOGIC_VECTOR (31 downto 0);
        b : IN STD_LOGIC_VECTOR (31 downto 0);
        p : IN STD_LOGIC_VECTOR (31 downto 0);
        p0i : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    x_4_modp_montymul_fu_141 : component solve_NTRU_modp_montymul
    port map (
        ap_ready => x_4_modp_montymul_fu_141_ap_ready,
        a => x_fu_76,
        b => R2_cast_reg_478,
        p => p_cast_cast_cast_cast_reg_471,
        p0i => p0i_cast_reg_466,
        ap_return => x_4_modp_montymul_fu_141_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_return_preg <= z_fu_423_p2;
                end if; 
            end if;
        end if;
    end process;


    u_22_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                u_22_fu_80 <= dlen_cast1_fu_149_p1;
            elsif (((icmp_ln1597_fu_309_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                u_22_fu_80 <= u_reg_483;
            end if; 
        end if;
    end process;

    x_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                x_fu_76 <= ap_const_lv32_0;
            elsif (((icmp_ln1597_fu_309_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                x_fu_76 <= x_7_fu_303_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    R2_cast_reg_478(30 downto 0) <= R2_cast_fu_165_p1(30 downto 0);
                    p0i_cast_reg_466(30 downto 0) <= p0i_cast_fu_153_p1(30 downto 0);
                    p_cast_cast_cast_cast_reg_471(30 downto 0) <= p_cast_cast_cast_cast_fu_161_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                u_reg_483 <= u_fu_186_p2;
                x_4_reg_489 <= x_4_modp_montymul_fu_141_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                x_7_reg_499 <= x_7_fu_303_p2;
            end if;
        end if;
    end process;
    p0i_cast_reg_466(31) <= '0';
    p_cast_cast_cast_cast_reg_471(31) <= '0';
    R2_cast_reg_478(31) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln1597_fu_309_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln1597_fu_309_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    R2_cast_fu_165_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(R2),32));
    add_ln1601_fu_204_p2 <= std_logic_vector(signed(sext_ln1601_fu_200_p1) + signed(d));
    add_ln1621_1_fu_340_p2 <= std_logic_vector(unsigned(zext_ln1621_fu_336_p1) + unsigned(d));
    add_ln1621_fu_330_p2 <= std_logic_vector(unsigned(shl_ln11_fu_323_p3) + unsigned(ap_const_lv10_3FC));
    add_ln685_3_fu_268_p2 <= std_logic_vector(unsigned(add_ln685_fu_262_p2) + unsigned(w_5_fu_258_p2));
    add_ln685_fu_262_p2 <= std_logic_vector(unsigned(w_fu_224_p2) + unsigned(zext_ln1598_fu_254_p1));
    and_ln1602_fu_245_p1 <= p;
    and_ln1602_fu_245_p2 <= (select_ln1602_fu_237_p3 and and_ln1602_fu_245_p1);
    and_ln1621_fu_384_p2 <= (sext_ln1621_fu_380_p1 and Rx);
    and_ln685_fu_290_p1 <= p;
    and_ln685_fu_290_p2 <= (select_ln685_fu_282_p3 and and_ln685_fu_290_p1);
    and_ln697_fu_410_p1 <= p;
    and_ln697_fu_410_p2 <= (select_ln697_fu_402_p3 and and_ln697_fu_410_p1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state4, z_fu_423_p2, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_return <= z_fu_423_p2;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    dlen_cast1_fu_149_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dlen),9));
    icmp_ln1597_fu_309_p2 <= "1" when (u_reg_483 = ap_const_lv9_0) else "0";
    lshr_ln1621_1_fu_345_p4 <= add_ln1621_1_fu_340_p2(13 downto 2);
    lshr_ln_fu_209_p4 <= add_ln1601_fu_204_p2(13 downto 2);
    p0i_cast_fu_153_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p0i),32));
    p_cast_cast_cast_cast_fu_161_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_cast_cast_cast_fu_157_p1),32));
    p_cast_cast_cast_fu_157_p0 <= p;
        p_cast_cast_cast_fu_157_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_cast_cast_cast_fu_157_p0),31));

    select_ln1602_fu_237_p3 <= 
        ap_const_lv25_1FFFFFF when (tmp_fu_229_p3(0) = '1') else 
        ap_const_lv25_0;
    select_ln685_fu_282_p3 <= 
        ap_const_lv25_1FFFFFF when (tmp_9_fu_274_p3(0) = '1') else 
        ap_const_lv25_0;
    select_ln697_fu_402_p3 <= 
        ap_const_lv25_1FFFFFF when (tmp_10_fu_394_p3(0) = '1') else 
        ap_const_lv25_0;
        sext_ln1598_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(and_ln1602_fu_245_p2),31));

        sext_ln1601_fu_200_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_192_p3),14));

        sext_ln1621_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1621_fu_374_p2),32));

        sext_ln685_fu_295_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(and_ln685_fu_290_p2),31));

        sext_ln697_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(and_ln697_fu_410_p2),31));

    shl_ln11_fu_323_p3 <= (dlen & ap_const_lv2_0);
    shl_ln_fu_192_p3 <= (u_fu_186_p2 & ap_const_lv2_0);
    sub_ln1621_fu_374_p2 <= std_logic_vector(unsigned(ap_const_lv3_0) - unsigned(zext_ln1621_2_fu_370_p1));
    sub_ln697_fu_389_p2 <= std_logic_vector(unsigned(x_7_reg_499) - unsigned(and_ln1621_fu_384_p2));
    tmp_10_fu_394_p3 <= sub_ln697_fu_389_p2(31 downto 31);
    tmp_9_fu_274_p3 <= add_ln685_3_fu_268_p2(31 downto 31);
    tmp_fu_229_p3 <= w_fu_224_p2(31 downto 31);
    trunc_ln_fu_360_p4 <= vla1_q0(31 downto 30);
    u_fu_186_p2 <= std_logic_vector(unsigned(u_22_fu_80) + unsigned(ap_const_lv9_1FF));

    vla1_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, zext_ln1601_fu_219_p1, zext_ln1621_1_fu_355_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            vla1_address0 <= zext_ln1621_1_fu_355_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            vla1_address0 <= zext_ln1601_fu_219_p1(12 - 1 downto 0);
        else 
            vla1_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    vla1_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            vla1_ce0 <= ap_const_logic_1;
        else 
            vla1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    w_5_fu_258_p2 <= std_logic_vector(unsigned(x_4_reg_489) - unsigned(p_cast_cast_cast_cast_reg_471));
    w_fu_224_p2 <= std_logic_vector(unsigned(vla1_q0) - unsigned(p_cast_cast_cast_cast_reg_471));
    x_7_fu_303_p2 <= std_logic_vector(unsigned(zext_ln685_fu_299_p1) + unsigned(add_ln685_3_fu_268_p2));
    z_fu_423_p2 <= std_logic_vector(unsigned(zext_ln697_fu_419_p1) + unsigned(sub_ln697_fu_389_p2));
    zext_ln1598_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1598_fu_250_p1),32));
    zext_ln1601_fu_219_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_209_p4),64));
    zext_ln1621_1_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1621_1_fu_345_p4),64));
    zext_ln1621_2_fu_370_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln_fu_360_p4),3));
    zext_ln1621_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1621_fu_330_p2),14));
    zext_ln685_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln685_fu_295_p1),32));
    zext_ln697_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln697_fu_415_p1),32));
end behav;
