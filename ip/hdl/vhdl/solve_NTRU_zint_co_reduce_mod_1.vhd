-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity solve_NTRU_zint_co_reduce_mod_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    vla1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    vla1_ce0 : OUT STD_LOGIC;
    vla1_we0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    vla1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    vla1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    vla1_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    vla1_ce1 : OUT STD_LOGIC;
    vla1_we1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    vla1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    vla1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    a : IN STD_LOGIC_VECTOR (7 downto 0);
    b : IN STD_LOGIC_VECTOR (11 downto 0);
    m : IN STD_LOGIC_VECTOR (10 downto 0);
    m0i : IN STD_LOGIC_VECTOR (30 downto 0);
    xa : IN STD_LOGIC_VECTOR (63 downto 0);
    xb : IN STD_LOGIC_VECTOR (63 downto 0);
    ya : IN STD_LOGIC_VECTOR (63 downto 0);
    yb : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of solve_NTRU_zint_co_reduce_mod_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv33_0 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv7_6A : STD_LOGIC_VECTOR (6 downto 0) := "1101010";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv10_1A4 : STD_LOGIC_VECTOR (9 downto 0) := "0110100100";
    constant ap_const_lv9_1FC : STD_LOGIC_VECTOR (8 downto 0) := "111111100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv12_1A4 : STD_LOGIC_VECTOR (11 downto 0) := "000110100100";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_7FFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "01111111111111111111111111111111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal a_cast_cast_cast_cast_fu_427_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal a_cast_cast_cast_cast_reg_1477 : STD_LOGIC_VECTOR (9 downto 0);
    signal fa_cast_fu_503_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal fa_cast_reg_1486 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln1917_fu_507_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln1917_reg_1491 : STD_LOGIC_VECTOR (62 downto 0);
    signal u_26_fu_520_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal u_26_reg_1499 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal shl_ln_fu_526_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln_reg_1504 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln1917_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1927_fu_558_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1927_reg_1516 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal mul_ln1923_fu_624_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln1923_reg_1532 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln1925_fu_649_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln1925_reg_1542 : STD_LOGIC_VECTOR (63 downto 0);
    signal za_fu_699_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal za_reg_1547 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zb_fu_742_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zb_reg_1552 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln1928_fu_759_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1928_reg_1557 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1929_1_fu_788_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln1929_1_reg_1562 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln1872_fu_881_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cc_fu_954_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1864_fu_962_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1864_reg_1592 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1864_1_fu_982_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1864_1_reg_1597 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal vla1_addr_22_reg_1610 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal icmp_ln1888_fu_1022_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal icmp_ln1872_1_fu_1146_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cc_9_fu_1219_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1864_2_fu_1227_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1864_2_reg_1658 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1864_3_fu_1247_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1864_3_reg_1663 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal vla1_addr_26_reg_1676 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal icmp_ln1888_1_fu_1287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal cc_7_reg_325 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal cc_8_reg_337 : STD_LOGIC_VECTOR (0 downto 0);
    signal cc_10_reg_347 : STD_LOGIC_VECTOR (0 downto 0);
    signal cc_11_reg_359 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln1915_fu_389_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1915_1_fu_404_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1921_3_fu_553_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1934_fu_584_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1922_fu_615_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1924_fu_644_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1928_3_fu_783_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1929_1_fu_816_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln1935_fu_873_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1873_2_fu_924_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1873_3_fu_944_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1891_2_fu_1065_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1892_fu_1085_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1873_6_fu_1189_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1873_7_fu_1209_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1891_5_fu_1330_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1892_1_fu_1350_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal u_01_fu_108 : STD_LOGIC_VECTOR (6 downto 0);
    signal cca_fu_112 : STD_LOGIC_VECTOR (32 downto 0);
    signal ccb_fu_116 : STD_LOGIC_VECTOR (32 downto 0);
    signal u_fu_120 : STD_LOGIC_VECTOR (6 downto 0);
    signal u_25_fu_887_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal u_14_fu_124 : STD_LOGIC_VECTOR (6 downto 0);
    signal u_28_fu_1028_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal u_16_fu_128 : STD_LOGIC_VECTOR (6 downto 0);
    signal u_30_fu_1152_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal u_18_fu_132 : STD_LOGIC_VECTOR (6 downto 0);
    signal u_32_fu_1293_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln1934_fu_564_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1928_fu_754_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1929_fu_797_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1935_fu_853_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1894_fu_1130_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1894_1_fu_1390_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1915_2_fu_375_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1915_2_fu_375_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln1915_fu_385_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal lshr_ln1915_1_fu_394_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal a_cast_cast_cast_fu_424_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal a_cast_cast_cast_fu_424_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln1915_fu_431_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1915_1_fu_435_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln1915_fu_439_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln1915_3_fu_445_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1915_4_fu_449_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln1915_1_fu_453_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln1915_1_fu_453_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln1915_fu_439_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal fa_fu_465_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln1916_fu_471_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln1916_fu_475_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln1916_1_fu_481_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln1916_1_fu_485_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln1916_1_fu_485_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln1916_fu_475_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal fb_fu_497_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal fa_fu_465_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal fb_fu_497_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln1921_2_fu_534_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1921_fu_538_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal lshr_ln2_fu_543_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1934_fu_569_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal lshr_ln_fu_574_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1921_1_fu_597_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1922_fu_600_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal lshr_ln3_fu_605_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln1923_fu_624_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1923_fu_620_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1921_fu_594_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1924_fu_629_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal lshr_ln4_fu_634_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln1925_fu_649_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1923_1_fu_658_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1923_1_fu_654_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln1924_fu_667_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1924_1_fu_663_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal mul_ln1924_fu_667_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln1924_fu_667_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal sext_ln1917_fu_676_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln1917_fu_676_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln1923_1_fu_658_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1924_2_fu_672_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln1924_1_fu_680_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln1924_2_fu_686_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln1925_1_fu_705_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1926_fu_710_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1926_fu_710_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln1926_fu_710_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal sext_ln1917_1_fu_719_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln1917_1_fu_719_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln1925_1_fu_705_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1926_fu_715_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln1926_fu_723_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln1926_1_fu_729_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1924_1_fu_695_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln1924_fu_691_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln1928_2_fu_748_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln1928_2_fu_764_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1928_1_fu_768_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal lshr_ln5_fu_773_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1926_1_fu_738_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln1926_fu_734_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln1928_1_fu_794_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1929_fu_801_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal lshr_ln6_fu_806_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1935_fu_858_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal lshr_ln1_fu_863_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln12_fu_893_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1873_1_fu_905_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1873_fu_909_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal lshr_ln7_fu_914_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1873_fu_901_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1873_1_fu_929_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal lshr_ln1873_1_fu_934_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal xor_ln1886_fu_970_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ym_fu_976_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln1872_fu_995_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1873_fu_999_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1873_1_fu_1005_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln13_fu_1034_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1891_1_fu_1046_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1891_fu_1050_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal lshr_ln8_fu_1055_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1891_fu_1042_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1892_fu_1070_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal lshr_ln9_fu_1075_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal xor_ln1892_fu_1100_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mw_fu_1105_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1893_fu_1110_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1888_fu_1116_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal aw_2_fu_1120_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1889_fu_1126_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal shl_ln1873_1_fu_1158_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1873_5_fu_1170_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1873_2_fu_1174_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal lshr_ln1873_3_fu_1179_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1873_4_fu_1166_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1873_3_fu_1194_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal lshr_ln1873_4_fu_1199_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal xor_ln1886_1_fu_1235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ym_1_fu_1241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln1872_1_fu_1260_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1873_2_fu_1264_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1873_3_fu_1270_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln1891_1_fu_1299_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1891_4_fu_1311_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1891_1_fu_1315_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal lshr_ln1891_1_fu_1320_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1891_3_fu_1307_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1892_1_fu_1335_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal lshr_ln1892_1_fu_1340_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal xor_ln1892_1_fu_1360_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mw_1_fu_1365_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1893_1_fu_1370_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1888_1_fu_1376_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal aw_4_fu_1380_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1889_1_fu_1386_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component solve_NTRU_mul_31s_31s_31_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (30 downto 0);
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component solve_NTRU_mul_32ns_64s_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component solve_NTRU_mul_32ns_31ns_63_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (30 downto 0);
        dout : OUT STD_LOGIC_VECTOR (62 downto 0) );
    end component;



begin
    mul_31s_31s_31_1_1_U152 : component solve_NTRU_mul_31s_31s_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 31,
        dout_WIDTH => 31)
    port map (
        din0 => trunc_ln1915_1_fu_435_p1,
        din1 => mul_ln1915_fu_439_p1,
        dout => mul_ln1915_fu_439_p2);

    mul_31s_31s_31_1_1_U153 : component solve_NTRU_mul_31s_31s_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 31,
        dout_WIDTH => 31)
    port map (
        din0 => trunc_ln1915_4_fu_449_p1,
        din1 => mul_ln1915_1_fu_453_p1,
        dout => mul_ln1915_1_fu_453_p2);

    mul_31s_31s_31_1_1_U154 : component solve_NTRU_mul_31s_31s_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 31,
        dout_WIDTH => 31)
    port map (
        din0 => fa_fu_465_p0,
        din1 => m0i,
        dout => fa_fu_465_p2);

    mul_31s_31s_31_1_1_U155 : component solve_NTRU_mul_31s_31s_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 31,
        dout_WIDTH => 31)
    port map (
        din0 => trunc_ln1915_1_fu_435_p1,
        din1 => mul_ln1916_fu_475_p1,
        dout => mul_ln1916_fu_475_p2);

    mul_31s_31s_31_1_1_U156 : component solve_NTRU_mul_31s_31s_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 31,
        dout_WIDTH => 31)
    port map (
        din0 => trunc_ln1915_4_fu_449_p1,
        din1 => mul_ln1916_1_fu_485_p1,
        dout => mul_ln1916_1_fu_485_p2);

    mul_31s_31s_31_1_1_U157 : component solve_NTRU_mul_31s_31s_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 31,
        dout_WIDTH => 31)
    port map (
        din0 => fb_fu_497_p0,
        din1 => m0i,
        dout => fb_fu_497_p2);

    mul_32ns_64s_64_1_1_U158 : component solve_NTRU_mul_32ns_64s_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln1923_fu_624_p0,
        din1 => xa,
        dout => mul_ln1923_fu_624_p2);

    mul_32ns_64s_64_1_1_U159 : component solve_NTRU_mul_32ns_64s_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln1925_fu_649_p0,
        din1 => ya,
        dout => mul_ln1925_fu_649_p2);

    mul_32ns_64s_64_1_1_U160 : component solve_NTRU_mul_32ns_64s_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln1923_1_fu_658_p0,
        din1 => xb,
        dout => mul_ln1923_1_fu_658_p2);

    mul_32ns_31ns_63_1_1_U161 : component solve_NTRU_mul_32ns_31ns_63_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 31,
        dout_WIDTH => 63)
    port map (
        din0 => mul_ln1924_fu_667_p0,
        din1 => mul_ln1924_fu_667_p1,
        dout => mul_ln1924_fu_667_p2);

    mul_32ns_64s_64_1_1_U162 : component solve_NTRU_mul_32ns_64s_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln1925_1_fu_705_p0,
        din1 => yb,
        dout => mul_ln1925_1_fu_705_p2);

    mul_32ns_31ns_63_1_1_U163 : component solve_NTRU_mul_32ns_31ns_63_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 31,
        dout_WIDTH => 63)
    port map (
        din0 => mul_ln1926_fu_710_p0,
        din1 => mul_ln1926_fu_710_p1,
        dout => mul_ln1926_fu_710_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    cc_10_reg_347_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln1888_fu_1022_p2 = ap_const_lv1_1))) then 
                cc_10_reg_347 <= ap_const_lv1_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                cc_10_reg_347 <= sub_ln1873_3_fu_1270_p2(31 downto 31);
            end if; 
        end if;
    end process;

    cc_11_reg_359_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                cc_11_reg_359 <= aw_4_fu_1380_p2(31 downto 31);
            elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln1872_1_fu_1146_p2 = ap_const_lv1_1))) then 
                cc_11_reg_359 <= ccb_fu_116(32 downto 32);
            end if; 
        end if;
    end process;

    cc_7_reg_325_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                cc_7_reg_325 <= sub_ln1873_1_fu_1005_p2(31 downto 31);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                cc_7_reg_325 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    cc_8_reg_337_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                cc_8_reg_337 <= aw_2_fu_1120_p2(31 downto 31);
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln1872_fu_881_p2 = ap_const_lv1_1))) then 
                cc_8_reg_337 <= cca_fu_112(32 downto 32);
            end if; 
        end if;
    end process;

    cca_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                cca_fu_112 <= ap_const_lv33_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                cca_fu_112 <= za_reg_1547(63 downto 31);
            end if; 
        end if;
    end process;

    ccb_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                ccb_fu_116 <= ap_const_lv33_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                ccb_fu_116 <= zb_reg_1552(63 downto 31);
            end if; 
        end if;
    end process;

    u_01_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                u_01_fu_108 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                u_01_fu_108 <= u_26_reg_1499;
            end if; 
        end if;
    end process;

    u_14_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln1872_fu_881_p2 = ap_const_lv1_1))) then 
                u_14_fu_124 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln1888_fu_1022_p2 = ap_const_lv1_0))) then 
                u_14_fu_124 <= u_28_fu_1028_p2;
            end if; 
        end if;
    end process;

    u_16_fu_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln1888_fu_1022_p2 = ap_const_lv1_1))) then 
                u_16_fu_128 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln1872_1_fu_1146_p2 = ap_const_lv1_0))) then 
                u_16_fu_128 <= u_30_fu_1152_p2;
            end if; 
        end if;
    end process;

    u_18_fu_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln1872_1_fu_1146_p2 = ap_const_lv1_1))) then 
                u_18_fu_132 <= ap_const_lv7_0;
            elsif (((icmp_ln1888_1_fu_1287_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                u_18_fu_132 <= u_32_fu_1293_p2;
            end if; 
        end if;
    end process;

    u_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1917_fu_514_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                u_fu_120 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln1872_fu_881_p2 = ap_const_lv1_0))) then 
                u_fu_120 <= u_25_fu_887_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    a_cast_cast_cast_cast_reg_1477(8 downto 0) <= a_cast_cast_cast_cast_fu_427_p1(8 downto 0);
                    fa_cast_reg_1486(30 downto 0) <= fa_cast_fu_503_p1(30 downto 0);
                    zext_ln1917_reg_1491(30 downto 0) <= zext_ln1917_fu_507_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln1927_reg_1516 = ap_const_lv1_0))) then
                    add_ln1928_reg_1557(8 downto 2) <= add_ln1928_fu_759_p2(8 downto 2);
                add_ln1929_1_reg_1562 <= add_ln1929_1_fu_788_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1917_fu_514_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                icmp_ln1927_reg_1516 <= icmp_ln1927_fu_558_p2;
                    shl_ln_reg_1504(8 downto 2) <= shl_ln_fu_526_p3(8 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                mul_ln1923_reg_1532 <= mul_ln1923_fu_624_p2;
                mul_ln1925_reg_1542 <= mul_ln1925_fu_649_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln1872_fu_881_p2 = ap_const_lv1_1))) then
                select_ln1864_1_reg_1597 <= select_ln1864_1_fu_982_p3;
                    select_ln1864_reg_1592(30 downto 0) <= select_ln1864_fu_962_p3(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln1872_1_fu_1146_p2 = ap_const_lv1_1))) then
                    select_ln1864_2_reg_1658(30 downto 0) <= select_ln1864_2_fu_1227_p3(30 downto 0);
                select_ln1864_3_reg_1663 <= select_ln1864_3_fu_1247_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                u_26_reg_1499 <= u_26_fu_520_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln1888_fu_1022_p2 = ap_const_lv1_0))) then
                    vla1_addr_22_reg_1610(7 downto 0) <= zext_ln1891_2_fu_1065_p1(12 - 1 downto 0)(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1888_1_fu_1287_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    vla1_addr_26_reg_1676(9 downto 0) <= zext_ln1891_5_fu_1330_p1(12 - 1 downto 0)(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                za_reg_1547 <= za_fu_699_p2;
                zb_reg_1552 <= zb_fu_742_p2;
            end if;
        end if;
    end process;
    a_cast_cast_cast_cast_reg_1477(9) <= '0';
    fa_cast_reg_1486(62 downto 31) <= "00000000000000000000000000000000";
    zext_ln1917_reg_1491(62 downto 31) <= "00000000000000000000000000000000";
    shl_ln_reg_1504(1 downto 0) <= "00";
    add_ln1928_reg_1557(1 downto 0) <= "00";
    select_ln1864_reg_1592(31) <= '0';
    vla1_addr_22_reg_1610(11 downto 8) <= "0000";
    select_ln1864_2_reg_1658(31) <= '0';
    vla1_addr_26_reg_1676(11 downto 10) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln1917_fu_514_p2, ap_CS_fsm_state8, icmp_ln1872_fu_881_p2, ap_CS_fsm_state10, icmp_ln1888_fu_1022_p2, ap_CS_fsm_state12, icmp_ln1872_1_fu_1146_p2, ap_CS_fsm_state14, icmp_ln1888_1_fu_1287_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln1917_fu_514_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln1872_fu_881_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln1888_fu_1022_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln1872_1_fu_1146_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state14 => 
                if (((icmp_ln1888_1_fu_1287_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;
    a_cast_cast_cast_cast_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_cast_cast_cast_fu_424_p1),10));
    a_cast_cast_cast_fu_424_p0 <= a;
        a_cast_cast_cast_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_cast_cast_cast_fu_424_p0),9));

    add_ln1873_1_fu_929_p2 <= std_logic_vector(unsigned(zext_ln1873_fu_901_p1) + unsigned(m));
    add_ln1873_2_fu_1174_p2 <= std_logic_vector(unsigned(zext_ln1873_5_fu_1170_p1) + unsigned(b));
    add_ln1873_3_fu_1194_p2 <= std_logic_vector(unsigned(zext_ln1873_4_fu_1166_p1) + unsigned(m));
    add_ln1873_fu_909_p2 <= std_logic_vector(unsigned(zext_ln1873_1_fu_905_p1) + unsigned(a_cast_cast_cast_cast_reg_1477));
    add_ln1891_1_fu_1315_p2 <= std_logic_vector(unsigned(zext_ln1891_4_fu_1311_p1) + unsigned(b));
    add_ln1891_fu_1050_p2 <= std_logic_vector(unsigned(zext_ln1891_1_fu_1046_p1) + unsigned(a_cast_cast_cast_cast_reg_1477));
    add_ln1892_1_fu_1335_p2 <= std_logic_vector(unsigned(zext_ln1891_3_fu_1307_p1) + unsigned(m));
    add_ln1892_fu_1070_p2 <= std_logic_vector(unsigned(zext_ln1891_fu_1042_p1) + unsigned(m));
    add_ln1921_fu_538_p2 <= std_logic_vector(unsigned(zext_ln1921_2_fu_534_p1) + unsigned(a_cast_cast_cast_cast_reg_1477));
    add_ln1922_fu_600_p2 <= std_logic_vector(unsigned(zext_ln1921_1_fu_597_p1) + unsigned(b));
    add_ln1924_1_fu_680_p2 <= std_logic_vector(signed(sext_ln1917_fu_676_p1) + signed(mul_ln1923_1_fu_658_p2));
    add_ln1924_2_fu_686_p2 <= std_logic_vector(unsigned(mul_ln1923_reg_1532) + unsigned(zext_ln1924_2_fu_672_p1));
    add_ln1924_fu_629_p2 <= std_logic_vector(unsigned(zext_ln1921_fu_594_p1) + unsigned(m));
    add_ln1926_1_fu_729_p2 <= std_logic_vector(unsigned(mul_ln1925_reg_1542) + unsigned(zext_ln1926_fu_715_p1));
    add_ln1926_fu_723_p2 <= std_logic_vector(signed(sext_ln1917_1_fu_719_p1) + signed(mul_ln1925_1_fu_705_p2));
    add_ln1928_1_fu_768_p2 <= std_logic_vector(unsigned(zext_ln1928_2_fu_764_p1) + unsigned(a_cast_cast_cast_cast_reg_1477));
    add_ln1928_2_fu_748_p2 <= std_logic_vector(unsigned(trunc_ln1924_1_fu_695_p1) + unsigned(trunc_ln1924_fu_691_p1));
    add_ln1928_fu_759_p2 <= std_logic_vector(unsigned(shl_ln_reg_1504) + unsigned(ap_const_lv9_1FC));
    add_ln1929_1_fu_788_p2 <= std_logic_vector(unsigned(trunc_ln1926_1_fu_738_p1) + unsigned(trunc_ln1926_fu_734_p1));
    add_ln1929_fu_801_p2 <= std_logic_vector(unsigned(zext_ln1928_1_fu_794_p1) + unsigned(b));
    add_ln1934_fu_569_p2 <= std_logic_vector(unsigned(a_cast_cast_cast_cast_reg_1477) + unsigned(ap_const_lv10_1A4));
    add_ln1935_fu_858_p2 <= std_logic_vector(unsigned(b) + unsigned(ap_const_lv12_1A4));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state14, icmp_ln1888_1_fu_1287_p2)
    begin
        if ((((icmp_ln1888_1_fu_1287_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state14, icmp_ln1888_1_fu_1287_p2)
    begin
        if (((icmp_ln1888_1_fu_1287_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    aw_2_fu_1120_p2 <= std_logic_vector(unsigned(sub_ln1893_fu_1110_p2) - unsigned(zext_ln1888_fu_1116_p1));
    aw_4_fu_1380_p2 <= std_logic_vector(unsigned(sub_ln1893_1_fu_1370_p2) - unsigned(zext_ln1888_1_fu_1376_p1));
    cc_9_fu_1219_p3 <= ccb_fu_116(32 downto 32);
    cc_fu_954_p3 <= cca_fu_112(32 downto 32);
    fa_cast_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fa_fu_465_p2),63));
    fa_fu_465_p0 <= std_logic_vector(unsigned(mul_ln1915_1_fu_453_p2) + unsigned(mul_ln1915_fu_439_p2));
    fb_fu_497_p0 <= std_logic_vector(unsigned(mul_ln1916_1_fu_485_p2) + unsigned(mul_ln1916_fu_475_p2));
    icmp_ln1872_1_fu_1146_p2 <= "1" when (u_16_fu_128 = ap_const_lv7_6A) else "0";
    icmp_ln1872_fu_881_p2 <= "1" when (u_fu_120 = ap_const_lv7_6A) else "0";
    icmp_ln1888_1_fu_1287_p2 <= "1" when (u_18_fu_132 = ap_const_lv7_6A) else "0";
    icmp_ln1888_fu_1022_p2 <= "1" when (u_14_fu_124 = ap_const_lv7_6A) else "0";
    icmp_ln1917_fu_514_p2 <= "1" when (u_01_fu_108 = ap_const_lv7_6A) else "0";
    icmp_ln1927_fu_558_p2 <= "1" when (u_01_fu_108 = ap_const_lv7_0) else "0";
    lshr_ln1873_1_fu_934_p4 <= add_ln1873_1_fu_929_p2(10 downto 2);
    lshr_ln1873_3_fu_1179_p4 <= add_ln1873_2_fu_1174_p2(11 downto 2);
    lshr_ln1873_4_fu_1199_p4 <= add_ln1873_3_fu_1194_p2(10 downto 2);
    lshr_ln1891_1_fu_1320_p4 <= add_ln1891_1_fu_1315_p2(11 downto 2);
    lshr_ln1892_1_fu_1340_p4 <= add_ln1892_1_fu_1335_p2(10 downto 2);
    lshr_ln1915_1_fu_394_p4 <= b(11 downto 2);
    lshr_ln1_fu_863_p4 <= add_ln1935_fu_858_p2(11 downto 2);
    lshr_ln2_fu_543_p4 <= add_ln1921_fu_538_p2(9 downto 2);
    lshr_ln3_fu_605_p4 <= add_ln1922_fu_600_p2(11 downto 2);
    lshr_ln4_fu_634_p4 <= add_ln1924_fu_629_p2(10 downto 2);
    lshr_ln5_fu_773_p4 <= add_ln1928_1_fu_768_p2(9 downto 2);
    lshr_ln6_fu_806_p4 <= add_ln1929_fu_801_p2(11 downto 2);
    lshr_ln7_fu_914_p4 <= add_ln1873_fu_909_p2(9 downto 2);
    lshr_ln8_fu_1055_p4 <= add_ln1891_fu_1050_p2(9 downto 2);
    lshr_ln9_fu_1075_p4 <= add_ln1892_fu_1070_p2(10 downto 2);
    lshr_ln_fu_574_p4 <= add_ln1934_fu_569_p2(9 downto 2);
    mul_ln1915_1_fu_453_p1 <= trunc_ln1915_3_fu_445_p0(31 - 1 downto 0);
    mul_ln1915_fu_439_p1 <= trunc_ln1915_fu_431_p0(31 - 1 downto 0);
    mul_ln1916_1_fu_485_p1 <= trunc_ln1916_1_fu_481_p0(31 - 1 downto 0);
    mul_ln1916_fu_475_p1 <= trunc_ln1916_fu_471_p0(31 - 1 downto 0);
    mul_ln1923_1_fu_658_p0 <= zext_ln1923_1_fu_654_p1(32 - 1 downto 0);
    mul_ln1923_fu_624_p0 <= zext_ln1923_fu_620_p1(32 - 1 downto 0);
    mul_ln1924_fu_667_p0 <= zext_ln1924_1_fu_663_p1(32 - 1 downto 0);
    mul_ln1924_fu_667_p1 <= fa_cast_reg_1486(31 - 1 downto 0);
    mul_ln1925_1_fu_705_p0 <= zext_ln1923_1_fu_654_p1(32 - 1 downto 0);
    mul_ln1925_fu_649_p0 <= zext_ln1923_fu_620_p1(32 - 1 downto 0);
    mul_ln1926_fu_710_p0 <= zext_ln1924_1_fu_663_p1(32 - 1 downto 0);
    mul_ln1926_fu_710_p1 <= zext_ln1917_reg_1491(31 - 1 downto 0);
    mw_1_fu_1365_p2 <= (xor_ln1892_1_fu_1360_p2 and select_ln1864_3_reg_1663);
    mw_fu_1105_p2 <= (xor_ln1892_fu_1100_p2 and select_ln1864_1_reg_1597);
    select_ln1864_1_fu_982_p3 <= 
        ap_const_lv32_FFFFFFFF when (ym_fu_976_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln1864_2_fu_1227_p3 <= 
        ap_const_lv32_7FFFFFFF when (cc_9_fu_1219_p3(0) = '1') else 
        ap_const_lv32_0;
    select_ln1864_3_fu_1247_p3 <= 
        ap_const_lv32_FFFFFFFF when (ym_1_fu_1241_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln1864_fu_962_p3 <= 
        ap_const_lv32_7FFFFFFF when (cc_fu_954_p3(0) = '1') else 
        ap_const_lv32_0;
        sext_ln1915_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1915_2_fu_375_p4),7));

    sext_ln1917_1_fu_719_p0 <= ccb_fu_116;
        sext_ln1917_1_fu_719_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1917_1_fu_719_p0),64));

    sext_ln1917_fu_676_p0 <= cca_fu_112;
        sext_ln1917_fu_676_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1917_fu_676_p0),64));

    shl_ln12_fu_893_p3 <= (u_fu_120 & ap_const_lv2_0);
    shl_ln13_fu_1034_p3 <= (u_14_fu_124 & ap_const_lv2_0);
    shl_ln1873_1_fu_1158_p3 <= (u_16_fu_128 & ap_const_lv2_0);
    shl_ln1891_1_fu_1299_p3 <= (u_18_fu_132 & ap_const_lv2_0);
    shl_ln_fu_526_p3 <= (u_01_fu_108 & ap_const_lv2_0);
    sub_ln1873_1_fu_1005_p2 <= std_logic_vector(unsigned(sub_ln1873_fu_999_p2) - unsigned(vla1_q1));
    sub_ln1873_2_fu_1264_p2 <= std_logic_vector(unsigned(vla1_q1) - unsigned(zext_ln1872_1_fu_1260_p1));
    sub_ln1873_3_fu_1270_p2 <= std_logic_vector(unsigned(sub_ln1873_2_fu_1264_p2) - unsigned(vla1_q0));
    sub_ln1873_fu_999_p2 <= std_logic_vector(unsigned(vla1_q0) - unsigned(zext_ln1872_fu_995_p1));
    sub_ln1893_1_fu_1370_p2 <= std_logic_vector(unsigned(vla1_q1) - unsigned(mw_1_fu_1365_p2));
    sub_ln1893_fu_1110_p2 <= std_logic_vector(unsigned(vla1_q0) - unsigned(mw_fu_1105_p2));
    trunc_ln1889_1_fu_1386_p1 <= aw_4_fu_1380_p2(31 - 1 downto 0);
    trunc_ln1889_fu_1126_p1 <= aw_2_fu_1120_p2(31 - 1 downto 0);
    trunc_ln1915_1_fu_435_p1 <= vla1_q1(31 - 1 downto 0);
    trunc_ln1915_2_fu_375_p1 <= a;
    trunc_ln1915_2_fu_375_p4 <= trunc_ln1915_2_fu_375_p1(7 downto 2);
    trunc_ln1915_3_fu_445_p0 <= xb;
    trunc_ln1915_4_fu_449_p1 <= vla1_q0(31 - 1 downto 0);
    trunc_ln1915_fu_431_p0 <= xa;
    trunc_ln1916_1_fu_481_p0 <= yb;
    trunc_ln1916_fu_471_p0 <= ya;
    trunc_ln1924_1_fu_695_p1 <= add_ln1924_2_fu_686_p2(31 - 1 downto 0);
    trunc_ln1924_fu_691_p1 <= add_ln1924_1_fu_680_p2(31 - 1 downto 0);
    trunc_ln1926_1_fu_738_p1 <= add_ln1926_1_fu_729_p2(31 - 1 downto 0);
    trunc_ln1926_fu_734_p1 <= add_ln1926_fu_723_p2(31 - 1 downto 0);
    trunc_ln1934_fu_564_p1 <= cca_fu_112(32 - 1 downto 0);
    trunc_ln1935_fu_853_p1 <= ccb_fu_116(32 - 1 downto 0);
    u_25_fu_887_p2 <= std_logic_vector(unsigned(u_fu_120) + unsigned(ap_const_lv7_1));
    u_26_fu_520_p2 <= std_logic_vector(unsigned(u_01_fu_108) + unsigned(ap_const_lv7_1));
    u_28_fu_1028_p2 <= std_logic_vector(unsigned(u_14_fu_124) + unsigned(ap_const_lv7_1));
    u_30_fu_1152_p2 <= std_logic_vector(unsigned(u_16_fu_128) + unsigned(ap_const_lv7_1));
    u_32_fu_1293_p2 <= std_logic_vector(unsigned(u_18_fu_132) + unsigned(ap_const_lv7_1));

    vla1_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln1917_fu_514_p2, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, vla1_addr_26_reg_1676, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state7, zext_ln1915_1_fu_404_p1, zext_ln1921_3_fu_553_p1, zext_ln1934_fu_584_p1, zext_ln1922_fu_615_p1, zext_ln1935_fu_873_p1, zext_ln1873_2_fu_924_p1, zext_ln1891_2_fu_1065_p1, zext_ln1873_7_fu_1209_p1, zext_ln1892_1_fu_1350_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            vla1_address0 <= vla1_addr_26_reg_1676;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            vla1_address0 <= zext_ln1892_1_fu_1350_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            vla1_address0 <= zext_ln1873_7_fu_1209_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            vla1_address0 <= zext_ln1891_2_fu_1065_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            vla1_address0 <= zext_ln1873_2_fu_924_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            vla1_address0 <= zext_ln1935_fu_873_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            vla1_address0 <= zext_ln1922_fu_615_p1(12 - 1 downto 0);
        elsif (((icmp_ln1917_fu_514_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            vla1_address0 <= zext_ln1934_fu_584_p1(12 - 1 downto 0);
        elsif (((icmp_ln1917_fu_514_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            vla1_address0 <= zext_ln1921_3_fu_553_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            vla1_address0 <= zext_ln1915_1_fu_404_p1(12 - 1 downto 0);
        else 
            vla1_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    vla1_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state8, vla1_addr_22_reg_1610, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state14, zext_ln1915_fu_389_p1, zext_ln1924_fu_644_p1, zext_ln1928_3_fu_783_p1, zext_ln1929_1_fu_816_p1, ap_CS_fsm_state6, zext_ln1873_3_fu_944_p1, zext_ln1892_fu_1085_p1, zext_ln1873_6_fu_1189_p1, zext_ln1891_5_fu_1330_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            vla1_address1 <= zext_ln1891_5_fu_1330_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            vla1_address1 <= zext_ln1873_6_fu_1189_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            vla1_address1 <= vla1_addr_22_reg_1610;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            vla1_address1 <= zext_ln1892_fu_1085_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            vla1_address1 <= zext_ln1873_3_fu_944_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            vla1_address1 <= zext_ln1929_1_fu_816_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            vla1_address1 <= zext_ln1928_3_fu_783_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            vla1_address1 <= zext_ln1924_fu_644_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            vla1_address1 <= zext_ln1915_fu_389_p1(12 - 1 downto 0);
        else 
            vla1_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    vla1_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln1917_fu_514_p2, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((icmp_ln1917_fu_514_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln1917_fu_514_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            vla1_ce0 <= ap_const_logic_1;
        else 
            vla1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    vla1_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            vla1_ce1 <= ap_const_logic_1;
        else 
            vla1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    vla1_d0_assign_proc : process(ap_CS_fsm_state3, icmp_ln1917_fu_514_p2, ap_CS_fsm_state15, ap_CS_fsm_state7, trunc_ln1934_fu_564_p1, trunc_ln1935_fu_853_p1, zext_ln1894_1_fu_1390_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            vla1_d0 <= zext_ln1894_1_fu_1390_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            vla1_d0 <= trunc_ln1935_fu_853_p1;
        elsif (((icmp_ln1917_fu_514_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            vla1_d0 <= trunc_ln1934_fu_564_p1;
        else 
            vla1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    vla1_d1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state11, ap_CS_fsm_state6, zext_ln1928_fu_754_p1, zext_ln1929_fu_797_p1, zext_ln1894_fu_1130_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            vla1_d1 <= zext_ln1894_fu_1130_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            vla1_d1 <= zext_ln1929_fu_797_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            vla1_d1 <= zext_ln1928_fu_754_p1;
        else 
            vla1_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    vla1_we0_assign_proc : process(ap_CS_fsm_state3, icmp_ln1917_fu_514_p2, ap_CS_fsm_state15, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state15) or ((icmp_ln1917_fu_514_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            vla1_we0 <= ap_const_lv4_F;
        else 
            vla1_we0 <= ap_const_lv4_0;
        end if; 
    end process;


    vla1_we1_assign_proc : process(icmp_ln1927_reg_1516, ap_CS_fsm_state5, ap_CS_fsm_state11, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln1927_reg_1516 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln1927_reg_1516 = ap_const_lv1_0)))) then 
            vla1_we1 <= ap_const_lv4_F;
        else 
            vla1_we1 <= ap_const_lv4_0;
        end if; 
    end process;

    xor_ln1886_1_fu_1235_p2 <= (cc_10_reg_347 xor ap_const_lv1_1);
    xor_ln1886_fu_970_p2 <= (cc_7_reg_325 xor ap_const_lv1_1);
    xor_ln1892_1_fu_1360_p2 <= (vla1_q0 xor select_ln1864_2_reg_1658);
    xor_ln1892_fu_1100_p2 <= (vla1_q1 xor select_ln1864_reg_1592);
    ym_1_fu_1241_p2 <= (xor_ln1886_1_fu_1235_p2 or cc_9_fu_1219_p3);
    ym_fu_976_p2 <= (xor_ln1886_fu_970_p2 or cc_fu_954_p3);
    za_fu_699_p2 <= std_logic_vector(unsigned(add_ln1924_2_fu_686_p2) + unsigned(add_ln1924_1_fu_680_p2));
    zb_fu_742_p2 <= std_logic_vector(unsigned(add_ln1926_1_fu_729_p2) + unsigned(add_ln1926_fu_723_p2));
    zext_ln1872_1_fu_1260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cc_10_reg_347),32));
    zext_ln1872_fu_995_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cc_7_reg_325),32));
    zext_ln1873_1_fu_905_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln12_fu_893_p3),10));
    zext_ln1873_2_fu_924_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln7_fu_914_p4),64));
    zext_ln1873_3_fu_944_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1873_1_fu_934_p4),64));
    zext_ln1873_4_fu_1166_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1873_1_fu_1158_p3),11));
    zext_ln1873_5_fu_1170_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1873_1_fu_1158_p3),12));
    zext_ln1873_6_fu_1189_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1873_3_fu_1179_p4),64));
    zext_ln1873_7_fu_1209_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1873_4_fu_1199_p4),64));
    zext_ln1873_fu_901_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln12_fu_893_p3),11));
    zext_ln1888_1_fu_1376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cc_11_reg_359),32));
    zext_ln1888_fu_1116_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cc_8_reg_337),32));
    zext_ln1891_1_fu_1046_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln13_fu_1034_p3),10));
    zext_ln1891_2_fu_1065_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln8_fu_1055_p4),64));
    zext_ln1891_3_fu_1307_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1891_1_fu_1299_p3),11));
    zext_ln1891_4_fu_1311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1891_1_fu_1299_p3),12));
    zext_ln1891_5_fu_1330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1891_1_fu_1320_p4),64));
    zext_ln1891_fu_1042_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln13_fu_1034_p3),11));
    zext_ln1892_1_fu_1350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1892_1_fu_1340_p4),64));
    zext_ln1892_fu_1085_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln9_fu_1075_p4),64));
    zext_ln1894_1_fu_1390_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1889_1_fu_1386_p1),32));
    zext_ln1894_fu_1130_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1889_fu_1126_p1),32));
    zext_ln1915_1_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1915_1_fu_394_p4),64));
    zext_ln1915_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1915_fu_385_p1),64));
    zext_ln1917_fu_507_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fb_fu_497_p2),63));
    zext_ln1921_1_fu_597_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_reg_1504),12));
    zext_ln1921_2_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_526_p3),10));
    zext_ln1921_3_fu_553_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln2_fu_543_p4),64));
    zext_ln1921_fu_594_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_reg_1504),11));
    zext_ln1922_fu_615_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln3_fu_605_p4),64));
    zext_ln1923_1_fu_654_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(vla1_q0),64));
    zext_ln1923_fu_620_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(vla1_q0),64));
    zext_ln1924_1_fu_663_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(vla1_q1),63));
    zext_ln1924_2_fu_672_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln1924_fu_667_p2),64));
    zext_ln1924_fu_644_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln4_fu_634_p4),64));
    zext_ln1926_fu_715_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln1926_fu_710_p2),64));
    zext_ln1928_1_fu_794_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1928_reg_1557),12));
    zext_ln1928_2_fu_764_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1928_fu_759_p2),10));
    zext_ln1928_3_fu_783_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln5_fu_773_p4),64));
    zext_ln1928_fu_754_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1928_2_fu_748_p2),32));
    zext_ln1929_1_fu_816_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln6_fu_806_p4),64));
    zext_ln1929_fu_797_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1929_1_reg_1562),32));
    zext_ln1934_fu_584_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_574_p4),64));
    zext_ln1935_fu_873_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1_fu_863_p4),64));
end behav;
