-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity solve_NTRU_make_fg_80_82_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    vla1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    vla1_ce0 : OUT STD_LOGIC;
    vla1_we0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    vla1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    vla1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    vla1_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    vla1_ce1 : OUT STD_LOGIC;
    vla1_we1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    vla1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    vla1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    data : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem0_AWREADY : IN STD_LOGIC;
    m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_WVALID : OUT STD_LOGIC;
    m_axi_gmem0_WREADY : IN STD_LOGIC;
    m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_WLAST : OUT STD_LOGIC;
    m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem0_ARREADY : IN STD_LOGIC;
    m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RVALID : IN STD_LOGIC;
    m_axi_gmem0_RREADY : OUT STD_LOGIC;
    m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_RLAST : IN STD_LOGIC;
    m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BVALID : IN STD_LOGIC;
    m_axi_gmem0_BREADY : OUT STD_LOGIC;
    m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    f : IN STD_LOGIC_VECTOR (63 downto 0);
    g : IN STD_LOGIC_VECTOR (63 downto 0);
    depth : IN STD_LOGIC_VECTOR (31 downto 0);
    out_ntt : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of solve_NTRU_make_fg_80_82_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (22 downto 0) := "00000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (22 downto 0) := "00000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (22 downto 0) := "00000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (22 downto 0) := "00000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (22 downto 0) := "00000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (22 downto 0) := "00000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (22 downto 0) := "00001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (22 downto 0) := "00010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (22 downto 0) := "00100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (22 downto 0) := "01000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (22 downto 0) := "10000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_63FB001 : STD_LOGIC_VECTOR (31 downto 0) := "00000110001111111011000000000001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_647A5148 : STD_LOGIC_VECTOR (31 downto 0) := "01100100011110100101000101001000";
    constant ap_const_lv32_7FFFD801 : STD_LOGIC_VECTOR (31 downto 0) := "01111111111111111101100000000001";
    constant ap_const_lv32_79BFD7FF : STD_LOGIC_VECTOR (31 downto 0) := "01111001101111111101011111111111";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_27FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010011111111111";
    constant ap_const_lv6_1E : STD_LOGIC_VECTOR (5 downto 0) := "011110";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv14_800 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv32_7FFFD7FF : STD_LOGIC_VECTOR (31 downto 0) := "01111111111111111101011111111111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv14_1000 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_const_lv14_1800 : STD_LOGIC_VECTOR (13 downto 0) := "01100000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal REV10_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal REV10_ce0 : STD_LOGIC;
    signal REV10_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal gmem0_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal gmem0_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_modp_montymul_fu_289_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_323 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp_187_fu_669_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal empty_fu_329_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal empty_reg_896 : STD_LOGIC_VECTOR (13 downto 0);
    signal gt_fu_333_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal gt_reg_903 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln3086_fu_339_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln3086_reg_908 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln3086_fu_343_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln3086_reg_913 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln3087_fu_347_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln3087_reg_918 : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem0_addr_reg_926 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln3085_fu_363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln3086_2_fu_404_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln3086_2_reg_932 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln3086_4_fu_409_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln3086_4_reg_937 : STD_LOGIC_VECTOR (8 downto 0);
    signal gmem0_addr_26_reg_942 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln3087_3_fu_438_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln3087_3_reg_948 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln3090_fu_453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln3090_reg_953 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln3086_2_reg_973 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal lshr_ln3087_2_reg_978 : STD_LOGIC_VECTOR (11 downto 0);
    signal gmem0_addr_read_reg_983 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem0_addr_26_read_reg_988 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln3107_fu_616_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln3107_reg_993 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal sub_ln3106_fu_632_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln3106_reg_1001 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln3107_fu_621_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3107_1_fu_639_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3107_1_reg_1006 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln3107_fu_651_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln3107_reg_1011 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln808_fu_665_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln808_reg_1016 : STD_LOGIC_VECTOR (31 downto 0);
    signal gm_fu_743_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal gm_reg_1045 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln962_fu_748_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln962_reg_1050 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal icmp_ln962_fu_755_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln56_reg_1063 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal grp_make_fg_step_1_fu_268_ap_start : STD_LOGIC;
    signal grp_make_fg_step_1_fu_268_ap_done : STD_LOGIC;
    signal grp_make_fg_step_1_fu_268_ap_idle : STD_LOGIC;
    signal grp_make_fg_step_1_fu_268_ap_ready : STD_LOGIC;
    signal grp_make_fg_step_1_fu_268_vla1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_make_fg_step_1_fu_268_vla1_ce0 : STD_LOGIC;
    signal grp_make_fg_step_1_fu_268_vla1_we0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_make_fg_step_1_fu_268_vla1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_make_fg_step_1_fu_268_vla1_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_make_fg_step_1_fu_268_vla1_ce1 : STD_LOGIC;
    signal grp_make_fg_step_1_fu_268_vla1_we1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_make_fg_step_1_fu_268_vla1_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_make_fg_step_1_fu_268_grp_modp_montymul_fu_289_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_make_fg_step_1_fu_268_grp_modp_montymul_fu_289_p_din2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_make_fg_step_1_fu_268_grp_modp_montymul_fu_289_p_din3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_make_fg_step_1_fu_268_grp_modp_montymul_fu_289_p_din4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_modp_montymul_fu_289_ap_ready : STD_LOGIC;
    signal grp_modp_montymul_fu_289_a : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_modp_montymul_fu_289_b : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_modp_montymul_fu_289_p : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_modp_montymul_fu_289_p0i : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_modp_NTT2_ext_1_fu_302_ap_start : STD_LOGIC;
    signal grp_modp_NTT2_ext_1_fu_302_ap_done : STD_LOGIC;
    signal grp_modp_NTT2_ext_1_fu_302_ap_idle : STD_LOGIC;
    signal grp_modp_NTT2_ext_1_fu_302_ap_ready : STD_LOGIC;
    signal grp_modp_NTT2_ext_1_fu_302_vla1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_modp_NTT2_ext_1_fu_302_vla1_ce0 : STD_LOGIC;
    signal grp_modp_NTT2_ext_1_fu_302_vla1_we0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_modp_NTT2_ext_1_fu_302_vla1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_modp_NTT2_ext_1_fu_302_vla1_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_modp_NTT2_ext_1_fu_302_vla1_ce1 : STD_LOGIC;
    signal grp_modp_NTT2_ext_1_fu_302_vla1_we1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_modp_NTT2_ext_1_fu_302_vla1_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_modp_NTT2_ext_1_fu_302_a : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_make_fg_step_1_fu_268_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal grp_modp_NTT2_ext_1_fu_302_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal zext_ln3086_3_fu_561_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln3087_1_fu_612_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal zext_ln966_fu_773_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln967_3_fu_815_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln968_fu_851_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln3086_fu_394_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln3087_fu_428_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal u_03_fu_144 : STD_LOGIC_VECTOR (9 downto 0);
    signal u_209_fu_369_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal d_fu_148 : STD_LOGIC_VECTOR (31 downto 0);
    signal z_119_fu_732_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal d_3_fu_626_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_152 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_17_fu_677_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal u_132_fu_156 : STD_LOGIC_VECTOR (9 downto 0);
    signal u_211_fu_761_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal x1_fu_160 : STD_LOGIC_VECTOR (31 downto 0);
    signal x2_fu_164 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_64_fu_554_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_66_fu_605_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln3085_fu_359_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln3086_fu_379_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln3086_3_fu_384_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal trunc_ln3086_1_fu_375_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln3087_1_fu_413_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln3087_2_fu_418_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal icmp_ln3090_fu_448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln3086_1_fu_473_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln3086_2_fu_480_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln3086_1_fu_484_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln3087_2_fu_499_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln_fu_514_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln3086_1_fu_521_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln3086_fu_525_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_fu_530_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_538_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln635_fu_546_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln3086_1_fu_534_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln105_fu_565_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln3087_fu_572_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln3087_fu_576_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_65_fu_581_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_186_fu_589_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln635_18_fu_597_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln3087_1_fu_585_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln3107_2_fu_646_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln808_fu_665_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_187_fu_669_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_17_fu_677_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal lshr_ln813_fu_709_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln813_fu_714_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln813_fu_703_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln813_fu_718_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln813_fu_726_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln966_fu_767_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln106_fu_788_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln967_fu_796_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln967_1_fu_800_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal lshr_ln_fu_805_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln968_fu_820_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln968_2_fu_826_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_state23_on_subcall_done : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component solve_NTRU_make_fg_step_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        vla1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        vla1_ce0 : OUT STD_LOGIC;
        vla1_we0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        vla1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        vla1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        vla1_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        vla1_ce1 : OUT STD_LOGIC;
        vla1_we1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        vla1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        vla1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        data : IN STD_LOGIC_VECTOR (63 downto 0);
        logn : IN STD_LOGIC_VECTOR (31 downto 0);
        depth : IN STD_LOGIC_VECTOR (3 downto 0);
        in_ntt : IN STD_LOGIC_VECTOR (0 downto 0);
        out_ntt : IN STD_LOGIC_VECTOR (0 downto 0);
        grp_modp_montymul_fu_289_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_modp_montymul_fu_289_p_din2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_modp_montymul_fu_289_p_din3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_modp_montymul_fu_289_p_din4 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_modp_montymul_fu_289_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_modp_montymul_fu_289_p_ready : IN STD_LOGIC );
    end component;


    component solve_NTRU_modp_montymul IS
    port (
        ap_ready : OUT STD_LOGIC;
        a : IN STD_LOGIC_VECTOR (31 downto 0);
        b : IN STD_LOGIC_VECTOR (31 downto 0);
        p : IN STD_LOGIC_VECTOR (31 downto 0);
        p0i : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component solve_NTRU_modp_NTT2_ext_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        vla1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        vla1_ce0 : OUT STD_LOGIC;
        vla1_we0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        vla1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        vla1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        vla1_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        vla1_ce1 : OUT STD_LOGIC;
        vla1_we1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        vla1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        vla1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        a : IN STD_LOGIC_VECTOR (63 downto 0);
        stride : IN STD_LOGIC_VECTOR (63 downto 0);
        gm : IN STD_LOGIC_VECTOR (63 downto 0);
        logn : IN STD_LOGIC_VECTOR (31 downto 0);
        p : IN STD_LOGIC_VECTOR (31 downto 0);
        p0i : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component solve_NTRU_modp_mkgm2_1_REV10_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;



begin
    REV10_U : component solve_NTRU_modp_mkgm2_1_REV10_ROM_AUTO_1R
    generic map (
        DataWidth => 10,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => REV10_address0,
        ce0 => REV10_ce0,
        q0 => REV10_q0);

    grp_make_fg_step_1_fu_268 : component solve_NTRU_make_fg_step_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_make_fg_step_1_fu_268_ap_start,
        ap_done => grp_make_fg_step_1_fu_268_ap_done,
        ap_idle => grp_make_fg_step_1_fu_268_ap_idle,
        ap_ready => grp_make_fg_step_1_fu_268_ap_ready,
        vla1_address0 => grp_make_fg_step_1_fu_268_vla1_address0,
        vla1_ce0 => grp_make_fg_step_1_fu_268_vla1_ce0,
        vla1_we0 => grp_make_fg_step_1_fu_268_vla1_we0,
        vla1_d0 => grp_make_fg_step_1_fu_268_vla1_d0,
        vla1_q0 => vla1_q0,
        vla1_address1 => grp_make_fg_step_1_fu_268_vla1_address1,
        vla1_ce1 => grp_make_fg_step_1_fu_268_vla1_ce1,
        vla1_we1 => grp_make_fg_step_1_fu_268_vla1_we1,
        vla1_d1 => grp_make_fg_step_1_fu_268_vla1_d1,
        vla1_q1 => vla1_q1,
        data => data,
        logn => sub_ln3106_reg_1001,
        depth => trunc_ln3107_reg_993,
        in_ntt => icmp_ln3107_1_reg_1006,
        out_ntt => or_ln3107_reg_1011,
        grp_modp_montymul_fu_289_p_din1 => grp_make_fg_step_1_fu_268_grp_modp_montymul_fu_289_p_din1,
        grp_modp_montymul_fu_289_p_din2 => grp_make_fg_step_1_fu_268_grp_modp_montymul_fu_289_p_din2,
        grp_modp_montymul_fu_289_p_din3 => grp_make_fg_step_1_fu_268_grp_modp_montymul_fu_289_p_din3,
        grp_modp_montymul_fu_289_p_din4 => grp_make_fg_step_1_fu_268_grp_modp_montymul_fu_289_p_din4,
        grp_modp_montymul_fu_289_p_dout0 => grp_modp_montymul_fu_289_ap_return,
        grp_modp_montymul_fu_289_p_ready => grp_modp_montymul_fu_289_ap_ready);

    grp_modp_montymul_fu_289 : component solve_NTRU_modp_montymul
    port map (
        ap_ready => grp_modp_montymul_fu_289_ap_ready,
        a => grp_modp_montymul_fu_289_a,
        b => grp_modp_montymul_fu_289_b,
        p => grp_modp_montymul_fu_289_p,
        p0i => grp_modp_montymul_fu_289_p0i,
        ap_return => grp_modp_montymul_fu_289_ap_return);

    grp_modp_NTT2_ext_1_fu_302 : component solve_NTRU_modp_NTT2_ext_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_modp_NTT2_ext_1_fu_302_ap_start,
        ap_done => grp_modp_NTT2_ext_1_fu_302_ap_done,
        ap_idle => grp_modp_NTT2_ext_1_fu_302_ap_idle,
        ap_ready => grp_modp_NTT2_ext_1_fu_302_ap_ready,
        vla1_address0 => grp_modp_NTT2_ext_1_fu_302_vla1_address0,
        vla1_ce0 => grp_modp_NTT2_ext_1_fu_302_vla1_ce0,
        vla1_we0 => grp_modp_NTT2_ext_1_fu_302_vla1_we0,
        vla1_d0 => grp_modp_NTT2_ext_1_fu_302_vla1_d0,
        vla1_q0 => vla1_q0,
        vla1_address1 => grp_modp_NTT2_ext_1_fu_302_vla1_address1,
        vla1_ce1 => grp_modp_NTT2_ext_1_fu_302_vla1_ce1,
        vla1_we1 => grp_modp_NTT2_ext_1_fu_302_vla1_we1,
        vla1_d1 => grp_modp_NTT2_ext_1_fu_302_vla1_d1,
        vla1_q1 => vla1_q1,
        a => grp_modp_NTT2_ext_1_fu_302_a,
        stride => ap_const_lv64_1,
        gm => zext_ln962_reg_1050,
        logn => ap_const_lv32_9,
        p => ap_const_lv32_7FFFD801,
        p0i => ap_const_lv32_79BFD7FF);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_make_fg_step_1_fu_268_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_make_fg_step_1_fu_268_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln3107_fu_621_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                    grp_make_fg_step_1_fu_268_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_make_fg_step_1_fu_268_ap_ready = ap_const_logic_1)) then 
                    grp_make_fg_step_1_fu_268_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_modp_NTT2_ext_1_fu_302_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_modp_NTT2_ext_1_fu_302_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state22) or ((icmp_ln962_fu_755_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
                    grp_modp_NTT2_ext_1_fu_302_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_modp_NTT2_ext_1_fu_302_ap_ready = ap_const_logic_1)) then 
                    grp_modp_NTT2_ext_1_fu_302_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    d_fu_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln3085_fu_363_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln3090_fu_453_p2))) then 
                d_fu_148 <= ap_const_lv32_27FF;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln3085_fu_363_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln3090_fu_453_p2))) then 
                d_fu_148 <= ap_const_lv32_0;
            elsif (((icmp_ln3107_fu_621_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                d_fu_148 <= d_3_fu_626_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                d_fu_148 <= z_119_fu_732_p2;
            end if; 
        end if;
    end process;

    i_fu_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln3085_fu_363_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln3090_fu_453_p2))) then 
                i_fu_152 <= ap_const_lv6_1E;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_187_fu_669_p3 = ap_const_lv1_0))) then 
                i_fu_152 <= i_17_fu_677_p2;
            end if; 
        end if;
    end process;

    u_03_fu_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                u_03_fu_144 <= ap_const_lv10_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln3085_fu_363_p2 = ap_const_lv1_0))) then 
                u_03_fu_144 <= u_209_fu_369_p2;
            end if; 
        end if;
    end process;

    u_132_fu_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_187_fu_669_p3 = ap_const_lv1_1))) then 
                u_132_fu_156 <= ap_const_lv10_0;
            elsif (((icmp_ln962_fu_755_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                u_132_fu_156 <= u_211_fu_761_p2;
            end if; 
        end if;
    end process;

    x1_fu_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_187_fu_669_p3 = ap_const_lv1_1))) then 
                x1_fu_160 <= ap_const_lv32_27FF;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                x1_fu_160 <= grp_modp_montymul_fu_289_ap_return;
            end if; 
        end if;
    end process;

    x2_fu_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_187_fu_669_p3 = ap_const_lv1_1))) then 
                x2_fu_164 <= ap_const_lv32_27FF;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                x2_fu_164 <= grp_modp_montymul_fu_289_ap_return;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln3085_fu_363_p2 = ap_const_lv1_0))) then
                add_ln3086_2_reg_932 <= add_ln3086_2_fu_404_p2;
                add_ln3087_3_reg_948 <= add_ln3087_3_fu_438_p2;
                gmem0_addr_26_reg_942 <= sext_ln3087_fu_428_p1;
                gmem0_addr_reg_926 <= sext_ln3086_fu_394_p1;
                trunc_ln3086_4_reg_937 <= trunc_ln3086_4_fu_409_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln3085_fu_363_p2 = ap_const_lv1_1))) then
                and_ln3090_reg_953 <= and_ln3090_fu_453_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                empty_reg_896 <= empty_fu_329_p1;
                gt_reg_903 <= gt_fu_333_p2;
                trunc_ln3086_reg_913 <= trunc_ln3086_fu_343_p1;
                trunc_ln3087_reg_918 <= trunc_ln3087_fu_347_p1;
                    zext_ln3086_reg_908(13 downto 0) <= zext_ln3086_fu_339_p1(13 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                gm_reg_1045 <= gm_fu_743_p2;
                    zext_ln962_reg_1050(13 downto 0) <= zext_ln962_fu_748_p1(13 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                gmem0_addr_26_read_reg_988 <= m_axi_gmem0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                gmem0_addr_read_reg_983 <= m_axi_gmem0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln3107_fu_621_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                icmp_ln3107_1_reg_1006 <= icmp_ln3107_1_fu_639_p2;
                or_ln3107_reg_1011 <= or_ln3107_fu_651_p2;
                sub_ln3106_reg_1001 <= sub_ln3106_fu_632_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                lshr_ln3086_2_reg_973 <= add_ln3086_1_fu_484_p2(13 downto 2);
                lshr_ln3087_2_reg_978 <= add_ln3087_2_fu_499_p2(13 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                lshr_ln56_reg_1063 <= add_ln968_2_fu_826_p2(13 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_187_fu_669_p3 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_187_fu_669_p3 = ap_const_lv1_0)))) then
                reg_323 <= grp_modp_montymul_fu_289_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                sext_ln808_reg_1016 <= sext_ln808_fu_665_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                trunc_ln3107_reg_993 <= trunc_ln3107_fu_616_p1;
            end if;
        end if;
    end process;
    zext_ln3086_reg_908(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln962_reg_1050(63 downto 14) <= "00000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_gmem0_ARREADY, m_axi_gmem0_RVALID, ap_CS_fsm_state3, ap_CS_fsm_state10, ap_CS_fsm_state4, ap_CS_fsm_state11, ap_CS_fsm_state15, tmp_187_fu_669_p3, ap_CS_fsm_state2, icmp_ln3085_fu_363_p2, and_ln3090_fu_453_p2, ap_CS_fsm_state13, icmp_ln3107_fu_621_p2, ap_CS_fsm_state18, icmp_ln962_fu_755_p2, grp_make_fg_step_1_fu_268_ap_done, grp_modp_NTT2_ext_1_fu_302_ap_done, ap_CS_fsm_state14, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_block_state23_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln3085_fu_363_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln3090_fu_453_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln3085_fu_363_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln3090_fu_453_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((m_axi_gmem0_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((m_axi_gmem0_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((m_axi_gmem0_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((m_axi_gmem0_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state13 => 
                if (((icmp_ln3107_fu_621_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                if (((grp_make_fg_step_1_fu_268_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_187_fu_669_p3 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((icmp_ln962_fu_755_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state21 => 
                if (((grp_modp_NTT2_ext_1_fu_302_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                if (((ap_const_boolean_0 = ap_block_state23_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    REV10_address0_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state14, zext_ln966_fu_773_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            REV10_address0 <= zext_ln966_fu_773_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            REV10_address0 <= ap_const_lv10_0;
        else 
            REV10_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    REV10_ce0_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            REV10_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            REV10_ce0 <= ap_const_logic_0;
        else 
            REV10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln3086_1_fu_484_p2 <= std_logic_vector(unsigned(zext_ln3086_2_fu_480_p1) + unsigned(empty_reg_896));
    add_ln3086_2_fu_404_p2 <= std_logic_vector(unsigned(trunc_ln3086_1_fu_375_p1) + unsigned(trunc_ln3086_reg_913));
    add_ln3086_fu_379_p2 <= std_logic_vector(unsigned(zext_ln3085_fu_359_p1) + unsigned(f));
    add_ln3087_1_fu_413_p2 <= std_logic_vector(unsigned(zext_ln3085_fu_359_p1) + unsigned(g));
    add_ln3087_2_fu_499_p2 <= std_logic_vector(unsigned(zext_ln3086_2_fu_480_p1) + unsigned(gt_reg_903));
    add_ln3087_3_fu_438_p2 <= std_logic_vector(unsigned(trunc_ln3086_1_fu_375_p1) + unsigned(trunc_ln3087_reg_918));
    add_ln967_1_fu_800_p2 <= std_logic_vector(unsigned(zext_ln967_fu_796_p1) + unsigned(gm_reg_1045));
    add_ln968_2_fu_826_p2 <= std_logic_vector(unsigned(add_ln968_fu_820_p2) + unsigned(empty_reg_896));
    add_ln968_fu_820_p2 <= std_logic_vector(unsigned(zext_ln967_fu_796_p1) + unsigned(ap_const_lv14_1800));
    and_ln3090_fu_453_p2 <= (out_ntt and icmp_ln3090_fu_448_p2);
    and_ln813_fu_726_p2 <= (xor_ln813_fu_703_p2 and select_ln813_fu_718_p3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_ST_fsm_state10_blk_assign_proc : process(m_axi_gmem0_RVALID)
    begin
        if ((m_axi_gmem0_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state11_blk_assign_proc : process(m_axi_gmem0_RVALID)
    begin
        if ((m_axi_gmem0_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state11_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state11_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;

    ap_ST_fsm_state14_blk_assign_proc : process(grp_make_fg_step_1_fu_268_ap_done)
    begin
        if ((grp_make_fg_step_1_fu_268_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state14_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state14_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;

    ap_ST_fsm_state21_blk_assign_proc : process(grp_modp_NTT2_ext_1_fu_302_ap_done)
    begin
        if ((grp_modp_NTT2_ext_1_fu_302_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state21_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state21_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state22_blk <= ap_const_logic_0;

    ap_ST_fsm_state23_blk_assign_proc : process(ap_block_state23_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state23_on_subcall_done)) then 
            ap_ST_fsm_state23_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state23_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(m_axi_gmem0_ARREADY)
    begin
        if ((m_axi_gmem0_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state4_blk_assign_proc : process(m_axi_gmem0_ARREADY)
    begin
        if ((m_axi_gmem0_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state23_on_subcall_done_assign_proc : process(and_ln3090_reg_953, grp_modp_NTT2_ext_1_fu_302_ap_done)
    begin
                ap_block_state23_on_subcall_done <= ((grp_modp_NTT2_ext_1_fu_302_ap_done = ap_const_logic_0) and (ap_const_lv1_1 = and_ln3090_reg_953));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state23, ap_block_state23_on_subcall_done)
    begin
        if ((((ap_const_boolean_0 = ap_block_state23_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state23)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state23, ap_block_state23_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state23_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    d_3_fu_626_p2 <= std_logic_vector(unsigned(d_fu_148) + unsigned(ap_const_lv32_1));
    empty_fu_329_p1 <= data(14 - 1 downto 0);
    gm_fu_743_p2 <= std_logic_vector(unsigned(empty_reg_896) + unsigned(ap_const_lv14_1000));

    gmem0_blk_n_AR_assign_proc : process(m_axi_gmem0_ARREADY, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            gmem0_blk_n_AR <= m_axi_gmem0_ARREADY;
        else 
            gmem0_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem0_blk_n_R_assign_proc : process(m_axi_gmem0_RVALID, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            gmem0_blk_n_R <= m_axi_gmem0_RVALID;
        else 
            gmem0_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    grp_make_fg_step_1_fu_268_ap_start <= grp_make_fg_step_1_fu_268_ap_start_reg;

    grp_modp_NTT2_ext_1_fu_302_a_assign_proc : process(data, zext_ln3086_reg_908, and_ln3090_reg_953, ap_CS_fsm_state21, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) and (ap_const_lv1_1 = and_ln3090_reg_953))) then 
            grp_modp_NTT2_ext_1_fu_302_a <= zext_ln3086_reg_908;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_modp_NTT2_ext_1_fu_302_a <= data;
        else 
            grp_modp_NTT2_ext_1_fu_302_a <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_modp_NTT2_ext_1_fu_302_ap_start <= grp_modp_NTT2_ext_1_fu_302_ap_start_reg;

    grp_modp_montymul_fu_289_a_assign_proc : process(reg_323, ap_CS_fsm_state15, tmp_187_fu_669_p3, ap_CS_fsm_state17, ap_CS_fsm_state19, grp_make_fg_step_1_fu_268_grp_modp_montymul_fu_289_p_din1, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state20, d_fu_148, x1_fu_160, x2_fu_164)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_modp_montymul_fu_289_a <= grp_make_fg_step_1_fu_268_grp_modp_montymul_fu_289_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_modp_montymul_fu_289_a <= x2_fu_164;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_modp_montymul_fu_289_a <= x1_fu_160;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_modp_montymul_fu_289_a <= ap_const_lv32_63FB001;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_modp_montymul_fu_289_a <= reg_323;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_187_fu_669_p3 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_187_fu_669_p3 = ap_const_lv1_0)))) then 
            grp_modp_montymul_fu_289_a <= d_fu_148;
        else 
            grp_modp_montymul_fu_289_a <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_modp_montymul_fu_289_b_assign_proc : process(reg_323, ap_CS_fsm_state15, tmp_187_fu_669_p3, ap_CS_fsm_state17, ap_CS_fsm_state19, grp_make_fg_step_1_fu_268_grp_modp_montymul_fu_289_p_din2, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state20, d_fu_148)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_modp_montymul_fu_289_b <= grp_make_fg_step_1_fu_268_grp_modp_montymul_fu_289_p_din2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            grp_modp_montymul_fu_289_b <= reg_323;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            grp_modp_montymul_fu_289_b <= ap_const_lv32_647A5148;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_187_fu_669_p3 = ap_const_lv1_1))) then 
            grp_modp_montymul_fu_289_b <= ap_const_lv32_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_187_fu_669_p3 = ap_const_lv1_0))) then 
            grp_modp_montymul_fu_289_b <= d_fu_148;
        else 
            grp_modp_montymul_fu_289_b <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_modp_montymul_fu_289_p_assign_proc : process(ap_CS_fsm_state15, tmp_187_fu_669_p3, ap_CS_fsm_state17, ap_CS_fsm_state19, grp_make_fg_step_1_fu_268_grp_modp_montymul_fu_289_p_din3, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_modp_montymul_fu_289_p <= grp_make_fg_step_1_fu_268_grp_modp_montymul_fu_289_p_din3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_187_fu_669_p3 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_187_fu_669_p3 = ap_const_lv1_0)))) then 
            grp_modp_montymul_fu_289_p <= ap_const_lv32_7FFFD801;
        else 
            grp_modp_montymul_fu_289_p <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_modp_montymul_fu_289_p0i_assign_proc : process(ap_CS_fsm_state15, tmp_187_fu_669_p3, ap_CS_fsm_state17, ap_CS_fsm_state19, grp_make_fg_step_1_fu_268_grp_modp_montymul_fu_289_p_din4, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_modp_montymul_fu_289_p0i <= grp_make_fg_step_1_fu_268_grp_modp_montymul_fu_289_p_din4;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_187_fu_669_p3 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_187_fu_669_p3 = ap_const_lv1_0)))) then 
            grp_modp_montymul_fu_289_p0i <= ap_const_lv32_79BFD7FF;
        else 
            grp_modp_montymul_fu_289_p0i <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    gt_fu_333_p2 <= std_logic_vector(unsigned(empty_fu_329_p1) + unsigned(ap_const_lv14_800));
    i_17_fu_677_p0 <= i_fu_152;
    i_17_fu_677_p2 <= std_logic_vector(signed(i_17_fu_677_p0) + signed(ap_const_lv6_3F));
    icmp_ln3085_fu_363_p2 <= "1" when (u_03_fu_144 = ap_const_lv10_200) else "0";
    icmp_ln3090_fu_448_p2 <= "1" when (depth = ap_const_lv32_0) else "0";
    icmp_ln3107_1_fu_639_p2 <= "0" when (d_fu_148 = ap_const_lv32_0) else "1";
    icmp_ln3107_2_fu_646_p2 <= "1" when (unsigned(d_3_fu_626_p2) < unsigned(depth)) else "0";
    icmp_ln3107_fu_621_p2 <= "1" when (d_fu_148 = depth) else "0";
    icmp_ln962_fu_755_p2 <= "1" when (u_132_fu_156 = ap_const_lv10_200) else "0";
    lshr_ln3086_fu_525_p2 <= std_logic_vector(shift_right(unsigned(gmem0_addr_read_reg_983),to_integer(unsigned('0' & zext_ln3086_1_fu_521_p1(31-1 downto 0)))));
    lshr_ln3087_fu_576_p2 <= std_logic_vector(shift_right(unsigned(gmem0_addr_26_read_reg_988),to_integer(unsigned('0' & zext_ln3087_fu_572_p1(31-1 downto 0)))));
    lshr_ln813_fu_709_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_7FFFD7FF),to_integer(unsigned('0' & sext_ln808_reg_1016(31-1 downto 0)))));
    lshr_ln_fu_805_p4 <= add_ln967_1_fu_800_p2(13 downto 2);

    m_axi_gmem0_ARADDR_assign_proc : process(m_axi_gmem0_ARREADY, ap_CS_fsm_state3, ap_CS_fsm_state4, gmem0_addr_reg_926, gmem0_addr_26_reg_942)
    begin
        if ((m_axi_gmem0_ARREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                m_axi_gmem0_ARADDR <= gmem0_addr_26_reg_942;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                m_axi_gmem0_ARADDR <= gmem0_addr_reg_926;
            else 
                m_axi_gmem0_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_gmem0_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem0_ARBURST <= ap_const_lv2_0;
    m_axi_gmem0_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem0_ARID <= ap_const_lv1_0;
    m_axi_gmem0_ARLEN <= ap_const_lv32_1;
    m_axi_gmem0_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem0_ARPROT <= ap_const_lv3_0;
    m_axi_gmem0_ARQOS <= ap_const_lv4_0;
    m_axi_gmem0_ARREGION <= ap_const_lv4_0;
    m_axi_gmem0_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem0_ARUSER <= ap_const_lv1_0;

    m_axi_gmem0_ARVALID_assign_proc : process(m_axi_gmem0_ARREADY, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if ((((m_axi_gmem0_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((m_axi_gmem0_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            m_axi_gmem0_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem0_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem0_AWADDR <= ap_const_lv64_0;
    m_axi_gmem0_AWBURST <= ap_const_lv2_0;
    m_axi_gmem0_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem0_AWID <= ap_const_lv1_0;
    m_axi_gmem0_AWLEN <= ap_const_lv32_0;
    m_axi_gmem0_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem0_AWPROT <= ap_const_lv3_0;
    m_axi_gmem0_AWQOS <= ap_const_lv4_0;
    m_axi_gmem0_AWREGION <= ap_const_lv4_0;
    m_axi_gmem0_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem0_AWUSER <= ap_const_lv1_0;
    m_axi_gmem0_AWVALID <= ap_const_logic_0;
    m_axi_gmem0_BREADY <= ap_const_logic_0;

    m_axi_gmem0_RREADY_assign_proc : process(m_axi_gmem0_RVALID, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if ((((m_axi_gmem0_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((m_axi_gmem0_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            m_axi_gmem0_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem0_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem0_WDATA <= ap_const_lv32_0;
    m_axi_gmem0_WID <= ap_const_lv1_0;
    m_axi_gmem0_WLAST <= ap_const_logic_0;
    m_axi_gmem0_WSTRB <= ap_const_lv4_0;
    m_axi_gmem0_WUSER <= ap_const_lv1_0;
    m_axi_gmem0_WVALID <= ap_const_logic_0;
    or_ln3107_fu_651_p2 <= (out_ntt or icmp_ln3107_2_fu_646_p2);
    select_ln635_18_fu_597_p3 <= 
        ap_const_lv32_7FFFD801 when (tmp_186_fu_589_p3(0) = '1') else 
        ap_const_lv32_0;
    select_ln635_fu_546_p3 <= 
        ap_const_lv32_7FFFD801 when (tmp_fu_538_p3(0) = '1') else 
        ap_const_lv32_0;
    select_ln813_fu_718_p3 <= 
        ap_const_lv32_FFFFFFFF when (trunc_ln813_fu_714_p1(0) = '1') else 
        ap_const_lv32_0;
        sext_ln3086_1_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(w_fu_530_p1),32));

        sext_ln3086_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln3086_3_fu_384_p4),64));

        sext_ln3087_1_fu_585_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(w_65_fu_581_p1),32));

        sext_ln3087_fu_428_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln3087_2_fu_418_p4),64));

    sext_ln808_fu_665_p0 <= i_fu_152;
        sext_ln808_fu_665_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln808_fu_665_p0),32));

    shl_ln105_fu_565_p3 <= (add_ln3087_3_reg_948 & ap_const_lv3_0);
    shl_ln106_fu_788_p3 <= (REV10_q0 & ap_const_lv2_0);
    shl_ln3086_1_fu_473_p3 <= (trunc_ln3086_4_reg_937 & ap_const_lv2_0);
    shl_ln966_fu_767_p2 <= std_logic_vector(shift_left(unsigned(u_132_fu_156),to_integer(unsigned('0' & ap_const_lv10_1(10-1 downto 0)))));
    shl_ln_fu_514_p3 <= (add_ln3086_2_reg_932 & ap_const_lv3_0);
    sub_ln3106_fu_632_p2 <= std_logic_vector(unsigned(ap_const_lv32_9) - unsigned(d_fu_148));
    tmp_186_fu_589_p3 <= lshr_ln3087_fu_576_p2(7 downto 7);
    tmp_187_fu_669_p1 <= i_fu_152;
    tmp_187_fu_669_p3 <= tmp_187_fu_669_p1(5 downto 5);
    tmp_fu_538_p3 <= lshr_ln3086_fu_525_p2(7 downto 7);
    trunc_ln3086_1_fu_375_p1 <= u_03_fu_144(2 - 1 downto 0);
    trunc_ln3086_3_fu_384_p4 <= add_ln3086_fu_379_p2(63 downto 2);
    trunc_ln3086_4_fu_409_p1 <= u_03_fu_144(9 - 1 downto 0);
    trunc_ln3086_fu_343_p1 <= f(2 - 1 downto 0);
    trunc_ln3087_2_fu_418_p4 <= add_ln3087_1_fu_413_p2(63 downto 2);
    trunc_ln3087_fu_347_p1 <= g(2 - 1 downto 0);
    trunc_ln3107_fu_616_p1 <= d_fu_148(4 - 1 downto 0);
    trunc_ln813_fu_714_p1 <= lshr_ln813_fu_709_p2(1 - 1 downto 0);
    u_209_fu_369_p2 <= std_logic_vector(unsigned(u_03_fu_144) + unsigned(ap_const_lv10_1));
    u_211_fu_761_p2 <= std_logic_vector(unsigned(u_132_fu_156) + unsigned(ap_const_lv10_1));

    vla1_address0_assign_proc : process(ap_CS_fsm_state11, and_ln3090_reg_953, ap_CS_fsm_state19, grp_make_fg_step_1_fu_268_vla1_address0, grp_modp_NTT2_ext_1_fu_302_vla1_address0, ap_CS_fsm_state14, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state23, zext_ln3086_3_fu_561_p1, zext_ln3087_1_fu_612_p1, ap_CS_fsm_state12, zext_ln967_3_fu_815_p1, zext_ln968_fu_851_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            vla1_address0 <= zext_ln968_fu_851_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            vla1_address0 <= zext_ln967_3_fu_815_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            vla1_address0 <= zext_ln3087_1_fu_612_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            vla1_address0 <= zext_ln3086_3_fu_561_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (ap_const_lv1_1 = and_ln3090_reg_953)))) then 
            vla1_address0 <= grp_modp_NTT2_ext_1_fu_302_vla1_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            vla1_address0 <= grp_make_fg_step_1_fu_268_vla1_address0;
        else 
            vla1_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    vla1_address1_assign_proc : process(and_ln3090_reg_953, grp_make_fg_step_1_fu_268_vla1_address1, grp_modp_NTT2_ext_1_fu_302_vla1_address1, ap_CS_fsm_state14, ap_CS_fsm_state21, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (ap_const_lv1_1 = and_ln3090_reg_953)))) then 
            vla1_address1 <= grp_modp_NTT2_ext_1_fu_302_vla1_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            vla1_address1 <= grp_make_fg_step_1_fu_268_vla1_address1;
        else 
            vla1_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    vla1_ce0_assign_proc : process(m_axi_gmem0_RVALID, ap_CS_fsm_state11, and_ln3090_reg_953, ap_CS_fsm_state19, grp_make_fg_step_1_fu_268_vla1_ce0, grp_modp_NTT2_ext_1_fu_302_vla1_ce0, ap_CS_fsm_state14, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or ((m_axi_gmem0_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
            vla1_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (ap_const_lv1_1 = and_ln3090_reg_953)))) then 
            vla1_ce0 <= grp_modp_NTT2_ext_1_fu_302_vla1_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            vla1_ce0 <= grp_make_fg_step_1_fu_268_vla1_ce0;
        else 
            vla1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    vla1_ce1_assign_proc : process(and_ln3090_reg_953, grp_make_fg_step_1_fu_268_vla1_ce1, grp_modp_NTT2_ext_1_fu_302_vla1_ce1, ap_CS_fsm_state14, ap_CS_fsm_state21, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (ap_const_lv1_1 = and_ln3090_reg_953)))) then 
            vla1_ce1 <= grp_modp_NTT2_ext_1_fu_302_vla1_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            vla1_ce1 <= grp_make_fg_step_1_fu_268_vla1_ce1;
        else 
            vla1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    vla1_d0_assign_proc : process(ap_CS_fsm_state11, and_ln3090_reg_953, ap_CS_fsm_state19, grp_make_fg_step_1_fu_268_vla1_d0, grp_modp_NTT2_ext_1_fu_302_vla1_d0, ap_CS_fsm_state14, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state12, x1_fu_160, x2_fu_164, w_64_fu_554_p2, w_66_fu_605_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            vla1_d0 <= x2_fu_164;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            vla1_d0 <= x1_fu_160;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            vla1_d0 <= w_66_fu_605_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            vla1_d0 <= w_64_fu_554_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (ap_const_lv1_1 = and_ln3090_reg_953)))) then 
            vla1_d0 <= grp_modp_NTT2_ext_1_fu_302_vla1_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            vla1_d0 <= grp_make_fg_step_1_fu_268_vla1_d0;
        else 
            vla1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    vla1_d1_assign_proc : process(and_ln3090_reg_953, grp_make_fg_step_1_fu_268_vla1_d1, grp_modp_NTT2_ext_1_fu_302_vla1_d1, ap_CS_fsm_state14, ap_CS_fsm_state21, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (ap_const_lv1_1 = and_ln3090_reg_953)))) then 
            vla1_d1 <= grp_modp_NTT2_ext_1_fu_302_vla1_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            vla1_d1 <= grp_make_fg_step_1_fu_268_vla1_d1;
        else 
            vla1_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    vla1_we0_assign_proc : process(m_axi_gmem0_RVALID, ap_CS_fsm_state11, and_ln3090_reg_953, ap_CS_fsm_state19, grp_make_fg_step_1_fu_268_vla1_we0, grp_modp_NTT2_ext_1_fu_302_vla1_we0, ap_CS_fsm_state14, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or ((m_axi_gmem0_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
            vla1_we0 <= ap_const_lv4_F;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (ap_const_lv1_1 = and_ln3090_reg_953)))) then 
            vla1_we0 <= grp_modp_NTT2_ext_1_fu_302_vla1_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            vla1_we0 <= grp_make_fg_step_1_fu_268_vla1_we0;
        else 
            vla1_we0 <= ap_const_lv4_0;
        end if; 
    end process;


    vla1_we1_assign_proc : process(and_ln3090_reg_953, grp_make_fg_step_1_fu_268_vla1_we1, grp_modp_NTT2_ext_1_fu_302_vla1_we1, ap_CS_fsm_state14, ap_CS_fsm_state21, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (ap_const_lv1_1 = and_ln3090_reg_953)))) then 
            vla1_we1 <= grp_modp_NTT2_ext_1_fu_302_vla1_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            vla1_we1 <= grp_make_fg_step_1_fu_268_vla1_we1;
        else 
            vla1_we1 <= (0=>ap_const_logic_0, others=>'-');
        end if; 
    end process;

    w_64_fu_554_p2 <= std_logic_vector(unsigned(select_ln635_fu_546_p3) + unsigned(sext_ln3086_1_fu_534_p1));
    w_65_fu_581_p1 <= lshr_ln3087_fu_576_p2(8 - 1 downto 0);
    w_66_fu_605_p2 <= std_logic_vector(unsigned(select_ln635_18_fu_597_p3) + unsigned(sext_ln3087_1_fu_585_p1));
    w_fu_530_p1 <= lshr_ln3086_fu_525_p2(8 - 1 downto 0);
    xor_ln813_fu_703_p2 <= (reg_323 xor grp_modp_montymul_fu_289_ap_return);
    z_119_fu_732_p2 <= (reg_323 xor and_ln813_fu_726_p2);
    zext_ln3085_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(u_03_fu_144),64));
    zext_ln3086_1_fu_521_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_514_p3),32));
    zext_ln3086_2_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln3086_1_fu_473_p3),14));
    zext_ln3086_3_fu_561_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln3086_2_reg_973),64));
    zext_ln3086_fu_339_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(gt_fu_333_p2),64));
    zext_ln3087_1_fu_612_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln3087_2_reg_978),64));
    zext_ln3087_fu_572_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln105_fu_565_p3),32));
    zext_ln962_fu_748_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(gm_fu_743_p2),64));
    zext_ln966_fu_773_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln966_fu_767_p2),64));
    zext_ln967_3_fu_815_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_805_p4),64));
    zext_ln967_fu_796_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln106_fu_788_p3),14));
    zext_ln968_fu_851_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln56_reg_1063),64));
end behav;
