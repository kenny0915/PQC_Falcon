-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity solve_NTRU_poly_mul_fft_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    vla1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    vla1_ce0 : OUT STD_LOGIC;
    vla1_we0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    vla1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    vla1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    vla1_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    vla1_ce1 : OUT STD_LOGIC;
    vla1_we1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    vla1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    vla1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    a : IN STD_LOGIC_VECTOR (13 downto 0);
    b : IN STD_LOGIC_VECTOR (13 downto 0);
    logn : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of solve_NTRU_poly_mul_fft_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv63_1 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal trunc_ln_reg_488 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln23_reg_493 : STD_LOGIC_VECTOR (10 downto 0);
    signal vla1_addr_reg_501 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln511_fu_225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal vla1_addr_298_reg_507 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln516_2_reg_512 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln25_reg_518 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln26_reg_524 : STD_LOGIC_VECTOR (11 downto 0);
    signal vla1_load_reg_530 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal vla1_load_199_reg_535 : STD_LOGIC_VECTOR (31 downto 0);
    signal vla1_addr_299_reg_540 : STD_LOGIC_VECTOR (11 downto 0);
    signal vla1_addr_300_reg_546 : STD_LOGIC_VECTOR (11 downto 0);
    signal vla1_load_200_reg_551 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal vla1_load_201_reg_556 : STD_LOGIC_VECTOR (31 downto 0);
    signal vla1_load_202_reg_571 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal vla1_load_203_reg_576 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_re_fu_386_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal a_im_fu_398_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal b_re_fu_410_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal b_im_fu_424_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_167_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal test1_reg_615 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_fu_171_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal test2_reg_620 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_175_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal test1_4_reg_625 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_179_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal test2_4_reg_630 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_163_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal fpct_d_im_reg_635 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal zext_ln515_fu_259_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln515_1_fu_270_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln516_fu_338_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln516_1_fu_347_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln517_fu_352_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln517_1_fu_361_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln518_fu_366_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln518_1_fu_375_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal u_02_fu_64 : STD_LOGIC_VECTOR (62 downto 0);
    signal u_195_fu_230_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln64_fu_434_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal trunc_ln65_fu_453_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal zext_ln509_fu_183_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal n_fu_187_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln511_fu_221_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln_fu_236_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln515_fu_244_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln24_fu_249_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln515_1_fu_264_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln516_fu_275_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln72_fu_280_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln516_1_fu_288_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln517_fu_303_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln518_fu_318_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln516_2_fu_342_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln517_1_fu_356_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln518_1_fu_370_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_fu_380_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_392_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_76_fu_404_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_77_fu_416_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_159_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln64_fu_430_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln65_fu_450_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component solve_NTRU_dsub_64ns_64ns_64_3_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component solve_NTRU_dadd_64ns_64ns_64_3_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component solve_NTRU_dmul_64ns_64ns_64_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    dsub_64ns_64ns_64_3_full_dsp_1_U108 : component solve_NTRU_dsub_64ns_64ns_64_3_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => test1_reg_615,
        din1 => test2_reg_620,
        ce => ap_const_logic_1,
        dout => grp_fu_159_p2);

    dadd_64ns_64ns_64_3_full_dsp_1_U109 : component solve_NTRU_dadd_64ns_64ns_64_3_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => test1_4_reg_625,
        din1 => test2_4_reg_630,
        ce => ap_const_logic_1,
        dout => grp_fu_163_p2);

    dmul_64ns_64ns_64_4_max_dsp_1_U110 : component solve_NTRU_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_re_fu_386_p1,
        din1 => b_re_fu_410_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_167_p2);

    dmul_64ns_64ns_64_4_max_dsp_1_U111 : component solve_NTRU_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_im_fu_398_p1,
        din1 => b_im_fu_424_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_171_p2);

    dmul_64ns_64ns_64_4_max_dsp_1_U112 : component solve_NTRU_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_re_fu_386_p1,
        din1 => b_im_fu_424_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_175_p2);

    dmul_64ns_64ns_64_4_max_dsp_1_U113 : component solve_NTRU_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_im_fu_398_p1,
        din1 => b_re_fu_410_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_179_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    u_02_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                u_02_fu_64 <= ap_const_lv63_0;
            elsif (((icmp_ln511_fu_225_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                u_02_fu_64 <= u_195_fu_230_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                fpct_d_im_reg_635 <= grp_fu_163_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                test1_4_reg_625 <= grp_fu_175_p2;
                test1_reg_615 <= grp_fu_167_p2;
                test2_4_reg_630 <= grp_fu_179_p2;
                test2_reg_620 <= grp_fu_171_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                trunc_ln23_reg_493 <= n_fu_187_p2(11 downto 1);
                trunc_ln_reg_488 <= n_fu_187_p2(63 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln511_fu_225_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                trunc_ln25_reg_518 <= add_ln517_fu_303_p2(13 downto 2);
                trunc_ln26_reg_524 <= add_ln518_fu_318_p2(13 downto 2);
                trunc_ln516_2_reg_512 <= add_ln516_1_fu_288_p2(13 downto 2);
                vla1_addr_298_reg_507 <= zext_ln515_1_fu_270_p1(12 - 1 downto 0);
                vla1_addr_reg_501 <= zext_ln515_fu_259_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                vla1_addr_299_reg_540 <= zext_ln516_fu_338_p1(12 - 1 downto 0);
                vla1_addr_300_reg_546 <= zext_ln516_1_fu_347_p1(12 - 1 downto 0);
                vla1_load_199_reg_535 <= vla1_q0;
                vla1_load_reg_530 <= vla1_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                vla1_load_200_reg_551 <= vla1_q1;
                vla1_load_201_reg_556 <= vla1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                vla1_load_202_reg_571 <= vla1_q1;
                vla1_load_203_reg_576 <= vla1_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln511_fu_225_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln511_fu_225_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    a_im_fu_398_p1 <= tmp_s_fu_392_p3;
    a_re_fu_386_p1 <= tmp_fu_380_p3;
    add_ln515_1_fu_264_p2 <= std_logic_vector(unsigned(trunc_ln24_fu_249_p4) + unsigned(ap_const_lv12_1));
    add_ln515_fu_244_p2 <= std_logic_vector(unsigned(shl_ln_fu_236_p3) + unsigned(a));
    add_ln516_1_fu_288_p2 <= std_logic_vector(unsigned(shl_ln72_fu_280_p3) + unsigned(a));
    add_ln516_2_fu_342_p2 <= std_logic_vector(unsigned(trunc_ln516_2_reg_512) + unsigned(ap_const_lv12_1));
    add_ln516_fu_275_p2 <= std_logic_vector(unsigned(trunc_ln511_fu_221_p1) + unsigned(trunc_ln23_reg_493));
    add_ln517_1_fu_356_p2 <= std_logic_vector(unsigned(trunc_ln25_reg_518) + unsigned(ap_const_lv12_1));
    add_ln517_fu_303_p2 <= std_logic_vector(unsigned(shl_ln_fu_236_p3) + unsigned(b));
    add_ln518_1_fu_370_p2 <= std_logic_vector(unsigned(trunc_ln26_reg_524) + unsigned(ap_const_lv12_1));
    add_ln518_fu_318_p2 <= std_logic_vector(unsigned(shl_ln72_fu_280_p3) + unsigned(b));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln511_fu_225_p2)
    begin
        if ((((icmp_ln511_fu_225_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln511_fu_225_p2)
    begin
        if (((icmp_ln511_fu_225_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_im_fu_424_p1 <= tmp_77_fu_416_p3;
    b_re_fu_410_p1 <= tmp_76_fu_404_p3;
    bitcast_ln64_fu_430_p1 <= grp_fu_159_p2;
    bitcast_ln65_fu_450_p1 <= fpct_d_im_reg_635;
    icmp_ln511_fu_225_p2 <= "1" when (u_02_fu_64 = trunc_ln_reg_488) else "0";
    n_fu_187_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_1),to_integer(unsigned('0' & zext_ln509_fu_183_p1(31-1 downto 0)))));
    shl_ln72_fu_280_p3 <= (add_ln516_fu_275_p2 & ap_const_lv3_0);
    shl_ln_fu_236_p3 <= (trunc_ln511_fu_221_p1 & ap_const_lv3_0);
    tmp_76_fu_404_p3 <= (vla1_load_203_reg_576 & vla1_load_202_reg_571);
    tmp_77_fu_416_p3 <= (vla1_q0 & vla1_q1);
    tmp_fu_380_p3 <= (vla1_load_199_reg_535 & vla1_load_reg_530);
    tmp_s_fu_392_p3 <= (vla1_load_201_reg_556 & vla1_load_200_reg_551);
    trunc_ln24_fu_249_p4 <= add_ln515_fu_244_p2(13 downto 2);
    trunc_ln511_fu_221_p1 <= u_02_fu_64(11 - 1 downto 0);
    trunc_ln64_fu_434_p1 <= bitcast_ln64_fu_430_p1(32 - 1 downto 0);
    trunc_ln65_fu_453_p1 <= bitcast_ln65_fu_450_p1(32 - 1 downto 0);
    u_195_fu_230_p2 <= std_logic_vector(unsigned(u_02_fu_64) + unsigned(ap_const_lv63_1));

    vla1_address0_assign_proc : process(ap_CS_fsm_state2, vla1_addr_298_reg_507, ap_CS_fsm_state3, vla1_addr_300_reg_546, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state12, zext_ln515_1_fu_270_p1, zext_ln516_1_fu_347_p1, zext_ln517_1_fu_361_p1, zext_ln518_1_fu_375_p1, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            vla1_address0 <= vla1_addr_300_reg_546;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            vla1_address0 <= vla1_addr_298_reg_507;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            vla1_address0 <= zext_ln518_1_fu_375_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            vla1_address0 <= zext_ln517_1_fu_361_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            vla1_address0 <= zext_ln516_1_fu_347_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            vla1_address0 <= zext_ln515_1_fu_270_p1(12 - 1 downto 0);
        else 
            vla1_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    vla1_address1_assign_proc : process(vla1_addr_reg_501, ap_CS_fsm_state2, ap_CS_fsm_state3, vla1_addr_299_reg_540, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state12, zext_ln515_fu_259_p1, zext_ln516_fu_338_p1, zext_ln517_fu_352_p1, zext_ln518_fu_366_p1, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            vla1_address1 <= vla1_addr_299_reg_540;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            vla1_address1 <= vla1_addr_reg_501;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            vla1_address1 <= zext_ln518_fu_366_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            vla1_address1 <= zext_ln517_fu_352_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            vla1_address1 <= zext_ln516_fu_338_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            vla1_address1 <= zext_ln515_fu_259_p1(12 - 1 downto 0);
        else 
            vla1_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    vla1_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            vla1_ce0 <= ap_const_logic_1;
        else 
            vla1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    vla1_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            vla1_ce1 <= ap_const_logic_1;
        else 
            vla1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    vla1_d0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state13, bitcast_ln64_fu_430_p1, bitcast_ln65_fu_450_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            vla1_d0 <= bitcast_ln65_fu_450_p1(63 downto 32);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            vla1_d0 <= bitcast_ln64_fu_430_p1(63 downto 32);
        else 
            vla1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    vla1_d1_assign_proc : process(ap_CS_fsm_state12, trunc_ln64_fu_434_p1, ap_CS_fsm_state13, trunc_ln65_fu_453_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            vla1_d1 <= trunc_ln65_fu_453_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            vla1_d1 <= trunc_ln64_fu_434_p1;
        else 
            vla1_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    vla1_we0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            vla1_we0 <= ap_const_lv4_F;
        else 
            vla1_we0 <= ap_const_lv4_0;
        end if; 
    end process;


    vla1_we1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            vla1_we1 <= ap_const_lv4_F;
        else 
            vla1_we1 <= ap_const_lv4_0;
        end if; 
    end process;

    zext_ln509_fu_183_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(logn),64));
    zext_ln515_1_fu_270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln515_1_fu_264_p2),64));
    zext_ln515_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln24_fu_249_p4),64));
    zext_ln516_1_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln516_2_fu_342_p2),64));
    zext_ln516_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln516_2_reg_512),64));
    zext_ln517_1_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln517_1_fu_356_p2),64));
    zext_ln517_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln25_reg_518),64));
    zext_ln518_1_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln518_1_fu_370_p2),64));
    zext_ln518_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln26_reg_524),64));
end behav;
