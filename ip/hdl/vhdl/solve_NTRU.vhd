-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity solve_NTRU is
generic (
    C_M_AXI_GMEM0_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM0_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM0_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM0_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM0_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM0_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem0_AWREADY : IN STD_LOGIC;
    m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem0_WVALID : OUT STD_LOGIC;
    m_axi_gmem0_WREADY : IN STD_LOGIC;
    m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH-1 downto 0);
    m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem0_WLAST : OUT STD_LOGIC;
    m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_WUSER_WIDTH-1 downto 0);
    m_axi_gmem0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem0_ARREADY : IN STD_LOGIC;
    m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem0_RVALID : IN STD_LOGIC;
    m_axi_gmem0_RREADY : OUT STD_LOGIC;
    m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH-1 downto 0);
    m_axi_gmem0_RLAST : IN STD_LOGIC;
    m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_RUSER_WIDTH-1 downto 0);
    m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BVALID : IN STD_LOGIC;
    m_axi_gmem0_BREADY : OUT STD_LOGIC;
    m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_BUSER_WIDTH-1 downto 0);
    logn : IN STD_LOGIC_VECTOR (31 downto 0);
    lim : IN STD_LOGIC_VECTOR (31 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of solve_NTRU is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "solve_NTRU_solve_NTRU,hls_ip_2022_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xck26-sfvc784-2LV-c,HLS_INPUT_CLOCK=25.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=18.250000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=41,HLS_SYN_DSP=0,HLS_SYN_FF=54560,HLS_SYN_LUT=108341,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (111 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (111 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (111 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (111 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (111 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (111 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (111 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (111 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state111 : STD_LOGIC_VECTOR (111 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (111 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101001";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100010";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_63FB001 : STD_LOGIC_VECTOR (31 downto 0) := "00000110001111111011000000000001";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_647A5148 : STD_LOGIC_VECTOR (31 downto 0) := "01100100011110100101000101001000";
    constant ap_const_lv32_7FFFD801 : STD_LOGIC_VECTOR (31 downto 0) := "01111111111111111101100000000001";
    constant ap_const_lv32_79BFD7FF : STD_LOGIC_VECTOR (31 downto 0) := "01111001101111111101011111111111";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv64_800 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000";
    constant ap_const_lv64_1000 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000";
    constant ap_const_lv64_1800 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000001100000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2000 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_27FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010011111111111";
    constant ap_const_lv6_1E : STD_LOGIC_VECTOR (5 downto 0) := "011110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_FE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111110";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv32_7FFFD7FF : STD_LOGIC_VECTOR (31 downto 0) := "01111111111111111101011111111111";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_723F844C : STD_LOGIC_VECTOR (31 downto 0) := "01110010001111111000010001001100";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal F_upper : STD_LOGIC_VECTOR (63 downto 0);
    signal G_upper : STD_LOGIC_VECTOR (63 downto 0);
    signal f : STD_LOGIC_VECTOR (63 downto 0);
    signal g : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp2 : STD_LOGIC_VECTOR (63 downto 0);
    signal REV10_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal REV10_ce0 : STD_LOGIC;
    signal REV10_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem0_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal gmem0_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal gmem0_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state106 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state106 : signal is "none";
    signal ap_CS_fsm_state107 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state107 : signal is "none";
    signal ap_CS_fsm_state112 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state112 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal tmp_s_reg_1916 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_73_reg_1923 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal gmem0_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal gmem0_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal ap_CS_fsm_state99 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state99 : signal is "none";
    signal ap_CS_fsm_state100 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state100 : signal is "none";
    signal ap_CS_fsm_state105 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state105 : signal is "none";
    signal ap_CS_fsm_state92 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state92 : signal is "none";
    signal ap_CS_fsm_state93 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state93 : signal is "none";
    signal ap_CS_fsm_state98 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state98 : signal is "none";
    signal tmp_reg_1896 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_74_reg_1933 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln2462_reg_1964 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln2462_1_reg_2028 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4524_reg_2249 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_modp_montymul_fu_633_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_652 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal tmp_160_fu_1156_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal a_assign_9_reg_662 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state90 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state90 : signal is "none";
    signal tmp2_read_reg_1862 : STD_LOGIC_VECTOR (63 downto 0);
    signal g_read_reg_1868 : STD_LOGIC_VECTOR (63 downto 0);
    signal f_read_reg_1875 : STD_LOGIC_VECTOR (63 downto 0);
    signal G_upper_read_reg_1882 : STD_LOGIC_VECTOR (63 downto 0);
    signal F_upper_read_reg_1889 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_solve_NTRU_all_79_81_83_1_fu_739_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal trunc_ln2469_fu_837_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln2469_reg_1944 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln2462_fu_859_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2462_reg_1959 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal icmp_ln2462_fu_864_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal u_175_fu_870_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal u_175_reg_1968 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln2469_1_fu_876_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln2469_1_reg_1985 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln2469_2_fu_918_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln2469_2_reg_1994 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal icmp_ln2466_fu_912_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln2469_3_fu_922_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln2469_3_reg_1999 : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem0_addr_17_reg_2004 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln2469_fu_964_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln2469_reg_2010 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln2469_2_fu_982_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln2469_2_reg_2015 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln2462_1_fu_991_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2462_1_reg_2023 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal icmp_ln2462_1_fu_995_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal u_177_fu_1001_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal u_177_reg_2032 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln2469_4_fu_1068_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln2469_4_reg_2059 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal icmp_ln2466_1_fu_1062_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln2469_6_fu_1072_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln2469_6_reg_2064 : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem0_addr_18_reg_2069 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln2469_3_fu_1114_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln2469_3_reg_2075 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln2469_5_fu_1132_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln2469_5_reg_2080 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln808_fu_1152_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln808_reg_2091 : STD_LOGIC_VECTOR (31 downto 0);
    signal x1_load_reg_2123 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal icmp_ln962_fu_1233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln4509_fu_1306_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln4509_reg_2140 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal gmem0_addr_20_reg_2148 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln4509_fu_1310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln4510_1_fu_1351_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln4510_1_reg_2154 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln4513_fu_1361_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln4513_reg_2166 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln4514_fu_1364_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln4514_reg_2171 : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem0_addr_20_read_reg_2176 : STD_LOGIC_VECTOR (31 downto 0);
    signal u_182_reg_2181 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal gmem0_addr_21_reg_2191 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln4512_fu_1426_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_addr_22_reg_2197 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_23_reg_2203 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_21_read_reg_2216 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln4513_4_fu_1579_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln4513_4_reg_2221 : STD_LOGIC_VECTOR (8 downto 0);
    signal gmem0_addr_22_read_reg_2226 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln4514_1_fu_1595_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln4514_1_reg_2231 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln4515_1_fu_1600_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln4515_1_reg_2236 : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem0_addr_23_read_reg_2241 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln4524_fu_1733_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state89 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state89 : signal is "none";
    signal u_185_fu_1739_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal u_185_reg_2253 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln4527_fu_1745_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln4527_reg_2258 : STD_LOGIC_VECTOR (8 downto 0);
    signal gmem0_addr_25_reg_2286 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state91 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state91 : signal is "none";
    signal icmp_ln4529_fu_1816_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal vla1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal vla1_ce0 : STD_LOGIC;
    signal vla1_we0 : STD_LOGIC_VECTOR (3 downto 0);
    signal vla1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal vla1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal vla1_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal vla1_ce1 : STD_LOGIC;
    signal vla1_we1 : STD_LOGIC_VECTOR (3 downto 0);
    signal vla1_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal vla1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_modp_montymul_fu_633_ap_ready : STD_LOGIC;
    signal grp_modp_montymul_fu_633_a : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_modp_montymul_fu_633_b : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_modp_NTT2_ext_1_fu_687_ap_start : STD_LOGIC;
    signal grp_modp_NTT2_ext_1_fu_687_ap_done : STD_LOGIC;
    signal grp_modp_NTT2_ext_1_fu_687_ap_idle : STD_LOGIC;
    signal grp_modp_NTT2_ext_1_fu_687_ap_ready : STD_LOGIC;
    signal grp_modp_NTT2_ext_1_fu_687_vla1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_modp_NTT2_ext_1_fu_687_vla1_ce0 : STD_LOGIC;
    signal grp_modp_NTT2_ext_1_fu_687_vla1_we0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_modp_NTT2_ext_1_fu_687_vla1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_modp_NTT2_ext_1_fu_687_vla1_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_modp_NTT2_ext_1_fu_687_vla1_ce1 : STD_LOGIC;
    signal grp_modp_NTT2_ext_1_fu_687_vla1_we1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_modp_NTT2_ext_1_fu_687_vla1_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_modp_NTT2_ext_1_fu_687_a : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_solve_NTRU_all_79_81_83_1_fu_739_ap_start : STD_LOGIC;
    signal grp_solve_NTRU_all_79_81_83_1_fu_739_ap_done : STD_LOGIC;
    signal grp_solve_NTRU_all_79_81_83_1_fu_739_ap_idle : STD_LOGIC;
    signal grp_solve_NTRU_all_79_81_83_1_fu_739_ap_ready : STD_LOGIC;
    signal grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_AWVALID : STD_LOGIC;
    signal grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_WVALID : STD_LOGIC;
    signal grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_WLAST : STD_LOGIC;
    signal grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_ARVALID : STD_LOGIC;
    signal grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_RREADY : STD_LOGIC;
    signal grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_BREADY : STD_LOGIC;
    signal grp_solve_NTRU_all_79_81_83_1_fu_739_depth : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_solve_NTRU_all_79_81_83_1_fu_739_vla1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_solve_NTRU_all_79_81_83_1_fu_739_vla1_ce0 : STD_LOGIC;
    signal grp_solve_NTRU_all_79_81_83_1_fu_739_vla1_we0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_solve_NTRU_all_79_81_83_1_fu_739_vla1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_solve_NTRU_all_79_81_83_1_fu_739_vla1_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_solve_NTRU_all_79_81_83_1_fu_739_vla1_ce1 : STD_LOGIC;
    signal grp_solve_NTRU_all_79_81_83_1_fu_739_vla1_we1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_solve_NTRU_all_79_81_83_1_fu_739_vla1_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem0_AWVALID : STD_LOGIC;
    signal gmem0_AWREADY : STD_LOGIC;
    signal gmem0_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem0_WVALID : STD_LOGIC;
    signal gmem0_WREADY : STD_LOGIC;
    signal gmem0_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem0_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem0_ARVALID : STD_LOGIC;
    signal gmem0_ARREADY : STD_LOGIC;
    signal gmem0_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem0_RVALID : STD_LOGIC;
    signal gmem0_RREADY : STD_LOGIC;
    signal gmem0_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem0_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal gmem0_BVALID : STD_LOGIC;
    signal gmem0_BREADY : STD_LOGIC;
    signal ap_phi_mux_retval_5_phi_fu_616_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal retval_5_reg_611 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op542_writeresp_state98 : BOOLEAN;
    signal ap_block_state98 : BOOLEAN;
    signal ap_predicate_op198_writeresp_state29 : BOOLEAN;
    signal ap_block_state29 : BOOLEAN;
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal grp_modp_NTT2_ext_1_fu_687_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal grp_solve_NTRU_all_79_81_83_1_fu_739_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal zext_ln2387_fu_1019_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln966_fu_1255_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln967_fu_1293_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln966_1_fu_1280_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal zext_ln4513_2_fu_1590_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln4514_2_fu_1659_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln4515_1_fu_1720_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal zext_ln4527_fu_1757_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln4524_fu_1728_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln4528_fu_1769_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln4528_1_fu_1783_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln4432_fu_796_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln4462_fu_826_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln4466_fu_845_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln2469_fu_939_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln2469_1_fu_1089_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln4487_fu_1138_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln4510_fu_1341_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln4513_fu_1453_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln4514_fu_1478_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln4515_fu_1503_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln4530_fu_1826_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln4534_fu_1840_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln4457_fu_1851_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal depth_fu_240 : STD_LOGIC_VECTOR (31 downto 0);
    signal depth_3_fu_811_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln4455_fu_816_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal u_fu_244 : STD_LOGIC_VECTOR (9 downto 0);
    signal u_103_fu_248 : STD_LOGIC_VECTOR (9 downto 0);
    signal z_47_fu_252 : STD_LOGIC_VECTOR (31 downto 0);
    signal z_64_fu_1219_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_256 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_9_fu_1164_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal u_105_fu_260 : STD_LOGIC_VECTOR (9 downto 0);
    signal u_179_fu_1239_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal x1_fu_264 : STD_LOGIC_VECTOR (31 downto 0);
    signal x2_fu_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal u_021_fu_272 : STD_LOGIC_VECTOR (9 downto 0);
    signal u_181_fu_1316_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal u_108_fu_276 : STD_LOGIC_VECTOR (9 downto 0);
    signal u_183_fu_1432_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal u_110_fu_280 : STD_LOGIC_VECTOR (9 downto 0);
    signal w_43_fu_1412_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_45_fu_1572_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_47_fu_1645_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_49_fu_1704_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_777_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_158_fu_884_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln_fu_892_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_50_fu_900_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln2466_fu_906_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln2469_fu_925_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln2469_5_fu_929_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln2469_2_fu_956_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln2469_1_fu_960_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln2469_1_fu_970_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln2469_fu_953_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln2469_2_fu_978_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln2465_fu_1007_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln_fu_1011_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_159_fu_1034_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln2388_2_fu_1042_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_51_fu_1050_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln2466_1_fu_1056_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln2469_1_fu_1075_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln2469_7_fu_1079_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln2469_3_fu_1106_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln2469_4_fu_1110_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln2469_4_fu_1120_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln2469_3_fu_1103_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln2469_5_fu_1128_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln808_fu_1152_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_160_fu_1156_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_9_fu_1164_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal lshr_ln813_fu_1196_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln813_fu_1201_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln813_fu_1190_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln813_fu_1205_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln813_fu_1213_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln966_fu_1249_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln967_cast_fu_1285_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln4510_fu_1326_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln4510_2_fu_1331_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal trunc_ln4510_fu_1322_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln_fu_1372_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln4510_fu_1379_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln4510_fu_1383_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_42_fu_1388_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_161_fu_1396_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln635_fu_1404_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln4510_1_fu_1392_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln4512_fu_1422_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln4513_fu_1438_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln4513_3_fu_1443_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln4514_fu_1463_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln4514_2_fu_1468_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln4515_fu_1488_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln19_fu_1493_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal trunc_ln4513_1_fu_1523_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln4513_1_fu_1526_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln53_fu_1531_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln4513_fu_1539_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln4513_fu_1543_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_44_fu_1548_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_162_fu_1556_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln635_15_fu_1564_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln4513_1_fu_1552_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln4513_1_fu_1582_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln54_fu_1605_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln4514_fu_1612_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln4514_fu_1616_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_46_fu_1621_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_163_fu_1629_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln635_16_fu_1637_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln4514_1_fu_1625_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln4514_1_fu_1652_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln55_fu_1664_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln4515_fu_1671_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln4515_fu_1675_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_48_fu_1680_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_164_fu_1688_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln635_17_fu_1696_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln4515_1_fu_1684_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln4515_fu_1711_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln4515_2_fu_1716_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln41_fu_1749_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln42_fu_1762_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln4528_fu_1774_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln4528_fu_1779_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln697_fu_1788_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_165_fu_1794_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln697_fu_1802_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal z_65_fu_1810_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (111 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ST_fsm_state61_blk : STD_LOGIC;
    signal ap_ST_fsm_state62_blk : STD_LOGIC;
    signal ap_ST_fsm_state63_blk : STD_LOGIC;
    signal ap_ST_fsm_state64_blk : STD_LOGIC;
    signal ap_ST_fsm_state65_blk : STD_LOGIC;
    signal ap_ST_fsm_state66_blk : STD_LOGIC;
    signal ap_ST_fsm_state67_blk : STD_LOGIC;
    signal ap_ST_fsm_state68_blk : STD_LOGIC;
    signal ap_ST_fsm_state69_blk : STD_LOGIC;
    signal ap_ST_fsm_state70_blk : STD_LOGIC;
    signal ap_ST_fsm_state71_blk : STD_LOGIC;
    signal ap_ST_fsm_state72_blk : STD_LOGIC;
    signal ap_ST_fsm_state73_blk : STD_LOGIC;
    signal ap_ST_fsm_state74_blk : STD_LOGIC;
    signal ap_ST_fsm_state75_blk : STD_LOGIC;
    signal ap_ST_fsm_state76_blk : STD_LOGIC;
    signal ap_ST_fsm_state77_blk : STD_LOGIC;
    signal ap_ST_fsm_state78_blk : STD_LOGIC;
    signal ap_ST_fsm_state79_blk : STD_LOGIC;
    signal ap_ST_fsm_state80_blk : STD_LOGIC;
    signal ap_ST_fsm_state81_blk : STD_LOGIC;
    signal ap_ST_fsm_state82_blk : STD_LOGIC;
    signal ap_ST_fsm_state83_blk : STD_LOGIC;
    signal ap_ST_fsm_state84_blk : STD_LOGIC;
    signal ap_ST_fsm_state85_blk : STD_LOGIC;
    signal ap_ST_fsm_state86_blk : STD_LOGIC;
    signal ap_ST_fsm_state87_blk : STD_LOGIC;
    signal ap_ST_fsm_state88_blk : STD_LOGIC;
    signal ap_ST_fsm_state89_blk : STD_LOGIC;
    signal ap_ST_fsm_state90_blk : STD_LOGIC;
    signal ap_ST_fsm_state91_blk : STD_LOGIC;
    signal ap_ST_fsm_state92_blk : STD_LOGIC;
    signal ap_ST_fsm_state93_blk : STD_LOGIC;
    signal ap_ST_fsm_state94_blk : STD_LOGIC;
    signal ap_ST_fsm_state95_blk : STD_LOGIC;
    signal ap_ST_fsm_state96_blk : STD_LOGIC;
    signal ap_ST_fsm_state97_blk : STD_LOGIC;
    signal ap_ST_fsm_state98_blk : STD_LOGIC;
    signal ap_ST_fsm_state99_blk : STD_LOGIC;
    signal ap_ST_fsm_state100_blk : STD_LOGIC;
    signal ap_ST_fsm_state101_blk : STD_LOGIC;
    signal ap_ST_fsm_state102_blk : STD_LOGIC;
    signal ap_ST_fsm_state103_blk : STD_LOGIC;
    signal ap_ST_fsm_state104_blk : STD_LOGIC;
    signal ap_ST_fsm_state105_blk : STD_LOGIC;
    signal ap_ST_fsm_state106_blk : STD_LOGIC;
    signal ap_ST_fsm_state107_blk : STD_LOGIC;
    signal ap_ST_fsm_state108_blk : STD_LOGIC;
    signal ap_ST_fsm_state109_blk : STD_LOGIC;
    signal ap_ST_fsm_state110_blk : STD_LOGIC;
    signal ap_ST_fsm_state111_blk : STD_LOGIC;
    signal ap_ST_fsm_state112_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component solve_NTRU_modp_montymul IS
    port (
        ap_ready : OUT STD_LOGIC;
        a : IN STD_LOGIC_VECTOR (31 downto 0);
        b : IN STD_LOGIC_VECTOR (31 downto 0);
        p : IN STD_LOGIC_VECTOR (31 downto 0);
        p0i : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component solve_NTRU_modp_NTT2_ext_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        vla1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        vla1_ce0 : OUT STD_LOGIC;
        vla1_we0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        vla1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        vla1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        vla1_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        vla1_ce1 : OUT STD_LOGIC;
        vla1_we1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        vla1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        vla1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        a : IN STD_LOGIC_VECTOR (63 downto 0);
        stride : IN STD_LOGIC_VECTOR (63 downto 0);
        gm : IN STD_LOGIC_VECTOR (63 downto 0);
        logn : IN STD_LOGIC_VECTOR (31 downto 0);
        p : IN STD_LOGIC_VECTOR (31 downto 0);
        p0i : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component solve_NTRU_solve_NTRU_all_79_81_83_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem0_AWVALID : OUT STD_LOGIC;
        m_axi_gmem0_AWREADY : IN STD_LOGIC;
        m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_WVALID : OUT STD_LOGIC;
        m_axi_gmem0_WREADY : IN STD_LOGIC;
        m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_WLAST : OUT STD_LOGIC;
        m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_ARVALID : OUT STD_LOGIC;
        m_axi_gmem0_ARREADY : IN STD_LOGIC;
        m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RVALID : IN STD_LOGIC;
        m_axi_gmem0_RREADY : OUT STD_LOGIC;
        m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_RLAST : IN STD_LOGIC;
        m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_BVALID : IN STD_LOGIC;
        m_axi_gmem0_BREADY : OUT STD_LOGIC;
        m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        f : IN STD_LOGIC_VECTOR (63 downto 0);
        g : IN STD_LOGIC_VECTOR (63 downto 0);
        depth : IN STD_LOGIC_VECTOR (31 downto 0);
        vla1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        vla1_ce0 : OUT STD_LOGIC;
        vla1_we0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        vla1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        vla1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        vla1_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        vla1_ce1 : OUT STD_LOGIC;
        vla1_we1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        vla1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        vla1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        tmp2 : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component solve_NTRU_modp_mkgm2_1_REV10_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component solve_NTRU_vla1_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC_VECTOR (3 downto 0);
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC_VECTOR (3 downto 0);
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component solve_NTRU_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_return : IN STD_LOGIC_VECTOR (31 downto 0);
        F_upper : OUT STD_LOGIC_VECTOR (63 downto 0);
        G_upper : OUT STD_LOGIC_VECTOR (63 downto 0);
        f : OUT STD_LOGIC_VECTOR (63 downto 0);
        g : OUT STD_LOGIC_VECTOR (63 downto 0);
        tmp2 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component solve_NTRU_gmem0_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;



begin
    REV10_U : component solve_NTRU_modp_mkgm2_1_REV10_ROM_AUTO_1R
    generic map (
        DataWidth => 10,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => REV10_address0,
        ce0 => REV10_ce0,
        q0 => REV10_q0);

    vla1_U : component solve_NTRU_vla1_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 3584,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => vla1_address0,
        ce0 => vla1_ce0,
        we0 => vla1_we0,
        d0 => vla1_d0,
        q0 => vla1_q0,
        address1 => vla1_address1,
        ce1 => vla1_ce1,
        we1 => vla1_we1,
        d1 => vla1_d1,
        q1 => vla1_q1);

    grp_modp_montymul_fu_633 : component solve_NTRU_modp_montymul
    port map (
        ap_ready => grp_modp_montymul_fu_633_ap_ready,
        a => grp_modp_montymul_fu_633_a,
        b => grp_modp_montymul_fu_633_b,
        p => ap_const_lv32_7FFFD801,
        p0i => ap_const_lv32_79BFD7FF,
        ap_return => grp_modp_montymul_fu_633_ap_return);

    grp_modp_NTT2_ext_1_fu_687 : component solve_NTRU_modp_NTT2_ext_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_modp_NTT2_ext_1_fu_687_ap_start,
        ap_done => grp_modp_NTT2_ext_1_fu_687_ap_done,
        ap_idle => grp_modp_NTT2_ext_1_fu_687_ap_idle,
        ap_ready => grp_modp_NTT2_ext_1_fu_687_ap_ready,
        vla1_address0 => grp_modp_NTT2_ext_1_fu_687_vla1_address0,
        vla1_ce0 => grp_modp_NTT2_ext_1_fu_687_vla1_ce0,
        vla1_we0 => grp_modp_NTT2_ext_1_fu_687_vla1_we0,
        vla1_d0 => grp_modp_NTT2_ext_1_fu_687_vla1_d0,
        vla1_q0 => vla1_q0,
        vla1_address1 => grp_modp_NTT2_ext_1_fu_687_vla1_address1,
        vla1_ce1 => grp_modp_NTT2_ext_1_fu_687_vla1_ce1,
        vla1_we1 => grp_modp_NTT2_ext_1_fu_687_vla1_we1,
        vla1_d1 => grp_modp_NTT2_ext_1_fu_687_vla1_d1,
        vla1_q1 => vla1_q1,
        a => grp_modp_NTT2_ext_1_fu_687_a,
        stride => ap_const_lv64_1,
        gm => ap_const_lv64_2000,
        logn => ap_const_lv32_9,
        p => ap_const_lv32_7FFFD801,
        p0i => ap_const_lv32_79BFD7FF);

    grp_solve_NTRU_all_79_81_83_1_fu_739 : component solve_NTRU_solve_NTRU_all_79_81_83_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_solve_NTRU_all_79_81_83_1_fu_739_ap_start,
        ap_done => grp_solve_NTRU_all_79_81_83_1_fu_739_ap_done,
        ap_idle => grp_solve_NTRU_all_79_81_83_1_fu_739_ap_idle,
        ap_ready => grp_solve_NTRU_all_79_81_83_1_fu_739_ap_ready,
        m_axi_gmem0_AWVALID => grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_AWVALID,
        m_axi_gmem0_AWREADY => gmem0_AWREADY,
        m_axi_gmem0_AWADDR => grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_AWADDR,
        m_axi_gmem0_AWID => grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_AWID,
        m_axi_gmem0_AWLEN => grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_AWLEN,
        m_axi_gmem0_AWSIZE => grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_AWSIZE,
        m_axi_gmem0_AWBURST => grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_AWBURST,
        m_axi_gmem0_AWLOCK => grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_AWLOCK,
        m_axi_gmem0_AWCACHE => grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_AWCACHE,
        m_axi_gmem0_AWPROT => grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_AWPROT,
        m_axi_gmem0_AWQOS => grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_AWQOS,
        m_axi_gmem0_AWREGION => grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_AWREGION,
        m_axi_gmem0_AWUSER => grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_AWUSER,
        m_axi_gmem0_WVALID => grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_WVALID,
        m_axi_gmem0_WREADY => gmem0_WREADY,
        m_axi_gmem0_WDATA => grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_WDATA,
        m_axi_gmem0_WSTRB => grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_WSTRB,
        m_axi_gmem0_WLAST => grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_WLAST,
        m_axi_gmem0_WID => grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_WID,
        m_axi_gmem0_WUSER => grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_WUSER,
        m_axi_gmem0_ARVALID => grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_ARVALID,
        m_axi_gmem0_ARREADY => gmem0_ARREADY,
        m_axi_gmem0_ARADDR => grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_ARADDR,
        m_axi_gmem0_ARID => grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_ARID,
        m_axi_gmem0_ARLEN => grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_ARLEN,
        m_axi_gmem0_ARSIZE => grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_ARSIZE,
        m_axi_gmem0_ARBURST => grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_ARBURST,
        m_axi_gmem0_ARLOCK => grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_ARLOCK,
        m_axi_gmem0_ARCACHE => grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_ARCACHE,
        m_axi_gmem0_ARPROT => grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_ARPROT,
        m_axi_gmem0_ARQOS => grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_ARQOS,
        m_axi_gmem0_ARREGION => grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_ARREGION,
        m_axi_gmem0_ARUSER => grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_ARUSER,
        m_axi_gmem0_RVALID => gmem0_RVALID,
        m_axi_gmem0_RREADY => grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_RREADY,
        m_axi_gmem0_RDATA => gmem0_RDATA,
        m_axi_gmem0_RLAST => ap_const_logic_0,
        m_axi_gmem0_RID => ap_const_lv1_0,
        m_axi_gmem0_RFIFONUM => gmem0_RFIFONUM,
        m_axi_gmem0_RUSER => ap_const_lv1_0,
        m_axi_gmem0_RRESP => ap_const_lv2_0,
        m_axi_gmem0_BVALID => gmem0_BVALID,
        m_axi_gmem0_BREADY => grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_BREADY,
        m_axi_gmem0_BRESP => ap_const_lv2_0,
        m_axi_gmem0_BID => ap_const_lv1_0,
        m_axi_gmem0_BUSER => ap_const_lv1_0,
        f => f_read_reg_1875,
        g => g_read_reg_1868,
        depth => grp_solve_NTRU_all_79_81_83_1_fu_739_depth,
        vla1_address0 => grp_solve_NTRU_all_79_81_83_1_fu_739_vla1_address0,
        vla1_ce0 => grp_solve_NTRU_all_79_81_83_1_fu_739_vla1_ce0,
        vla1_we0 => grp_solve_NTRU_all_79_81_83_1_fu_739_vla1_we0,
        vla1_d0 => grp_solve_NTRU_all_79_81_83_1_fu_739_vla1_d0,
        vla1_q0 => vla1_q0,
        vla1_address1 => grp_solve_NTRU_all_79_81_83_1_fu_739_vla1_address1,
        vla1_ce1 => grp_solve_NTRU_all_79_81_83_1_fu_739_vla1_ce1,
        vla1_we1 => grp_solve_NTRU_all_79_81_83_1_fu_739_vla1_we1,
        vla1_d1 => grp_solve_NTRU_all_79_81_83_1_fu_739_vla1_d1,
        vla1_q1 => vla1_q1,
        tmp2 => tmp2_read_reg_1862,
        ap_return => grp_solve_NTRU_all_79_81_83_1_fu_739_ap_return);

    control_s_axi_U : component solve_NTRU_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_return => ap_return,
        F_upper => F_upper,
        G_upper => G_upper,
        f => f,
        g => g,
        tmp2 => tmp2);

    gmem0_m_axi_U : component solve_NTRU_gmem0_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        USER_RFIFONUM_WIDTH => 9,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM0_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM0_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM0_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM0_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM0_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM0_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM0_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM0_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM0_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM0_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM0_CACHE_VALUE,
        USER_DW => 32,
        USER_AW => 64)
    port map (
        AWVALID => m_axi_gmem0_AWVALID,
        AWREADY => m_axi_gmem0_AWREADY,
        AWADDR => m_axi_gmem0_AWADDR,
        AWID => m_axi_gmem0_AWID,
        AWLEN => m_axi_gmem0_AWLEN,
        AWSIZE => m_axi_gmem0_AWSIZE,
        AWBURST => m_axi_gmem0_AWBURST,
        AWLOCK => m_axi_gmem0_AWLOCK,
        AWCACHE => m_axi_gmem0_AWCACHE,
        AWPROT => m_axi_gmem0_AWPROT,
        AWQOS => m_axi_gmem0_AWQOS,
        AWREGION => m_axi_gmem0_AWREGION,
        AWUSER => m_axi_gmem0_AWUSER,
        WVALID => m_axi_gmem0_WVALID,
        WREADY => m_axi_gmem0_WREADY,
        WDATA => m_axi_gmem0_WDATA,
        WSTRB => m_axi_gmem0_WSTRB,
        WLAST => m_axi_gmem0_WLAST,
        WID => m_axi_gmem0_WID,
        WUSER => m_axi_gmem0_WUSER,
        ARVALID => m_axi_gmem0_ARVALID,
        ARREADY => m_axi_gmem0_ARREADY,
        ARADDR => m_axi_gmem0_ARADDR,
        ARID => m_axi_gmem0_ARID,
        ARLEN => m_axi_gmem0_ARLEN,
        ARSIZE => m_axi_gmem0_ARSIZE,
        ARBURST => m_axi_gmem0_ARBURST,
        ARLOCK => m_axi_gmem0_ARLOCK,
        ARCACHE => m_axi_gmem0_ARCACHE,
        ARPROT => m_axi_gmem0_ARPROT,
        ARQOS => m_axi_gmem0_ARQOS,
        ARREGION => m_axi_gmem0_ARREGION,
        ARUSER => m_axi_gmem0_ARUSER,
        RVALID => m_axi_gmem0_RVALID,
        RREADY => m_axi_gmem0_RREADY,
        RDATA => m_axi_gmem0_RDATA,
        RLAST => m_axi_gmem0_RLAST,
        RID => m_axi_gmem0_RID,
        RUSER => m_axi_gmem0_RUSER,
        RRESP => m_axi_gmem0_RRESP,
        BVALID => m_axi_gmem0_BVALID,
        BREADY => m_axi_gmem0_BREADY,
        BRESP => m_axi_gmem0_BRESP,
        BID => m_axi_gmem0_BID,
        BUSER => m_axi_gmem0_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem0_ARVALID,
        I_ARREADY => gmem0_ARREADY,
        I_ARADDR => gmem0_ARADDR,
        I_ARLEN => gmem0_ARLEN,
        I_RVALID => gmem0_RVALID,
        I_RREADY => gmem0_RREADY,
        I_RDATA => gmem0_RDATA,
        I_RFIFONUM => gmem0_RFIFONUM,
        I_AWVALID => gmem0_AWVALID,
        I_AWREADY => gmem0_AWREADY,
        I_AWADDR => gmem0_AWADDR,
        I_AWLEN => gmem0_AWLEN,
        I_WVALID => gmem0_WVALID,
        I_WREADY => gmem0_WREADY,
        I_WDATA => gmem0_WDATA,
        I_WSTRB => gmem0_WSTRB,
        I_BVALID => gmem0_BVALID,
        I_BREADY => gmem0_BREADY);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_modp_NTT2_ext_1_fu_687_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_modp_NTT2_ext_1_fu_687_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state83) or ((icmp_ln4512_fu_1426_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state70)))) then 
                    grp_modp_NTT2_ext_1_fu_687_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_modp_NTT2_ext_1_fu_687_ap_ready = ap_const_logic_1)) then 
                    grp_modp_NTT2_ext_1_fu_687_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_solve_NTRU_all_79_81_83_1_fu_739_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_solve_NTRU_all_79_81_83_1_fu_739_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
                    grp_solve_NTRU_all_79_81_83_1_fu_739_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_solve_NTRU_all_79_81_83_1_fu_739_ap_ready = ap_const_logic_1)) then 
                    grp_solve_NTRU_all_79_81_83_1_fu_739_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    depth_fu_240_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_solve_NTRU_all_79_81_83_1_fu_739_ap_done = ap_const_logic_1) and (grp_solve_NTRU_all_79_81_83_1_fu_739_ap_return = ap_const_lv1_1))) then
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    depth_fu_240 <= ap_const_lv32_8;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln4455_fu_816_p2 = ap_const_lv1_1))) then 
                    depth_fu_240 <= depth_3_fu_811_p2;
                end if;
            end if; 
        end if;
    end process;

    i_fu_256_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln2462_1_fu_995_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then 
                i_fu_256 <= ap_const_lv6_1E;
            elsif (((tmp_160_fu_1156_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state55))) then 
                i_fu_256 <= i_9_fu_1164_p2;
            end if; 
        end if;
    end process;

    retval_5_reg_611_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gmem0_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state105))) then 
                retval_5_reg_611 <= ap_const_lv1_1;
            elsif (((not(((ap_predicate_op198_writeresp_state29 = ap_const_boolean_1) and (gmem0_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state29)) or (not(((ap_predicate_op542_writeresp_state98 = ap_const_boolean_1) and (gmem0_BVALID = ap_const_logic_0))) and (icmp_ln4524_reg_2249 = ap_const_lv1_0) and (icmp_ln2462_1_reg_2028 = ap_const_lv1_1) and (icmp_ln2462_reg_1964 = ap_const_lv1_1) and (tmp_74_reg_1933 = ap_const_lv1_1) and (tmp_reg_1896 = ap_const_lv1_1) and (tmp_73_reg_1923 = ap_const_lv1_1) and (tmp_s_reg_1916 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state98)) or ((gmem0_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state54)) or ((gmem0_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
                retval_5_reg_611 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    u_021_fu_272_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln962_fu_1233_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state58))) then 
                u_021_fu_272 <= ap_const_lv10_0;
            elsif (((icmp_ln4509_fu_1310_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state60))) then 
                u_021_fu_272 <= u_181_fu_1316_p2;
            end if; 
        end if;
    end process;

    u_103_fu_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln2462_fu_864_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
                u_103_fu_248 <= ap_const_lv10_0;
            elsif (((icmp_ln2466_1_fu_1062_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
                u_103_fu_248 <= u_177_reg_2032;
            end if; 
        end if;
    end process;

    u_105_fu_260_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_160_fu_1156_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state55))) then 
                u_105_fu_260 <= ap_const_lv10_0;
            elsif (((icmp_ln962_fu_1233_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state58))) then 
                u_105_fu_260 <= u_179_fu_1239_p2;
            end if; 
        end if;
    end process;

    u_108_fu_276_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln4509_fu_1310_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state60))) then 
                u_108_fu_276 <= ap_const_lv10_0;
            elsif (((icmp_ln4512_fu_1426_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state70))) then 
                u_108_fu_276 <= u_183_fu_1432_p2;
            end if; 
        end if;
    end process;

    u_110_fu_280_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln4512_fu_1426_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state70))) then 
                u_110_fu_280 <= ap_const_lv10_0;
            elsif (((icmp_ln4529_fu_1816_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state91))) then 
                u_110_fu_280 <= u_185_reg_2253;
            end if; 
        end if;
    end process;

    u_fu_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_solve_NTRU_all_79_81_83_1_fu_739_ap_done = ap_const_logic_1) and (grp_solve_NTRU_all_79_81_83_1_fu_739_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                u_fu_244 <= ap_const_lv10_0;
            elsif (((icmp_ln2466_fu_912_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
                u_fu_244 <= u_175_reg_1968;
            end if; 
        end if;
    end process;

    x1_fu_264_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_160_fu_1156_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state55))) then 
                x1_fu_264 <= ap_const_lv32_27FF;
            elsif (((icmp_ln962_fu_1233_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state58))) then 
                x1_fu_264 <= grp_modp_montymul_fu_633_ap_return;
            end if; 
        end if;
    end process;

    x2_fu_268_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_160_fu_1156_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state55))) then 
                x2_fu_268 <= ap_const_lv32_27FF;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
                x2_fu_268 <= grp_modp_montymul_fu_633_ap_return;
            end if; 
        end if;
    end process;

    z_47_fu_252_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln2462_1_fu_995_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then 
                z_47_fu_252 <= ap_const_lv32_27FF;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
                z_47_fu_252 <= z_64_fu_1219_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                F_upper_read_reg_1889 <= F_upper;
                G_upper_read_reg_1882 <= G_upper;
                f_read_reg_1875 <= f;
                g_read_reg_1868 <= g;
                tmp2_read_reg_1862 <= tmp2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state90)) then
                a_assign_9_reg_662 <= grp_modp_montymul_fu_633_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln4509_fu_1310_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state60))) then
                add_ln4510_1_reg_2154 <= add_ln4510_1_fu_1351_p2;
                gmem0_addr_20_reg_2148 <= sext_ln4510_fu_1341_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state79)) then
                add_ln4514_1_reg_2231 <= add_ln4514_1_fu_1595_p2;
                add_ln4515_1_reg_2236 <= add_ln4515_1_fu_1600_p2;
                gmem0_addr_22_read_reg_2226 <= gmem0_RDATA;
                trunc_ln4513_4_reg_2221 <= trunc_ln4513_4_fu_1579_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln2466_fu_912_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                gmem0_addr_17_reg_2004 <= sext_ln2469_fu_939_p1;
                trunc_ln2469_2_reg_1994 <= trunc_ln2469_2_fu_918_p1;
                trunc_ln2469_3_reg_1999 <= trunc_ln2469_3_fu_922_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln2466_1_fu_1062_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state40))) then
                gmem0_addr_18_reg_2069 <= sext_ln2469_1_fu_1089_p1;
                trunc_ln2469_4_reg_2059 <= trunc_ln2469_4_fu_1068_p1;
                trunc_ln2469_6_reg_2064 <= trunc_ln2469_6_fu_1072_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state68)) then
                gmem0_addr_20_read_reg_2176 <= gmem0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state78)) then
                gmem0_addr_21_read_reg_2216 <= gmem0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln4512_fu_1426_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state70))) then
                gmem0_addr_21_reg_2191 <= sext_ln4513_fu_1453_p1;
                gmem0_addr_22_reg_2197 <= sext_ln4514_fu_1478_p1;
                gmem0_addr_23_reg_2203 <= sext_ln4515_fu_1503_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state80)) then
                gmem0_addr_23_read_reg_2241 <= gmem0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln4529_fu_1816_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state91))) then
                gmem0_addr_25_reg_2286 <= sext_ln4530_fu_1826_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
                icmp_ln2462_1_reg_2028 <= icmp_ln2462_1_fu_995_p2;
                u_177_reg_2032 <= u_177_fu_1001_p2;
                    zext_ln2462_1_reg_2023(9 downto 0) <= zext_ln2462_1_fu_991_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                icmp_ln2462_reg_1964 <= icmp_ln2462_fu_864_p2;
                u_175_reg_1968 <= u_175_fu_870_p2;
                    zext_ln2462_reg_1959(9 downto 0) <= zext_ln2462_fu_859_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state89)) then
                icmp_ln4524_reg_2249 <= icmp_ln4524_fu_1733_p2;
                u_185_reg_2253 <= u_185_fu_1739_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state57) or ((tmp_160_fu_1156_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state55)) or ((tmp_160_fu_1156_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state55)))) then
                reg_652 <= grp_modp_montymul_fu_633_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state55)) then
                sext_ln808_reg_2091 <= sext_ln808_fu_1152_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                shl_ln2469_2_reg_2015 <= shl_ln2469_2_fu_982_p2;
                shl_ln2469_reg_2010 <= shl_ln2469_fu_964_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                shl_ln2469_3_reg_2075 <= shl_ln2469_3_fu_1114_p2;
                shl_ln2469_5_reg_2080 <= shl_ln2469_5_fu_1132_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                tmp_73_reg_1923 <= grp_solve_NTRU_all_79_81_83_1_fu_739_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                tmp_74_reg_1933 <= grp_solve_NTRU_all_79_81_83_1_fu_739_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                tmp_reg_1896 <= grp_solve_NTRU_all_79_81_83_1_fu_739_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                tmp_s_reg_1916 <= grp_solve_NTRU_all_79_81_83_1_fu_739_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln2462_fu_864_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                trunc_ln2469_1_reg_1985 <= trunc_ln2469_1_fu_876_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_solve_NTRU_all_79_81_83_1_fu_739_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                trunc_ln2469_reg_1944 <= trunc_ln2469_fu_837_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln4509_fu_1310_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state60))) then
                trunc_ln4513_reg_2166 <= trunc_ln4513_fu_1361_p1;
                trunc_ln4514_reg_2171 <= trunc_ln4514_fu_1364_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln4524_fu_1733_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state89))) then
                trunc_ln4527_reg_2258 <= trunc_ln4527_fu_1745_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state70)) then
                u_182_reg_2181 <= u_108_fu_276;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln962_fu_1233_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state58))) then
                x1_load_reg_2123 <= x1_fu_264;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state60)) then
                    zext_ln4509_reg_2140(9 downto 0) <= zext_ln4509_fu_1306_p1(9 downto 0);
            end if;
        end if;
    end process;
    zext_ln2462_reg_1959(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln2462_1_reg_2023(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln4509_reg_2140(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state106, ap_CS_fsm_state107, ap_CS_fsm_state112, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state20, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state29, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state38, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state54, ap_CS_fsm_state61, ap_CS_fsm_state68, ap_CS_fsm_state71, ap_CS_fsm_state78, ap_CS_fsm_state72, ap_CS_fsm_state79, ap_CS_fsm_state73, ap_CS_fsm_state80, ap_CS_fsm_state99, ap_CS_fsm_state100, ap_CS_fsm_state105, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state98, ap_CS_fsm_state55, tmp_160_fu_1156_p3, grp_solve_NTRU_all_79_81_83_1_fu_739_ap_return, ap_CS_fsm_state2, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state22, ap_CS_fsm_state30, icmp_ln2462_fu_864_p2, ap_CS_fsm_state31, icmp_ln2466_fu_912_p2, ap_CS_fsm_state39, icmp_ln2462_1_fu_995_p2, ap_CS_fsm_state40, icmp_ln2466_1_fu_1062_p2, ap_CS_fsm_state58, icmp_ln962_fu_1233_p2, ap_CS_fsm_state60, icmp_ln4509_fu_1310_p2, ap_CS_fsm_state70, icmp_ln4512_fu_1426_p2, icmp_ln4524_fu_1733_p2, ap_CS_fsm_state89, ap_CS_fsm_state91, icmp_ln4529_fu_1816_p2, grp_modp_NTT2_ext_1_fu_687_ap_done, grp_solve_NTRU_all_79_81_83_1_fu_739_ap_done, gmem0_AWREADY, gmem0_WREADY, gmem0_ARREADY, gmem0_RVALID, gmem0_BVALID, ap_predicate_op542_writeresp_state98, ap_predicate_op198_writeresp_state29, ap_CS_fsm_state82, ap_CS_fsm_state84, ap_CS_fsm_state86, ap_CS_fsm_state88, icmp_ln4455_fu_816_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_solve_NTRU_all_79_81_83_1_fu_739_ap_done = ap_const_logic_1) and (grp_solve_NTRU_all_79_81_83_1_fu_739_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                elsif (((grp_solve_NTRU_all_79_81_83_1_fu_739_ap_done = ap_const_logic_1) and (grp_solve_NTRU_all_79_81_83_1_fu_739_ap_return = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((gmem0_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((gmem0_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((gmem0_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state98;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((grp_solve_NTRU_all_79_81_83_1_fu_739_ap_done = ap_const_logic_1) and (grp_solve_NTRU_all_79_81_83_1_fu_739_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln4455_fu_816_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                elsif (((grp_solve_NTRU_all_79_81_83_1_fu_739_ap_done = ap_const_logic_1) and (grp_solve_NTRU_all_79_81_83_1_fu_739_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln4455_fu_816_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                elsif (((grp_solve_NTRU_all_79_81_83_1_fu_739_ap_done = ap_const_logic_1) and (grp_solve_NTRU_all_79_81_83_1_fu_739_ap_return = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state106;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((grp_solve_NTRU_all_79_81_83_1_fu_739_ap_done = ap_const_logic_1) and (grp_solve_NTRU_all_79_81_83_1_fu_739_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                elsif (((grp_solve_NTRU_all_79_81_83_1_fu_739_ap_done = ap_const_logic_1) and (grp_solve_NTRU_all_79_81_83_1_fu_739_ap_return = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((gmem0_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if (((gmem0_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((gmem0_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                if (((grp_solve_NTRU_all_79_81_83_1_fu_739_ap_done = ap_const_logic_1) and (grp_solve_NTRU_all_79_81_83_1_fu_739_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                elsif (((grp_solve_NTRU_all_79_81_83_1_fu_739_ap_done = ap_const_logic_1) and (grp_solve_NTRU_all_79_81_83_1_fu_739_ap_return = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                if (((gmem0_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                if (((gmem0_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                if ((not(((ap_predicate_op198_writeresp_state29 = ap_const_boolean_1) and (gmem0_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state98;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state30 => 
                if (((icmp_ln2462_fu_864_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state31 => 
                if (((icmp_ln2466_fu_912_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state32 => 
                if (((gmem0_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state33 => 
                if (((gmem0_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                if (((gmem0_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state39 => 
                if (((icmp_ln2462_1_fu_995_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                    ap_NS_fsm <= ap_ST_fsm_state55;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state40 => 
                if (((icmp_ln2466_1_fu_1062_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state41 => 
                if (((gmem0_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state42 => 
                if (((gmem0_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                if (((gmem0_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_state47;
                end if;
            when ap_ST_fsm_state48 => 
                if (((gmem0_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                    ap_NS_fsm <= ap_ST_fsm_state49;
                else
                    ap_NS_fsm <= ap_ST_fsm_state48;
                end if;
            when ap_ST_fsm_state49 => 
                if (((gmem0_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state49))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                else
                    ap_NS_fsm <= ap_ST_fsm_state49;
                end if;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                if (((gmem0_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state54))) then
                    ap_NS_fsm <= ap_ST_fsm_state98;
                else
                    ap_NS_fsm <= ap_ST_fsm_state54;
                end if;
            when ap_ST_fsm_state55 => 
                if (((tmp_160_fu_1156_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state55))) then
                    ap_NS_fsm <= ap_ST_fsm_state57;
                else
                    ap_NS_fsm <= ap_ST_fsm_state56;
                end if;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                if (((icmp_ln962_fu_1233_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state58))) then
                    ap_NS_fsm <= ap_ST_fsm_state60;
                else
                    ap_NS_fsm <= ap_ST_fsm_state59;
                end if;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state60 => 
                if (((icmp_ln4509_fu_1310_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state60))) then
                    ap_NS_fsm <= ap_ST_fsm_state70;
                else
                    ap_NS_fsm <= ap_ST_fsm_state61;
                end if;
            when ap_ST_fsm_state61 => 
                if (((gmem0_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state61))) then
                    ap_NS_fsm <= ap_ST_fsm_state62;
                else
                    ap_NS_fsm <= ap_ST_fsm_state61;
                end if;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                if (((gmem0_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state68))) then
                    ap_NS_fsm <= ap_ST_fsm_state69;
                else
                    ap_NS_fsm <= ap_ST_fsm_state68;
                end if;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state70 => 
                if (((icmp_ln4512_fu_1426_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state70))) then
                    ap_NS_fsm <= ap_ST_fsm_state82;
                else
                    ap_NS_fsm <= ap_ST_fsm_state71;
                end if;
            when ap_ST_fsm_state71 => 
                if (((gmem0_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state71))) then
                    ap_NS_fsm <= ap_ST_fsm_state72;
                else
                    ap_NS_fsm <= ap_ST_fsm_state71;
                end if;
            when ap_ST_fsm_state72 => 
                if (((gmem0_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state72))) then
                    ap_NS_fsm <= ap_ST_fsm_state73;
                else
                    ap_NS_fsm <= ap_ST_fsm_state72;
                end if;
            when ap_ST_fsm_state73 => 
                if (((gmem0_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state73))) then
                    ap_NS_fsm <= ap_ST_fsm_state74;
                else
                    ap_NS_fsm <= ap_ST_fsm_state73;
                end if;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                if (((gmem0_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state78))) then
                    ap_NS_fsm <= ap_ST_fsm_state79;
                else
                    ap_NS_fsm <= ap_ST_fsm_state78;
                end if;
            when ap_ST_fsm_state79 => 
                if (((gmem0_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state79))) then
                    ap_NS_fsm <= ap_ST_fsm_state80;
                else
                    ap_NS_fsm <= ap_ST_fsm_state79;
                end if;
            when ap_ST_fsm_state80 => 
                if (((gmem0_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state80))) then
                    ap_NS_fsm <= ap_ST_fsm_state81;
                else
                    ap_NS_fsm <= ap_ST_fsm_state80;
                end if;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state82 => 
                if (((grp_modp_NTT2_ext_1_fu_687_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state82))) then
                    ap_NS_fsm <= ap_ST_fsm_state83;
                else
                    ap_NS_fsm <= ap_ST_fsm_state82;
                end if;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                if (((grp_modp_NTT2_ext_1_fu_687_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state84))) then
                    ap_NS_fsm <= ap_ST_fsm_state85;
                else
                    ap_NS_fsm <= ap_ST_fsm_state84;
                end if;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                if (((grp_modp_NTT2_ext_1_fu_687_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state86))) then
                    ap_NS_fsm <= ap_ST_fsm_state87;
                else
                    ap_NS_fsm <= ap_ST_fsm_state86;
                end if;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                if (((grp_modp_NTT2_ext_1_fu_687_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state88))) then
                    ap_NS_fsm <= ap_ST_fsm_state89;
                else
                    ap_NS_fsm <= ap_ST_fsm_state88;
                end if;
            when ap_ST_fsm_state89 => 
                if (((icmp_ln4524_fu_1733_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state89))) then
                    ap_NS_fsm <= ap_ST_fsm_state99;
                else
                    ap_NS_fsm <= ap_ST_fsm_state90;
                end if;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                if (((icmp_ln4529_fu_1816_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state91))) then
                    ap_NS_fsm <= ap_ST_fsm_state89;
                else
                    ap_NS_fsm <= ap_ST_fsm_state92;
                end if;
            when ap_ST_fsm_state92 => 
                if (((gmem0_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state92))) then
                    ap_NS_fsm <= ap_ST_fsm_state93;
                else
                    ap_NS_fsm <= ap_ST_fsm_state92;
                end if;
            when ap_ST_fsm_state93 => 
                if (((gmem0_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state93))) then
                    ap_NS_fsm <= ap_ST_fsm_state94;
                else
                    ap_NS_fsm <= ap_ST_fsm_state93;
                end if;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                if ((not(((ap_predicate_op542_writeresp_state98 = ap_const_boolean_1) and (gmem0_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state98))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state98;
                end if;
            when ap_ST_fsm_state99 => 
                if (((gmem0_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state99))) then
                    ap_NS_fsm <= ap_ST_fsm_state100;
                else
                    ap_NS_fsm <= ap_ST_fsm_state99;
                end if;
            when ap_ST_fsm_state100 => 
                if (((gmem0_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state100))) then
                    ap_NS_fsm <= ap_ST_fsm_state101;
                else
                    ap_NS_fsm <= ap_ST_fsm_state100;
                end if;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                if (((gmem0_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state105))) then
                    ap_NS_fsm <= ap_ST_fsm_state98;
                else
                    ap_NS_fsm <= ap_ST_fsm_state105;
                end if;
            when ap_ST_fsm_state106 => 
                if (((gmem0_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state106))) then
                    ap_NS_fsm <= ap_ST_fsm_state107;
                else
                    ap_NS_fsm <= ap_ST_fsm_state106;
                end if;
            when ap_ST_fsm_state107 => 
                if (((gmem0_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state107))) then
                    ap_NS_fsm <= ap_ST_fsm_state108;
                else
                    ap_NS_fsm <= ap_ST_fsm_state107;
                end if;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state109;
            when ap_ST_fsm_state109 => 
                ap_NS_fsm <= ap_ST_fsm_state110;
            when ap_ST_fsm_state110 => 
                ap_NS_fsm <= ap_ST_fsm_state111;
            when ap_ST_fsm_state111 => 
                ap_NS_fsm <= ap_ST_fsm_state112;
            when ap_ST_fsm_state112 => 
                if (((gmem0_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state112))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state112;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    REV10_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state22, ap_CS_fsm_state58, zext_ln966_fu_1255_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            REV10_address0 <= zext_ln966_fu_1255_p1(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            REV10_address0 <= ap_const_lv10_0;
        else 
            REV10_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    REV10_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state22, ap_CS_fsm_state58)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            REV10_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            REV10_ce0 <= ap_const_logic_0;
        else 
            REV10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln2466_1_fu_1056_p2 <= std_logic_vector(unsigned(w_51_fu_1050_p2) + unsigned(ap_const_lv32_7F));
    add_ln2466_fu_906_p2 <= std_logic_vector(unsigned(w_50_fu_900_p2) + unsigned(ap_const_lv32_7F));
    add_ln2469_1_fu_1075_p2 <= std_logic_vector(unsigned(zext_ln2462_1_reg_2023) + unsigned(G_upper_read_reg_1882));
    add_ln2469_2_fu_956_p2 <= std_logic_vector(unsigned(trunc_ln2469_3_reg_1999) + unsigned(trunc_ln2469_reg_1944));
    add_ln2469_3_fu_1106_p2 <= std_logic_vector(unsigned(trunc_ln2469_6_reg_2064) + unsigned(trunc_ln2469_1_reg_1985));
    add_ln2469_fu_925_p2 <= std_logic_vector(unsigned(zext_ln2462_reg_1959) + unsigned(F_upper_read_reg_1889));
    add_ln4510_1_fu_1351_p2 <= std_logic_vector(unsigned(trunc_ln4510_fu_1322_p1) + unsigned(trunc_ln2469_1_reg_1985));
    add_ln4510_fu_1326_p2 <= std_logic_vector(unsigned(zext_ln4509_fu_1306_p1) + unsigned(G_upper_read_reg_1882));
    add_ln4513_1_fu_1526_p2 <= std_logic_vector(unsigned(trunc_ln4513_1_fu_1523_p1) + unsigned(trunc_ln4513_reg_2166));
    add_ln4513_fu_1438_p2 <= std_logic_vector(unsigned(zext_ln4512_fu_1422_p1) + unsigned(f_read_reg_1875));
    add_ln4514_1_fu_1595_p2 <= std_logic_vector(unsigned(trunc_ln4513_1_fu_1523_p1) + unsigned(trunc_ln4514_reg_2171));
    add_ln4514_fu_1463_p2 <= std_logic_vector(unsigned(zext_ln4512_fu_1422_p1) + unsigned(g_read_reg_1868));
    add_ln4515_1_fu_1600_p2 <= std_logic_vector(unsigned(trunc_ln4513_1_fu_1523_p1) + unsigned(trunc_ln2469_reg_1944));
    add_ln4515_fu_1488_p2 <= std_logic_vector(unsigned(zext_ln4512_fu_1422_p1) + unsigned(F_upper_read_reg_1889));
    and_ln2388_2_fu_1042_p3 <= (tmp_159_fu_1034_p3 & ap_const_lv31_0);
    and_ln813_fu_1213_p2 <= (xor_ln813_fu_1190_p2 and select_ln813_fu_1205_p3);
    and_ln_fu_892_p3 <= (tmp_158_fu_884_p3 & ap_const_lv31_0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state100 <= ap_CS_fsm(99);
    ap_CS_fsm_state105 <= ap_CS_fsm(104);
    ap_CS_fsm_state106 <= ap_CS_fsm(105);
    ap_CS_fsm_state107 <= ap_CS_fsm(106);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state112 <= ap_CS_fsm(111);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);
    ap_CS_fsm_state73 <= ap_CS_fsm(72);
    ap_CS_fsm_state78 <= ap_CS_fsm(77);
    ap_CS_fsm_state79 <= ap_CS_fsm(78);
    ap_CS_fsm_state80 <= ap_CS_fsm(79);
    ap_CS_fsm_state81 <= ap_CS_fsm(80);
    ap_CS_fsm_state82 <= ap_CS_fsm(81);
    ap_CS_fsm_state83 <= ap_CS_fsm(82);
    ap_CS_fsm_state84 <= ap_CS_fsm(83);
    ap_CS_fsm_state85 <= ap_CS_fsm(84);
    ap_CS_fsm_state86 <= ap_CS_fsm(85);
    ap_CS_fsm_state87 <= ap_CS_fsm(86);
    ap_CS_fsm_state88 <= ap_CS_fsm(87);
    ap_CS_fsm_state89 <= ap_CS_fsm(88);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_CS_fsm_state90 <= ap_CS_fsm(89);
    ap_CS_fsm_state91 <= ap_CS_fsm(90);
    ap_CS_fsm_state92 <= ap_CS_fsm(91);
    ap_CS_fsm_state93 <= ap_CS_fsm(92);
    ap_CS_fsm_state98 <= ap_CS_fsm(97);
    ap_CS_fsm_state99 <= ap_CS_fsm(98);

    ap_ST_fsm_state100_blk_assign_proc : process(gmem0_WREADY)
    begin
        if ((gmem0_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state100_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state100_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state101_blk <= ap_const_logic_0;
    ap_ST_fsm_state102_blk <= ap_const_logic_0;
    ap_ST_fsm_state103_blk <= ap_const_logic_0;
    ap_ST_fsm_state104_blk <= ap_const_logic_0;

    ap_ST_fsm_state105_blk_assign_proc : process(gmem0_BVALID)
    begin
        if ((gmem0_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state105_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state105_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state106_blk_assign_proc : process(gmem0_AWREADY)
    begin
        if ((gmem0_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state106_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state106_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state107_blk_assign_proc : process(gmem0_WREADY)
    begin
        if ((gmem0_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state107_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state107_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state108_blk <= ap_const_logic_0;
    ap_ST_fsm_state109_blk <= ap_const_logic_0;
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state110_blk <= ap_const_logic_0;
    ap_ST_fsm_state111_blk <= ap_const_logic_0;

    ap_ST_fsm_state112_blk_assign_proc : process(gmem0_BVALID)
    begin
        if ((gmem0_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state112_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state112_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state11_blk_assign_proc : process(grp_solve_NTRU_all_79_81_83_1_fu_739_ap_done)
    begin
        if ((grp_solve_NTRU_all_79_81_83_1_fu_739_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state11_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state11_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state12_blk <= ap_const_logic_0;

    ap_ST_fsm_state13_blk_assign_proc : process(grp_solve_NTRU_all_79_81_83_1_fu_739_ap_done)
    begin
        if ((grp_solve_NTRU_all_79_81_83_1_fu_739_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state13_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state13_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state14_blk_assign_proc : process(gmem0_AWREADY)
    begin
        if ((gmem0_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state14_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state14_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state15_blk_assign_proc : process(gmem0_WREADY)
    begin
        if ((gmem0_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state15_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state15_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state20_blk_assign_proc : process(gmem0_BVALID)
    begin
        if ((gmem0_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state20_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state20_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state21_blk <= ap_const_logic_0;

    ap_ST_fsm_state22_blk_assign_proc : process(grp_solve_NTRU_all_79_81_83_1_fu_739_ap_done)
    begin
        if ((grp_solve_NTRU_all_79_81_83_1_fu_739_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state22_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state22_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state23_blk_assign_proc : process(gmem0_AWREADY)
    begin
        if ((gmem0_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state23_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state23_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state24_blk_assign_proc : process(gmem0_WREADY)
    begin
        if ((gmem0_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state24_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state24_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;

    ap_ST_fsm_state29_blk_assign_proc : process(gmem0_BVALID, ap_predicate_op198_writeresp_state29)
    begin
        if (((ap_predicate_op198_writeresp_state29 = ap_const_boolean_1) and (gmem0_BVALID = ap_const_logic_0))) then 
            ap_ST_fsm_state29_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state29_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(grp_solve_NTRU_all_79_81_83_1_fu_739_ap_done)
    begin
        if ((grp_solve_NTRU_all_79_81_83_1_fu_739_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;

    ap_ST_fsm_state32_blk_assign_proc : process(gmem0_AWREADY)
    begin
        if ((gmem0_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state32_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state32_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state33_blk_assign_proc : process(gmem0_WREADY)
    begin
        if ((gmem0_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state33_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state33_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;

    ap_ST_fsm_state38_blk_assign_proc : process(gmem0_BVALID)
    begin
        if ((gmem0_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state38_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state38_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state39_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(gmem0_AWREADY)
    begin
        if ((gmem0_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state40_blk <= ap_const_logic_0;

    ap_ST_fsm_state41_blk_assign_proc : process(gmem0_AWREADY)
    begin
        if ((gmem0_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state41_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state41_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state42_blk_assign_proc : process(gmem0_WREADY)
    begin
        if ((gmem0_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state42_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state42_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;

    ap_ST_fsm_state47_blk_assign_proc : process(gmem0_BVALID)
    begin
        if ((gmem0_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state47_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state47_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state48_blk_assign_proc : process(gmem0_AWREADY)
    begin
        if ((gmem0_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state48_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state48_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state49_blk_assign_proc : process(gmem0_WREADY)
    begin
        if ((gmem0_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state49_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state49_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state4_blk_assign_proc : process(gmem0_WREADY)
    begin
        if ((gmem0_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state50_blk <= ap_const_logic_0;
    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;

    ap_ST_fsm_state54_blk_assign_proc : process(gmem0_BVALID)
    begin
        if ((gmem0_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state54_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state54_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state55_blk <= ap_const_logic_0;
    ap_ST_fsm_state56_blk <= ap_const_logic_0;
    ap_ST_fsm_state57_blk <= ap_const_logic_0;
    ap_ST_fsm_state58_blk <= ap_const_logic_0;
    ap_ST_fsm_state59_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state60_blk <= ap_const_logic_0;

    ap_ST_fsm_state61_blk_assign_proc : process(gmem0_ARREADY)
    begin
        if ((gmem0_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state61_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state61_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state62_blk <= ap_const_logic_0;
    ap_ST_fsm_state63_blk <= ap_const_logic_0;
    ap_ST_fsm_state64_blk <= ap_const_logic_0;
    ap_ST_fsm_state65_blk <= ap_const_logic_0;
    ap_ST_fsm_state66_blk <= ap_const_logic_0;
    ap_ST_fsm_state67_blk <= ap_const_logic_0;

    ap_ST_fsm_state68_blk_assign_proc : process(gmem0_RVALID)
    begin
        if ((gmem0_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state68_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state68_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state69_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state70_blk <= ap_const_logic_0;

    ap_ST_fsm_state71_blk_assign_proc : process(gmem0_ARREADY)
    begin
        if ((gmem0_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state71_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state71_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state72_blk_assign_proc : process(gmem0_ARREADY)
    begin
        if ((gmem0_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state72_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state72_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state73_blk_assign_proc : process(gmem0_ARREADY)
    begin
        if ((gmem0_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state73_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state73_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state74_blk <= ap_const_logic_0;
    ap_ST_fsm_state75_blk <= ap_const_logic_0;
    ap_ST_fsm_state76_blk <= ap_const_logic_0;
    ap_ST_fsm_state77_blk <= ap_const_logic_0;

    ap_ST_fsm_state78_blk_assign_proc : process(gmem0_RVALID)
    begin
        if ((gmem0_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state78_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state78_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state79_blk_assign_proc : process(gmem0_RVALID)
    begin
        if ((gmem0_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state79_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state79_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state7_blk <= ap_const_logic_0;

    ap_ST_fsm_state80_blk_assign_proc : process(gmem0_RVALID)
    begin
        if ((gmem0_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state80_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state80_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state81_blk <= ap_const_logic_0;

    ap_ST_fsm_state82_blk_assign_proc : process(grp_modp_NTT2_ext_1_fu_687_ap_done)
    begin
        if ((grp_modp_NTT2_ext_1_fu_687_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state82_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state82_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state83_blk <= ap_const_logic_0;

    ap_ST_fsm_state84_blk_assign_proc : process(grp_modp_NTT2_ext_1_fu_687_ap_done)
    begin
        if ((grp_modp_NTT2_ext_1_fu_687_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state84_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state84_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state85_blk <= ap_const_logic_0;

    ap_ST_fsm_state86_blk_assign_proc : process(grp_modp_NTT2_ext_1_fu_687_ap_done)
    begin
        if ((grp_modp_NTT2_ext_1_fu_687_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state86_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state86_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state87_blk <= ap_const_logic_0;

    ap_ST_fsm_state88_blk_assign_proc : process(grp_modp_NTT2_ext_1_fu_687_ap_done)
    begin
        if ((grp_modp_NTT2_ext_1_fu_687_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state88_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state88_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state89_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state90_blk <= ap_const_logic_0;
    ap_ST_fsm_state91_blk <= ap_const_logic_0;

    ap_ST_fsm_state92_blk_assign_proc : process(gmem0_AWREADY)
    begin
        if ((gmem0_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state92_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state92_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state93_blk_assign_proc : process(gmem0_WREADY)
    begin
        if ((gmem0_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state93_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state93_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state94_blk <= ap_const_logic_0;
    ap_ST_fsm_state95_blk <= ap_const_logic_0;
    ap_ST_fsm_state96_blk <= ap_const_logic_0;
    ap_ST_fsm_state97_blk <= ap_const_logic_0;

    ap_ST_fsm_state98_blk_assign_proc : process(gmem0_BVALID, ap_predicate_op542_writeresp_state98)
    begin
        if (((ap_predicate_op542_writeresp_state98 = ap_const_boolean_1) and (gmem0_BVALID = ap_const_logic_0))) then 
            ap_ST_fsm_state98_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state98_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state99_blk_assign_proc : process(gmem0_AWREADY)
    begin
        if ((gmem0_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state99_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state99_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state9_blk_assign_proc : process(gmem0_BVALID)
    begin
        if ((gmem0_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state9_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state9_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state29_assign_proc : process(gmem0_BVALID, ap_predicate_op198_writeresp_state29)
    begin
                ap_block_state29 <= ((ap_predicate_op198_writeresp_state29 = ap_const_boolean_1) and (gmem0_BVALID = ap_const_logic_0));
    end process;


    ap_block_state98_assign_proc : process(gmem0_BVALID, ap_predicate_op542_writeresp_state98)
    begin
                ap_block_state98 <= ((ap_predicate_op542_writeresp_state98 = ap_const_boolean_1) and (gmem0_BVALID = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state98, gmem0_BVALID, ap_predicate_op542_writeresp_state98)
    begin
        if ((not(((ap_predicate_op542_writeresp_state98 = ap_const_boolean_1) and (gmem0_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state98))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_retval_5_phi_fu_616_p10_assign_proc : process(tmp_s_reg_1916, tmp_73_reg_1923, ap_CS_fsm_state98, tmp_reg_1896, tmp_74_reg_1933, icmp_ln2462_reg_1964, icmp_ln2462_1_reg_2028, icmp_ln4524_reg_2249, retval_5_reg_611)
    begin
        if (((icmp_ln4524_reg_2249 = ap_const_lv1_0) and (icmp_ln2462_1_reg_2028 = ap_const_lv1_1) and (icmp_ln2462_reg_1964 = ap_const_lv1_1) and (tmp_74_reg_1933 = ap_const_lv1_1) and (tmp_reg_1896 = ap_const_lv1_1) and (tmp_73_reg_1923 = ap_const_lv1_1) and (tmp_s_reg_1916 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state98))) then 
            ap_phi_mux_retval_5_phi_fu_616_p10 <= ap_const_lv1_0;
        else 
            ap_phi_mux_retval_5_phi_fu_616_p10 <= retval_5_reg_611;
        end if; 
    end process;


    ap_predicate_op198_writeresp_state29_assign_proc : process(tmp_s_reg_1916, tmp_73_reg_1923)
    begin
                ap_predicate_op198_writeresp_state29 <= ((tmp_73_reg_1923 = ap_const_lv1_1) and (tmp_s_reg_1916 = ap_const_lv1_1));
    end process;


    ap_predicate_op542_writeresp_state98_assign_proc : process(tmp_s_reg_1916, tmp_73_reg_1923, tmp_reg_1896, tmp_74_reg_1933, icmp_ln2462_reg_1964, icmp_ln2462_1_reg_2028, icmp_ln4524_reg_2249)
    begin
                ap_predicate_op542_writeresp_state98 <= ((icmp_ln4524_reg_2249 = ap_const_lv1_0) and (icmp_ln2462_1_reg_2028 = ap_const_lv1_1) and (icmp_ln2462_reg_1964 = ap_const_lv1_1) and (tmp_74_reg_1933 = ap_const_lv1_1) and (tmp_reg_1896 = ap_const_lv1_1) and (tmp_73_reg_1923 = ap_const_lv1_1) and (tmp_s_reg_1916 = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state98, gmem0_BVALID, ap_predicate_op542_writeresp_state98)
    begin
        if ((not(((ap_predicate_op542_writeresp_state98 = ap_const_boolean_1) and (gmem0_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state98))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_retval_5_phi_fu_616_p10),32));

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    depth_3_fu_811_p2 <= std_logic_vector(unsigned(depth_fu_240) + unsigned(ap_const_lv32_FFFFFFFF));

    gmem0_ARADDR_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state61, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state2, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state22, gmem0_addr_20_reg_2148, gmem0_addr_21_reg_2191, gmem0_addr_22_reg_2197, gmem0_addr_23_reg_2203, grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_ARADDR, gmem0_ARREADY, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state21)
    begin
        if (((gmem0_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state73))) then 
            gmem0_ARADDR <= gmem0_addr_23_reg_2203;
        elsif (((gmem0_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state72))) then 
            gmem0_ARADDR <= gmem0_addr_22_reg_2197;
        elsif (((gmem0_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            gmem0_ARADDR <= gmem0_addr_21_reg_2191;
        elsif (((gmem0_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state61))) then 
            gmem0_ARADDR <= gmem0_addr_20_reg_2148;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            gmem0_ARADDR <= grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_ARADDR;
        else 
            gmem0_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem0_ARLEN_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state61, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state2, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state22, grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_ARLEN, gmem0_ARREADY, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state21)
    begin
        if ((((gmem0_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state73)) or ((gmem0_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state72)) or ((gmem0_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state71)) or ((gmem0_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state61)))) then 
            gmem0_ARLEN <= ap_const_lv32_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            gmem0_ARLEN <= grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_ARLEN;
        else 
            gmem0_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem0_ARVALID_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state61, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state2, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state22, grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_ARVALID, gmem0_ARREADY, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state21)
    begin
        if ((((gmem0_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state73)) or ((gmem0_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state72)) or ((gmem0_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state71)) or ((gmem0_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state61)))) then 
            gmem0_ARVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            gmem0_ARVALID <= grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_ARVALID;
        else 
            gmem0_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem0_AWADDR_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state106, ap_CS_fsm_state14, ap_CS_fsm_state23, ap_CS_fsm_state32, ap_CS_fsm_state41, ap_CS_fsm_state48, ap_CS_fsm_state99, ap_CS_fsm_state92, ap_CS_fsm_state2, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state22, gmem0_addr_17_reg_2004, gmem0_addr_18_reg_2069, gmem0_addr_25_reg_2286, grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_AWADDR, gmem0_AWREADY, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state21, sext_ln4432_fu_796_p1, sext_ln4462_fu_826_p1, sext_ln4466_fu_845_p1, sext_ln4487_fu_1138_p1, sext_ln4534_fu_1840_p1, sext_ln4457_fu_1851_p1)
    begin
        if (((gmem0_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state106))) then 
            gmem0_AWADDR <= sext_ln4457_fu_1851_p1;
        elsif (((gmem0_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state99))) then 
            gmem0_AWADDR <= sext_ln4534_fu_1840_p1;
        elsif (((gmem0_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state92))) then 
            gmem0_AWADDR <= gmem0_addr_25_reg_2286;
        elsif (((gmem0_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            gmem0_AWADDR <= sext_ln4487_fu_1138_p1;
        elsif (((gmem0_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            gmem0_AWADDR <= gmem0_addr_18_reg_2069;
        elsif (((gmem0_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            gmem0_AWADDR <= gmem0_addr_17_reg_2004;
        elsif (((gmem0_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            gmem0_AWADDR <= sext_ln4466_fu_845_p1;
        elsif (((gmem0_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            gmem0_AWADDR <= sext_ln4462_fu_826_p1;
        elsif (((gmem0_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            gmem0_AWADDR <= sext_ln4432_fu_796_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            gmem0_AWADDR <= grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_AWADDR;
        else 
            gmem0_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem0_AWLEN_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state106, ap_CS_fsm_state14, ap_CS_fsm_state23, ap_CS_fsm_state32, ap_CS_fsm_state41, ap_CS_fsm_state48, ap_CS_fsm_state99, ap_CS_fsm_state92, ap_CS_fsm_state2, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state22, grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_AWLEN, gmem0_AWREADY, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state21)
    begin
        if ((((gmem0_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state92)) or ((gmem0_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state99)) or ((gmem0_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48)) or ((gmem0_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41)) or ((gmem0_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32)) or ((gmem0_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23)) or ((gmem0_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((gmem0_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state106)) or ((gmem0_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            gmem0_AWLEN <= ap_const_lv32_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            gmem0_AWLEN <= grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_AWLEN;
        else 
            gmem0_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem0_AWVALID_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state106, ap_CS_fsm_state14, ap_CS_fsm_state23, ap_CS_fsm_state32, ap_CS_fsm_state41, ap_CS_fsm_state48, ap_CS_fsm_state99, ap_CS_fsm_state92, ap_CS_fsm_state2, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state22, grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_AWVALID, gmem0_AWREADY, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state21)
    begin
        if ((((gmem0_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state92)) or ((gmem0_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state99)) or ((gmem0_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48)) or ((gmem0_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41)) or ((gmem0_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32)) or ((gmem0_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23)) or ((gmem0_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((gmem0_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state106)) or ((gmem0_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            gmem0_AWVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            gmem0_AWVALID <= grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_AWVALID;
        else 
            gmem0_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem0_BREADY_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state9, ap_CS_fsm_state112, ap_CS_fsm_state20, ap_CS_fsm_state29, ap_CS_fsm_state38, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state105, ap_CS_fsm_state98, ap_CS_fsm_state2, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state22, grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_BREADY, gmem0_BVALID, ap_predicate_op542_writeresp_state98, ap_predicate_op198_writeresp_state29, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state21)
    begin
        if (((not(((ap_predicate_op198_writeresp_state29 = ap_const_boolean_1) and (gmem0_BVALID = ap_const_logic_0))) and (ap_predicate_op198_writeresp_state29 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state29)) or (not(((ap_predicate_op542_writeresp_state98 = ap_const_boolean_1) and (gmem0_BVALID = ap_const_logic_0))) and (ap_predicate_op542_writeresp_state98 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state98)) or ((gmem0_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state105)) or ((gmem0_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state54)) or ((gmem0_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state47)) or ((gmem0_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38)) or ((gmem0_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((gmem0_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state112)) or ((gmem0_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            gmem0_BREADY <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            gmem0_BREADY <= grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_BREADY;
        else 
            gmem0_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem0_RREADY_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state68, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state2, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state22, grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_RREADY, gmem0_RVALID, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state21)
    begin
        if ((((gmem0_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state80)) or ((gmem0_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state79)) or ((gmem0_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state78)) or ((gmem0_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state68)))) then 
            gmem0_RREADY <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            gmem0_RREADY <= grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_RREADY;
        else 
            gmem0_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem0_WDATA_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state4, ap_CS_fsm_state107, ap_CS_fsm_state15, ap_CS_fsm_state24, ap_CS_fsm_state33, ap_CS_fsm_state42, ap_CS_fsm_state49, ap_CS_fsm_state100, ap_CS_fsm_state93, ap_CS_fsm_state2, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state22, shl_ln2469_2_reg_2015, shl_ln2469_5_reg_2080, grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_WDATA, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state107)) then 
            gmem0_WDATA <= ap_const_lv32_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state100)) then 
            gmem0_WDATA <= ap_const_lv32_63;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            gmem0_WDATA <= ap_const_lv32_6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            gmem0_WDATA <= ap_const_lv32_5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            gmem0_WDATA <= shl_ln2469_5_reg_2080;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            gmem0_WDATA <= shl_ln2469_2_reg_2015;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            gmem0_WDATA <= ap_const_lv32_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            gmem0_WDATA <= ap_const_lv32_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            gmem0_WDATA <= ap_const_lv32_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            gmem0_WDATA <= grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_WDATA;
        else 
            gmem0_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem0_WSTRB_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state4, ap_CS_fsm_state107, ap_CS_fsm_state15, ap_CS_fsm_state24, ap_CS_fsm_state33, ap_CS_fsm_state42, ap_CS_fsm_state49, ap_CS_fsm_state100, ap_CS_fsm_state93, ap_CS_fsm_state2, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state22, shl_ln2469_reg_2010, shl_ln2469_3_reg_2075, grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_WSTRB, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            gmem0_WSTRB <= shl_ln2469_3_reg_2075;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            gmem0_WSTRB <= shl_ln2469_reg_2010;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            gmem0_WSTRB <= ap_const_lv4_F;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            gmem0_WSTRB <= grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_WSTRB;
        else 
            gmem0_WSTRB <= "XXXX";
        end if; 
    end process;


    gmem0_WVALID_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state4, ap_CS_fsm_state107, ap_CS_fsm_state15, ap_CS_fsm_state24, ap_CS_fsm_state33, ap_CS_fsm_state42, ap_CS_fsm_state49, ap_CS_fsm_state100, ap_CS_fsm_state93, ap_CS_fsm_state2, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state22, grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_WVALID, gmem0_WREADY, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state21)
    begin
        if ((((gmem0_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state93)) or ((gmem0_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state100)) or ((gmem0_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state49)) or ((gmem0_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((gmem0_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((gmem0_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24)) or ((gmem0_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((gmem0_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state107)) or ((gmem0_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            gmem0_WVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            gmem0_WVALID <= grp_solve_NTRU_all_79_81_83_1_fu_739_m_axi_gmem0_WVALID;
        else 
            gmem0_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem0_blk_n_AR_assign_proc : process(m_axi_gmem0_ARREADY, ap_CS_fsm_state61, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state61))) then 
            gmem0_blk_n_AR <= m_axi_gmem0_ARREADY;
        else 
            gmem0_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem0_blk_n_AW_assign_proc : process(m_axi_gmem0_AWREADY, ap_CS_fsm_state3, ap_CS_fsm_state106, ap_CS_fsm_state14, ap_CS_fsm_state23, ap_CS_fsm_state32, ap_CS_fsm_state41, ap_CS_fsm_state48, ap_CS_fsm_state99, ap_CS_fsm_state92)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            gmem0_blk_n_AW <= m_axi_gmem0_AWREADY;
        else 
            gmem0_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem0_blk_n_B_assign_proc : process(m_axi_gmem0_BVALID, ap_CS_fsm_state9, ap_CS_fsm_state112, ap_CS_fsm_state20, ap_CS_fsm_state29, tmp_s_reg_1916, tmp_73_reg_1923, ap_CS_fsm_state38, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state105, ap_CS_fsm_state98, tmp_reg_1896, tmp_74_reg_1933, icmp_ln2462_reg_1964, icmp_ln2462_1_reg_2028, icmp_ln4524_reg_2249)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state105) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state112) or (ap_const_logic_1 = ap_CS_fsm_state9) or ((icmp_ln4524_reg_2249 = ap_const_lv1_0) and (icmp_ln2462_1_reg_2028 = ap_const_lv1_1) and (icmp_ln2462_reg_1964 = ap_const_lv1_1) and (tmp_74_reg_1933 = ap_const_lv1_1) and (tmp_reg_1896 = ap_const_lv1_1) and (tmp_73_reg_1923 = ap_const_lv1_1) and (tmp_s_reg_1916 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state98)) or ((tmp_73_reg_1923 = ap_const_lv1_1) and (tmp_s_reg_1916 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29)))) then 
            gmem0_blk_n_B <= m_axi_gmem0_BVALID;
        else 
            gmem0_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem0_blk_n_R_assign_proc : process(m_axi_gmem0_RVALID, ap_CS_fsm_state68, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state68))) then 
            gmem0_blk_n_R <= m_axi_gmem0_RVALID;
        else 
            gmem0_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem0_blk_n_W_assign_proc : process(m_axi_gmem0_WREADY, ap_CS_fsm_state4, ap_CS_fsm_state107, ap_CS_fsm_state15, ap_CS_fsm_state24, ap_CS_fsm_state33, ap_CS_fsm_state42, ap_CS_fsm_state49, ap_CS_fsm_state100, ap_CS_fsm_state93)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            gmem0_blk_n_W <= m_axi_gmem0_WREADY;
        else 
            gmem0_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_777_p4 <= tmp2_read_reg_1862(63 downto 2);

    grp_modp_NTT2_ext_1_fu_687_a_assign_proc : process(ap_CS_fsm_state82, ap_CS_fsm_state84, ap_CS_fsm_state86, ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            grp_modp_NTT2_ext_1_fu_687_a <= ap_const_lv64_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_modp_NTT2_ext_1_fu_687_a <= ap_const_lv64_1800;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
            grp_modp_NTT2_ext_1_fu_687_a <= ap_const_lv64_1000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            grp_modp_NTT2_ext_1_fu_687_a <= ap_const_lv64_800;
        else 
            grp_modp_NTT2_ext_1_fu_687_a <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_modp_NTT2_ext_1_fu_687_ap_start <= grp_modp_NTT2_ext_1_fu_687_ap_start_reg;

    grp_modp_montymul_fu_633_a_assign_proc : process(reg_652, ap_CS_fsm_state55, tmp_160_fu_1156_p3, ap_CS_fsm_state57, ap_CS_fsm_state90, ap_CS_fsm_state58, icmp_ln962_fu_1233_p2, ap_CS_fsm_state91, vla1_q1, ap_CS_fsm_state56, ap_CS_fsm_state59, z_47_fu_252, x1_fu_264, x2_fu_268)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state90))) then 
            grp_modp_montymul_fu_633_a <= vla1_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_modp_montymul_fu_633_a <= x2_fu_268;
        elsif (((icmp_ln962_fu_1233_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state58))) then 
            grp_modp_montymul_fu_633_a <= x1_fu_264;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            grp_modp_montymul_fu_633_a <= ap_const_lv32_63FB001;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            grp_modp_montymul_fu_633_a <= reg_652;
        elsif ((((tmp_160_fu_1156_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state55)) or ((tmp_160_fu_1156_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state55)))) then 
            grp_modp_montymul_fu_633_a <= z_47_fu_252;
        else 
            grp_modp_montymul_fu_633_a <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_modp_montymul_fu_633_b_assign_proc : process(reg_652, ap_CS_fsm_state55, tmp_160_fu_1156_p3, ap_CS_fsm_state57, ap_CS_fsm_state90, ap_CS_fsm_state58, icmp_ln962_fu_1233_p2, ap_CS_fsm_state91, vla1_q0, ap_CS_fsm_state56, ap_CS_fsm_state59, z_47_fu_252)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state90))) then 
            grp_modp_montymul_fu_633_b <= vla1_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state57))) then 
            grp_modp_montymul_fu_633_b <= reg_652;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state56) or ((icmp_ln962_fu_1233_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state58)))) then 
            grp_modp_montymul_fu_633_b <= ap_const_lv32_647A5148;
        elsif (((tmp_160_fu_1156_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state55))) then 
            grp_modp_montymul_fu_633_b <= ap_const_lv32_1;
        elsif (((tmp_160_fu_1156_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state55))) then 
            grp_modp_montymul_fu_633_b <= z_47_fu_252;
        else 
            grp_modp_montymul_fu_633_b <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_solve_NTRU_all_79_81_83_1_fu_739_ap_start <= grp_solve_NTRU_all_79_81_83_1_fu_739_ap_start_reg;

    grp_solve_NTRU_all_79_81_83_1_fu_739_depth_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state22, depth_fu_240)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_solve_NTRU_all_79_81_83_1_fu_739_depth <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_solve_NTRU_all_79_81_83_1_fu_739_depth <= ap_const_lv32_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_solve_NTRU_all_79_81_83_1_fu_739_depth <= depth_fu_240;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_solve_NTRU_all_79_81_83_1_fu_739_depth <= ap_const_lv32_A;
        else 
            grp_solve_NTRU_all_79_81_83_1_fu_739_depth <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_9_fu_1164_p0 <= i_fu_256;
    i_9_fu_1164_p2 <= std_logic_vector(signed(i_9_fu_1164_p0) + signed(ap_const_lv6_3F));
    icmp_ln2462_1_fu_995_p2 <= "1" when (u_103_fu_248 = ap_const_lv10_200) else "0";
    icmp_ln2462_fu_864_p2 <= "1" when (u_fu_244 = ap_const_lv10_200) else "0";
    icmp_ln2466_1_fu_1062_p2 <= "1" when (unsigned(add_ln2466_1_fu_1056_p2) > unsigned(ap_const_lv32_FE)) else "0";
    icmp_ln2466_fu_912_p2 <= "1" when (unsigned(add_ln2466_fu_906_p2) > unsigned(ap_const_lv32_FE)) else "0";
    icmp_ln4455_fu_816_p2 <= "1" when (unsigned(depth_fu_240) > unsigned(ap_const_lv32_2)) else "0";
    icmp_ln4509_fu_1310_p2 <= "1" when (u_021_fu_272 = ap_const_lv10_200) else "0";
    icmp_ln4512_fu_1426_p2 <= "1" when (u_108_fu_276 = ap_const_lv10_200) else "0";
    icmp_ln4524_fu_1733_p2 <= "1" when (u_110_fu_280 = ap_const_lv10_200) else "0";
    icmp_ln4529_fu_1816_p2 <= "1" when (z_65_fu_1810_p2 = ap_const_lv32_723F844C) else "0";
    icmp_ln962_fu_1233_p2 <= "1" when (u_105_fu_260 = ap_const_lv10_200) else "0";
    lshr_ln4510_fu_1383_p2 <= std_logic_vector(shift_right(unsigned(gmem0_addr_20_read_reg_2176),to_integer(unsigned('0' & zext_ln4510_fu_1379_p1(31-1 downto 0)))));
    lshr_ln4513_fu_1543_p2 <= std_logic_vector(shift_right(unsigned(gmem0_addr_21_read_reg_2216),to_integer(unsigned('0' & zext_ln4513_fu_1539_p1(31-1 downto 0)))));
    lshr_ln4514_fu_1616_p2 <= std_logic_vector(shift_right(unsigned(gmem0_addr_22_read_reg_2226),to_integer(unsigned('0' & zext_ln4514_fu_1612_p1(31-1 downto 0)))));
    lshr_ln4515_fu_1675_p2 <= std_logic_vector(shift_right(unsigned(gmem0_addr_23_read_reg_2241),to_integer(unsigned('0' & zext_ln4515_fu_1671_p1(31-1 downto 0)))));
    lshr_ln813_fu_1196_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_7FFFD7FF),to_integer(unsigned('0' & sext_ln808_reg_2091(31-1 downto 0)))));
    or_ln4515_fu_1711_p2 <= (u_182_reg_2181 or ap_const_lv10_200);
    or_ln4528_fu_1774_p2 <= (u_110_fu_280 or ap_const_lv10_200);
    select_ln635_15_fu_1564_p3 <= 
        ap_const_lv32_7FFFD801 when (tmp_162_fu_1556_p3(0) = '1') else 
        ap_const_lv32_0;
    select_ln635_16_fu_1637_p3 <= 
        ap_const_lv32_7FFFD801 when (tmp_163_fu_1629_p3(0) = '1') else 
        ap_const_lv32_0;
    select_ln635_17_fu_1696_p3 <= 
        ap_const_lv32_7FFFD801 when (tmp_164_fu_1688_p3(0) = '1') else 
        ap_const_lv32_0;
    select_ln635_fu_1404_p3 <= 
        ap_const_lv32_7FFFD801 when (tmp_161_fu_1396_p3(0) = '1') else 
        ap_const_lv32_0;
    select_ln697_fu_1802_p3 <= 
        ap_const_lv32_7FFFD801 when (tmp_165_fu_1794_p3(0) = '1') else 
        ap_const_lv32_0;
    select_ln813_fu_1205_p3 <= 
        ap_const_lv32_FFFFFFFF when (trunc_ln813_fu_1201_p1(0) = '1') else 
        ap_const_lv32_0;
        sext_ln2469_1_fu_1089_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln2469_7_fu_1079_p4),64));

        sext_ln2469_fu_939_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln2469_5_fu_929_p4),64));

        sext_ln4432_fu_796_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_777_p4),64));

        sext_ln4457_fu_1851_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_777_p4),64));

        sext_ln4462_fu_826_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_777_p4),64));

        sext_ln4466_fu_845_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_777_p4),64));

        sext_ln4487_fu_1138_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_777_p4),64));

        sext_ln4510_1_fu_1392_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(w_42_fu_1388_p1),32));

        sext_ln4510_fu_1341_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln4510_2_fu_1331_p4),64));

        sext_ln4513_1_fu_1552_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(w_44_fu_1548_p1),32));

        sext_ln4513_fu_1453_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln4513_3_fu_1443_p4),64));

        sext_ln4514_1_fu_1625_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(w_46_fu_1621_p1),32));

        sext_ln4514_fu_1478_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln4514_2_fu_1468_p4),64));

        sext_ln4515_1_fu_1684_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(w_48_fu_1680_p1),32));

        sext_ln4515_2_fu_1716_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(or_ln4515_fu_1711_p2),11));

        sext_ln4515_fu_1503_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln19_fu_1493_p4),64));

        sext_ln4528_fu_1779_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(or_ln4528_fu_1774_p2),11));

        sext_ln4530_fu_1826_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_777_p4),64));

        sext_ln4534_fu_1840_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_777_p4),64));

    sext_ln808_fu_1152_p0 <= i_fu_256;
        sext_ln808_fu_1152_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln808_fu_1152_p0),32));

    shl_ln2469_1_fu_970_p3 <= (add_ln2469_2_fu_956_p2 & ap_const_lv3_0);
    shl_ln2469_2_fu_982_p2 <= std_logic_vector(shift_left(unsigned(zext_ln2469_fu_953_p1),to_integer(unsigned('0' & zext_ln2469_2_fu_978_p1(31-1 downto 0)))));
    shl_ln2469_3_fu_1114_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv4_1),to_integer(unsigned('0' & zext_ln2469_4_fu_1110_p1(4-1 downto 0)))));
    shl_ln2469_4_fu_1120_p3 <= (add_ln2469_3_fu_1106_p2 & ap_const_lv3_0);
    shl_ln2469_5_fu_1132_p2 <= std_logic_vector(shift_left(unsigned(zext_ln2469_3_fu_1103_p1),to_integer(unsigned('0' & zext_ln2469_5_fu_1128_p1(31-1 downto 0)))));
    shl_ln2469_fu_964_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv4_1),to_integer(unsigned('0' & zext_ln2469_1_fu_960_p1(4-1 downto 0)))));
    shl_ln53_fu_1531_p3 <= (add_ln4513_1_fu_1526_p2 & ap_const_lv3_0);
    shl_ln54_fu_1605_p3 <= (add_ln4514_1_reg_2231 & ap_const_lv3_0);
    shl_ln55_fu_1664_p3 <= (add_ln4515_1_reg_2236 & ap_const_lv3_0);
    shl_ln966_fu_1249_p2 <= std_logic_vector(shift_left(unsigned(u_105_fu_260),to_integer(unsigned('0' & ap_const_lv10_1(10-1 downto 0)))));
    shl_ln_fu_1372_p3 <= (add_ln4510_1_reg_2154 & ap_const_lv3_0);
    sub_ln697_fu_1788_p2 <= std_logic_vector(unsigned(a_assign_9_reg_662) - unsigned(grp_modp_montymul_fu_633_ap_return));
    tmp_158_fu_884_p3 <= vla1_q0(30 downto 30);
    tmp_159_fu_1034_p3 <= vla1_q0(30 downto 30);
    tmp_160_fu_1156_p1 <= i_fu_256;
    tmp_160_fu_1156_p3 <= tmp_160_fu_1156_p1(5 downto 5);
    tmp_161_fu_1396_p3 <= lshr_ln4510_fu_1383_p2(7 downto 7);
    tmp_162_fu_1556_p3 <= lshr_ln4513_fu_1543_p2(7 downto 7);
    tmp_163_fu_1629_p3 <= lshr_ln4514_fu_1616_p2(7 downto 7);
    tmp_164_fu_1688_p3 <= lshr_ln4515_fu_1675_p2(7 downto 7);
    tmp_165_fu_1794_p3 <= sub_ln697_fu_1788_p2(31 downto 31);
    trunc_ln19_fu_1493_p4 <= add_ln4515_fu_1488_p2(63 downto 2);
    trunc_ln2465_fu_1007_p1 <= u_103_fu_248(9 - 1 downto 0);
    trunc_ln2469_1_fu_876_p1 <= G_upper_read_reg_1882(2 - 1 downto 0);
    trunc_ln2469_2_fu_918_p1 <= vla1_q0(8 - 1 downto 0);
    trunc_ln2469_3_fu_922_p1 <= u_fu_244(2 - 1 downto 0);
    trunc_ln2469_4_fu_1068_p1 <= vla1_q0(8 - 1 downto 0);
    trunc_ln2469_5_fu_929_p4 <= add_ln2469_fu_925_p2(63 downto 2);
    trunc_ln2469_6_fu_1072_p1 <= u_103_fu_248(2 - 1 downto 0);
    trunc_ln2469_7_fu_1079_p4 <= add_ln2469_1_fu_1075_p2(63 downto 2);
    trunc_ln2469_fu_837_p1 <= F_upper_read_reg_1889(2 - 1 downto 0);
    trunc_ln4510_2_fu_1331_p4 <= add_ln4510_fu_1326_p2(63 downto 2);
    trunc_ln4510_fu_1322_p1 <= u_021_fu_272(2 - 1 downto 0);
    trunc_ln4513_1_fu_1523_p1 <= u_182_reg_2181(2 - 1 downto 0);
    trunc_ln4513_3_fu_1443_p4 <= add_ln4513_fu_1438_p2(63 downto 2);
    trunc_ln4513_4_fu_1579_p1 <= u_182_reg_2181(9 - 1 downto 0);
    trunc_ln4513_fu_1361_p1 <= f_read_reg_1875(2 - 1 downto 0);
    trunc_ln4514_2_fu_1468_p4 <= add_ln4514_fu_1463_p2(63 downto 2);
    trunc_ln4514_fu_1364_p1 <= g_read_reg_1868(2 - 1 downto 0);
    trunc_ln4527_fu_1745_p1 <= u_110_fu_280(9 - 1 downto 0);
    trunc_ln813_fu_1201_p1 <= lshr_ln813_fu_1196_p2(1 - 1 downto 0);
    u_175_fu_870_p2 <= std_logic_vector(unsigned(u_fu_244) + unsigned(ap_const_lv10_1));
    u_177_fu_1001_p2 <= std_logic_vector(unsigned(u_103_fu_248) + unsigned(ap_const_lv10_1));
    u_179_fu_1239_p2 <= std_logic_vector(unsigned(u_105_fu_260) + unsigned(ap_const_lv10_1));
    u_181_fu_1316_p2 <= std_logic_vector(unsigned(u_021_fu_272) + unsigned(ap_const_lv10_1));
    u_183_fu_1432_p2 <= std_logic_vector(unsigned(u_108_fu_276) + unsigned(ap_const_lv10_1));
    u_185_fu_1739_p2 <= std_logic_vector(unsigned(u_110_fu_280) + unsigned(ap_const_lv10_1));

    vla1_address0_assign_proc : process(ap_CS_fsm_state80, ap_CS_fsm_state90, ap_CS_fsm_state2, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state22, zext_ln2462_fu_859_p1, ap_CS_fsm_state30, ap_CS_fsm_state39, ap_CS_fsm_state89, grp_modp_NTT2_ext_1_fu_687_vla1_address0, grp_solve_NTRU_all_79_81_83_1_fu_739_vla1_address0, ap_CS_fsm_state59, ap_CS_fsm_state82, ap_CS_fsm_state84, ap_CS_fsm_state86, ap_CS_fsm_state88, zext_ln2387_fu_1019_p1, zext_ln966_1_fu_1280_p1, zext_ln4514_2_fu_1659_p1, zext_ln4524_fu_1728_p1, zext_ln4528_1_fu_1783_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            vla1_address0 <= zext_ln4528_1_fu_1783_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            vla1_address0 <= zext_ln4524_fu_1728_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            vla1_address0 <= zext_ln4514_2_fu_1659_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            vla1_address0 <= zext_ln966_1_fu_1280_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            vla1_address0 <= zext_ln2387_fu_1019_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            vla1_address0 <= zext_ln2462_fu_859_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            vla1_address0 <= grp_solve_NTRU_all_79_81_83_1_fu_739_vla1_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state82))) then 
            vla1_address0 <= grp_modp_NTT2_ext_1_fu_687_vla1_address0;
        else 
            vla1_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    vla1_address1_assign_proc : process(ap_CS_fsm_state79, ap_CS_fsm_state90, ap_CS_fsm_state2, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state22, zext_ln4509_reg_2140, ap_CS_fsm_state89, grp_modp_NTT2_ext_1_fu_687_vla1_address1, grp_solve_NTRU_all_79_81_83_1_fu_739_vla1_address1, ap_CS_fsm_state59, ap_CS_fsm_state82, ap_CS_fsm_state84, ap_CS_fsm_state86, ap_CS_fsm_state88, zext_ln967_fu_1293_p1, ap_CS_fsm_state69, zext_ln4513_2_fu_1590_p1, zext_ln4515_1_fu_1720_p1, ap_CS_fsm_state81, zext_ln4527_fu_1757_p1, zext_ln4528_fu_1769_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            vla1_address1 <= zext_ln4528_fu_1769_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            vla1_address1 <= zext_ln4527_fu_1757_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            vla1_address1 <= zext_ln4515_1_fu_1720_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            vla1_address1 <= zext_ln4513_2_fu_1590_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            vla1_address1 <= zext_ln4509_reg_2140(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            vla1_address1 <= zext_ln967_fu_1293_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            vla1_address1 <= grp_solve_NTRU_all_79_81_83_1_fu_739_vla1_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state82))) then 
            vla1_address1 <= grp_modp_NTT2_ext_1_fu_687_vla1_address1;
        else 
            vla1_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    vla1_ce0_assign_proc : process(ap_CS_fsm_state80, ap_CS_fsm_state90, ap_CS_fsm_state2, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state22, ap_CS_fsm_state30, ap_CS_fsm_state39, ap_CS_fsm_state89, grp_modp_NTT2_ext_1_fu_687_vla1_ce0, grp_solve_NTRU_all_79_81_83_1_fu_739_vla1_ce0, gmem0_RVALID, ap_CS_fsm_state59, ap_CS_fsm_state82, ap_CS_fsm_state84, ap_CS_fsm_state86, ap_CS_fsm_state88)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state90) or ((gmem0_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state80)))) then 
            vla1_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            vla1_ce0 <= grp_solve_NTRU_all_79_81_83_1_fu_739_vla1_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state82))) then 
            vla1_ce0 <= grp_modp_NTT2_ext_1_fu_687_vla1_ce0;
        else 
            vla1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    vla1_ce1_assign_proc : process(ap_CS_fsm_state79, ap_CS_fsm_state90, ap_CS_fsm_state2, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state22, ap_CS_fsm_state89, grp_modp_NTT2_ext_1_fu_687_vla1_ce1, grp_solve_NTRU_all_79_81_83_1_fu_739_vla1_ce1, gmem0_RVALID, ap_CS_fsm_state59, ap_CS_fsm_state82, ap_CS_fsm_state84, ap_CS_fsm_state86, ap_CS_fsm_state88, ap_CS_fsm_state69, ap_CS_fsm_state81)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state69) or ((gmem0_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state79)))) then 
            vla1_ce1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            vla1_ce1 <= grp_solve_NTRU_all_79_81_83_1_fu_739_vla1_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state82))) then 
            vla1_ce1 <= grp_modp_NTT2_ext_1_fu_687_vla1_ce1;
        else 
            vla1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    vla1_d0_assign_proc : process(ap_CS_fsm_state80, ap_CS_fsm_state2, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state22, grp_modp_NTT2_ext_1_fu_687_vla1_d0, grp_solve_NTRU_all_79_81_83_1_fu_739_vla1_d0, ap_CS_fsm_state59, ap_CS_fsm_state82, ap_CS_fsm_state84, ap_CS_fsm_state86, ap_CS_fsm_state88, x2_fu_268, w_47_fu_1645_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            vla1_d0 <= w_47_fu_1645_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            vla1_d0 <= x2_fu_268;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            vla1_d0 <= grp_solve_NTRU_all_79_81_83_1_fu_739_vla1_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state82))) then 
            vla1_d0 <= grp_modp_NTT2_ext_1_fu_687_vla1_d0;
        else 
            vla1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    vla1_d1_assign_proc : process(ap_CS_fsm_state79, ap_CS_fsm_state2, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state22, x1_load_reg_2123, grp_modp_NTT2_ext_1_fu_687_vla1_d1, grp_solve_NTRU_all_79_81_83_1_fu_739_vla1_d1, ap_CS_fsm_state59, ap_CS_fsm_state82, ap_CS_fsm_state84, ap_CS_fsm_state86, ap_CS_fsm_state88, ap_CS_fsm_state69, ap_CS_fsm_state81, w_43_fu_1412_p2, w_45_fu_1572_p2, w_49_fu_1704_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            vla1_d1 <= w_49_fu_1704_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            vla1_d1 <= w_45_fu_1572_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            vla1_d1 <= w_43_fu_1412_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            vla1_d1 <= x1_load_reg_2123;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            vla1_d1 <= grp_solve_NTRU_all_79_81_83_1_fu_739_vla1_d1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state82))) then 
            vla1_d1 <= grp_modp_NTT2_ext_1_fu_687_vla1_d1;
        else 
            vla1_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    vla1_we0_assign_proc : process(ap_CS_fsm_state80, ap_CS_fsm_state2, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state22, grp_modp_NTT2_ext_1_fu_687_vla1_we0, grp_solve_NTRU_all_79_81_83_1_fu_739_vla1_we0, gmem0_RVALID, ap_CS_fsm_state59, ap_CS_fsm_state82, ap_CS_fsm_state84, ap_CS_fsm_state86, ap_CS_fsm_state88)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state59) or ((gmem0_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state80)))) then 
            vla1_we0 <= ap_const_lv4_F;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            vla1_we0 <= grp_solve_NTRU_all_79_81_83_1_fu_739_vla1_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state82))) then 
            vla1_we0 <= grp_modp_NTT2_ext_1_fu_687_vla1_we0;
        else 
            vla1_we0 <= ap_const_lv4_0;
        end if; 
    end process;


    vla1_we1_assign_proc : process(ap_CS_fsm_state79, ap_CS_fsm_state2, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state22, grp_modp_NTT2_ext_1_fu_687_vla1_we1, grp_solve_NTRU_all_79_81_83_1_fu_739_vla1_we1, gmem0_RVALID, ap_CS_fsm_state59, ap_CS_fsm_state82, ap_CS_fsm_state84, ap_CS_fsm_state86, ap_CS_fsm_state88, ap_CS_fsm_state69, ap_CS_fsm_state81)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state69) or ((gmem0_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state79)))) then 
            vla1_we1 <= ap_const_lv4_F;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            vla1_we1 <= grp_solve_NTRU_all_79_81_83_1_fu_739_vla1_we1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state82))) then 
            vla1_we1 <= grp_modp_NTT2_ext_1_fu_687_vla1_we1;
        else 
            vla1_we1 <= ap_const_lv4_0;
        end if; 
    end process;

    w_42_fu_1388_p1 <= lshr_ln4510_fu_1383_p2(8 - 1 downto 0);
    w_43_fu_1412_p2 <= std_logic_vector(unsigned(select_ln635_fu_1404_p3) + unsigned(sext_ln4510_1_fu_1392_p1));
    w_44_fu_1548_p1 <= lshr_ln4513_fu_1543_p2(8 - 1 downto 0);
    w_45_fu_1572_p2 <= std_logic_vector(unsigned(select_ln635_15_fu_1564_p3) + unsigned(sext_ln4513_1_fu_1552_p1));
    w_46_fu_1621_p1 <= lshr_ln4514_fu_1616_p2(8 - 1 downto 0);
    w_47_fu_1645_p2 <= std_logic_vector(unsigned(select_ln635_16_fu_1637_p3) + unsigned(sext_ln4514_1_fu_1625_p1));
    w_48_fu_1680_p1 <= lshr_ln4515_fu_1675_p2(8 - 1 downto 0);
    w_49_fu_1704_p2 <= std_logic_vector(unsigned(select_ln635_17_fu_1696_p3) + unsigned(sext_ln4515_1_fu_1684_p1));
    w_50_fu_900_p2 <= (vla1_q0 or and_ln_fu_892_p3);
    w_51_fu_1050_p2 <= (vla1_q0 or and_ln2388_2_fu_1042_p3);
    xor_ln813_fu_1190_p2 <= (reg_652 xor grp_modp_montymul_fu_633_ap_return);
    z_64_fu_1219_p2 <= (reg_652 xor and_ln813_fu_1213_p2);
    z_65_fu_1810_p2 <= std_logic_vector(unsigned(select_ln697_fu_1802_p3) + unsigned(sub_ln697_fu_1788_p2));
    zext_ln2387_fu_1019_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln_fu_1011_p3),64));
    zext_ln2462_1_fu_991_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(u_103_fu_248),64));
    zext_ln2462_fu_859_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(u_fu_244),64));
    zext_ln2469_1_fu_960_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2469_2_fu_956_p2),4));
    zext_ln2469_2_fu_978_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln2469_1_fu_970_p3),32));
    zext_ln2469_3_fu_1103_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln2469_4_reg_2059),32));
    zext_ln2469_4_fu_1110_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2469_3_fu_1106_p2),4));
    zext_ln2469_5_fu_1128_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln2469_4_fu_1120_p3),32));
    zext_ln2469_fu_953_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln2469_2_reg_1994),32));
    zext_ln41_fu_1749_p3 <= (ap_const_lv1_1 & trunc_ln4527_fu_1745_p1);
    zext_ln42_fu_1762_p3 <= (ap_const_lv2_2 & trunc_ln4527_reg_2258);
    zext_ln4509_fu_1306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(u_021_fu_272),64));
    zext_ln4510_fu_1379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_1372_p3),32));
    zext_ln4512_fu_1422_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(u_108_fu_276),64));
    zext_ln4513_1_fu_1582_p3 <= (ap_const_lv1_1 & trunc_ln4513_4_fu_1579_p1);
    zext_ln4513_2_fu_1590_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln4513_1_fu_1582_p3),64));
    zext_ln4513_fu_1539_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln53_fu_1531_p3),32));
    zext_ln4514_1_fu_1652_p3 <= (ap_const_lv2_2 & trunc_ln4513_4_reg_2221);
    zext_ln4514_2_fu_1659_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln4514_1_fu_1652_p3),64));
    zext_ln4514_fu_1612_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln54_fu_1605_p3),32));
    zext_ln4515_1_fu_1720_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln4515_2_fu_1716_p1),64));
    zext_ln4515_fu_1671_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln55_fu_1664_p3),32));
    zext_ln4524_fu_1728_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(u_110_fu_280),64));
    zext_ln4527_fu_1757_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln41_fu_1749_p3),64));
    zext_ln4528_1_fu_1783_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln4528_fu_1779_p1),64));
    zext_ln4528_fu_1769_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln42_fu_1762_p3),64));
    zext_ln966_1_fu_1280_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(REV10_q0),64));
    zext_ln966_fu_1255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln966_fu_1249_p2),64));
    zext_ln967_cast_fu_1285_p3 <= (ap_const_lv2_2 & REV10_q0);
    zext_ln967_fu_1293_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln967_cast_fu_1285_p3),64));
    zext_ln_fu_1011_p3 <= (ap_const_lv1_1 & trunc_ln2465_fu_1007_p1);
end behav;
