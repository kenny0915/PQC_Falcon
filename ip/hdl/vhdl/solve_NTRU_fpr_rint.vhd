-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity solve_NTRU_fpr_rint is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of solve_NTRU_fpr_rint is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv64_BFF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_4330000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100001100110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_C330000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1100001100110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_74 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_FFF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1111111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_10000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv13_1FFE : STD_LOGIC_VECTOR (12 downto 0) := "1111111111110";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_64_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal dc_reg_724 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_fu_70_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal dc_5_reg_729 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_76_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal dc_6_reg_734 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal data_V_fu_82_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_1_fu_103_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal mantissa_fu_107_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal xs_exp_V_fu_93_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln515_fu_121_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln515_fu_125_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1512_fu_139_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_fu_131_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1512_fu_145_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_fu_149_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1488_fu_157_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_fu_117_p1 : STD_LOGIC_VECTOR (168 downto 0);
    signal zext_ln1488_fu_161_p1 : STD_LOGIC_VECTOR (168 downto 0);
    signal r_V_fu_165_p2 : STD_LOGIC_VECTOR (168 downto 0);
    signal tmp_fu_177_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_171_p2 : STD_LOGIC_VECTOR (168 downto 0);
    signal zext_ln818_fu_185_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_189_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal val_fu_199_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_V_1_fu_213_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_3_fu_234_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal mantissa_1_fu_238_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal xs_exp_V_1_fu_224_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln515_2_fu_252_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln515_2_fu_256_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1512_1_fu_270_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_1_fu_262_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1512_1_fu_276_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_1_fu_280_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1488_1_fu_288_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_1_fu_248_p1 : STD_LOGIC_VECTOR (168 downto 0);
    signal zext_ln1488_2_fu_292_p1 : STD_LOGIC_VECTOR (168 downto 0);
    signal r_V_2_fu_296_p2 : STD_LOGIC_VECTOR (168 downto 0);
    signal tmp_192_fu_308_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_3_fu_302_p2 : STD_LOGIC_VECTOR (168 downto 0);
    signal zext_ln818_1_fu_316_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_170_fu_320_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal val_1_fu_330_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_2_fu_216_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_4_fu_338_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_V_2_fu_352_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_5_fu_373_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal mantissa_2_fu_377_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal xs_exp_V_2_fu_363_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln515_3_fu_391_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln515_3_fu_395_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1512_2_fu_409_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_2_fu_401_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1512_2_fu_415_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_2_fu_419_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1488_2_fu_427_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_2_fu_387_p1 : STD_LOGIC_VECTOR (168 downto 0);
    signal zext_ln1488_3_fu_431_p1 : STD_LOGIC_VECTOR (168 downto 0);
    signal r_V_4_fu_435_p2 : STD_LOGIC_VECTOR (168 downto 0);
    signal tmp_196_fu_447_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_5_fu_441_p2 : STD_LOGIC_VECTOR (168 downto 0);
    signal zext_ln818_2_fu_455_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_171_fu_459_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal val_2_fu_469_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_4_fu_355_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_9_fu_477_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal result_V_13_fu_483_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_V_3_fu_497_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_7_fu_518_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal mantissa_3_fu_522_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal xs_exp_V_3_fu_508_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln515_4_fu_536_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln515_4_fu_540_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1512_3_fu_554_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_3_fu_546_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1512_3_fu_560_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_3_fu_564_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1488_3_fu_572_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_3_fu_532_p1 : STD_LOGIC_VECTOR (168 downto 0);
    signal zext_ln1488_4_fu_576_p1 : STD_LOGIC_VECTOR (168 downto 0);
    signal r_V_6_fu_580_p2 : STD_LOGIC_VECTOR (168 downto 0);
    signal tmp_200_fu_592_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_7_fu_586_p2 : STD_LOGIC_VECTOR (168 downto 0);
    signal zext_ln818_3_fu_600_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_172_fu_604_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal val_3_fu_614_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_6_fu_500_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_10_fu_622_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal result_V_fu_628_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal result_V_2_fu_207_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_s_fu_85_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_201_fu_642_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_202_fu_650_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_12_fu_344_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ub_fu_666_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln99_fu_676_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln99_fu_682_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln99_1_fu_686_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal m_fu_658_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal rn_fu_636_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal rp_fu_491_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_8_fu_692_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln108_fu_700_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component solve_NTRU_dadd_64ns_64ns_64_3_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    dadd_64ns_64ns_64_3_full_dsp_1_U65 : component solve_NTRU_dadd_64ns_64ns_64_3_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => x,
        din1 => ap_const_lv64_BFF0000000000000,
        ce => ap_const_logic_1,
        dout => grp_fu_64_p2);

    dadd_64ns_64ns_64_3_full_dsp_1_U66 : component solve_NTRU_dadd_64ns_64ns_64_3_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => x,
        din1 => ap_const_lv64_4330000000000000,
        ce => ap_const_logic_1,
        dout => grp_fu_70_p2);

    dadd_64ns_64ns_64_3_full_dsp_1_U67 : component solve_NTRU_dadd_64ns_64ns_64_3_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => x,
        din1 => ap_const_lv64_C330000000000000,
        ce => ap_const_logic_1,
        dout => grp_fu_76_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                dc_5_reg_729 <= grp_fu_70_p2;
                dc_6_reg_734 <= grp_fu_76_p2;
                dc_reg_724 <= grp_fu_64_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln515_2_fu_256_p2 <= std_logic_vector(unsigned(zext_ln515_2_fu_252_p1) + unsigned(ap_const_lv12_C01));
    add_ln515_3_fu_395_p2 <= std_logic_vector(unsigned(zext_ln515_3_fu_391_p1) + unsigned(ap_const_lv12_C01));
    add_ln515_4_fu_540_p2 <= std_logic_vector(unsigned(zext_ln515_4_fu_536_p1) + unsigned(ap_const_lv12_C01));
    add_ln515_fu_125_p2 <= std_logic_vector(unsigned(zext_ln515_fu_121_p1) + unsigned(ap_const_lv12_C01));
    add_ln99_1_fu_686_p2 <= std_logic_vector(unsigned(zext_ln99_fu_682_p1) + unsigned(ap_const_lv13_1FFE));
    add_ln99_fu_676_p2 <= std_logic_vector(unsigned(ub_fu_666_p4) + unsigned(ap_const_lv12_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        select_ln108_fu_700_p3 when (m_8_fu_692_p3(0) = '1') else 
        result_V_12_fu_344_p3;
    data_V_1_fu_213_p1 <= x;
    data_V_2_fu_352_p1 <= dc_5_reg_729;
    data_V_3_fu_497_p1 <= dc_6_reg_734;
    data_V_fu_82_p1 <= dc_reg_724;
    isNeg_1_fu_262_p3 <= add_ln515_2_fu_256_p2(11 downto 11);
    isNeg_2_fu_401_p3 <= add_ln515_3_fu_395_p2(11 downto 11);
    isNeg_3_fu_546_p3 <= add_ln515_4_fu_540_p2(11 downto 11);
    isNeg_fu_131_p3 <= add_ln515_fu_125_p2(11 downto 11);
    m_8_fu_692_p3 <= add_ln99_1_fu_686_p2(12 downto 12);
    m_fu_658_p3 <= 
        tmp_201_fu_642_p3 when (p_Result_s_fu_85_p3(0) = '1') else 
        tmp_202_fu_650_p3;
    mantissa_1_fu_238_p4 <= ((ap_const_lv1_1 & p_Result_3_fu_234_p1) & ap_const_lv1_0);
    mantissa_2_fu_377_p4 <= ((ap_const_lv1_1 & p_Result_5_fu_373_p1) & ap_const_lv1_0);
    mantissa_3_fu_522_p4 <= ((ap_const_lv1_1 & p_Result_7_fu_518_p1) & ap_const_lv1_0);
    mantissa_fu_107_p4 <= ((ap_const_lv1_1 & p_Result_1_fu_103_p1) & ap_const_lv1_0);
    p_Result_1_fu_103_p1 <= data_V_fu_82_p1(52 - 1 downto 0);
    p_Result_2_fu_216_p3 <= data_V_1_fu_213_p1(63 downto 63);
    p_Result_3_fu_234_p1 <= data_V_1_fu_213_p1(52 - 1 downto 0);
    p_Result_4_fu_355_p3 <= data_V_2_fu_352_p1(63 downto 63);
    p_Result_5_fu_373_p1 <= data_V_2_fu_352_p1(52 - 1 downto 0);
    p_Result_6_fu_500_p3 <= data_V_3_fu_497_p1(63 downto 63);
    p_Result_7_fu_518_p1 <= data_V_3_fu_497_p1(52 - 1 downto 0);
    p_Result_s_fu_85_p3 <= data_V_fu_82_p1(63 downto 63);
    r_V_1_fu_171_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_fu_117_p1),to_integer(unsigned('0' & zext_ln1488_fu_161_p1(31-1 downto 0)))));
    r_V_2_fu_296_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_1_fu_248_p1),to_integer(unsigned('0' & zext_ln1488_2_fu_292_p1(31-1 downto 0)))));
    r_V_3_fu_302_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_1_fu_248_p1),to_integer(unsigned('0' & zext_ln1488_2_fu_292_p1(31-1 downto 0)))));
    r_V_4_fu_435_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_2_fu_387_p1),to_integer(unsigned('0' & zext_ln1488_3_fu_431_p1(31-1 downto 0)))));
    r_V_5_fu_441_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_2_fu_387_p1),to_integer(unsigned('0' & zext_ln1488_3_fu_431_p1(31-1 downto 0)))));
    r_V_6_fu_580_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_3_fu_532_p1),to_integer(unsigned('0' & zext_ln1488_4_fu_576_p1(31-1 downto 0)))));
    r_V_7_fu_586_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_3_fu_532_p1),to_integer(unsigned('0' & zext_ln1488_4_fu_576_p1(31-1 downto 0)))));
    r_V_fu_165_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_fu_117_p1),to_integer(unsigned('0' & zext_ln1488_fu_161_p1(31-1 downto 0)))));
    result_V_10_fu_622_p2 <= std_logic_vector(unsigned(ap_const_lv64_0) - unsigned(val_3_fu_614_p3));
    result_V_12_fu_344_p3 <= 
        result_V_4_fu_338_p2 when (p_Result_2_fu_216_p3(0) = '1') else 
        val_1_fu_330_p3;
    result_V_13_fu_483_p3 <= 
        result_V_9_fu_477_p2 when (p_Result_4_fu_355_p3(0) = '1') else 
        val_2_fu_469_p3;
    result_V_2_fu_207_p2 <= std_logic_vector(unsigned(ap_const_lv64_0) - unsigned(val_fu_199_p3));
    result_V_4_fu_338_p2 <= std_logic_vector(unsigned(ap_const_lv64_0) - unsigned(val_1_fu_330_p3));
    result_V_9_fu_477_p2 <= std_logic_vector(unsigned(ap_const_lv64_0) - unsigned(val_2_fu_469_p3));
    result_V_fu_628_p3 <= 
        result_V_10_fu_622_p2 when (p_Result_6_fu_500_p3(0) = '1') else 
        val_3_fu_614_p3;
    rn_fu_636_p2 <= std_logic_vector(unsigned(result_V_fu_628_p3) + unsigned(ap_const_lv64_10000000000000));
    rp_fu_491_p2 <= std_logic_vector(unsigned(result_V_13_fu_483_p3) + unsigned(ap_const_lv64_FFF0000000000000));
    select_ln108_fu_700_p3 <= 
        rn_fu_636_p2 when (m_fu_658_p3(0) = '1') else 
        rp_fu_491_p2;
        sext_ln1488_1_fu_288_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_1_fu_280_p3),32));

        sext_ln1488_2_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_2_fu_419_p3),32));

        sext_ln1488_3_fu_572_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_3_fu_564_p3),32));

        sext_ln1488_fu_157_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_149_p3),32));

        sext_ln1512_1_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1512_1_fu_270_p2),12));

        sext_ln1512_2_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1512_2_fu_409_p2),12));

        sext_ln1512_3_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1512_3_fu_554_p2),12));

        sext_ln1512_fu_145_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1512_fu_139_p2),12));

    sub_ln1512_1_fu_270_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(xs_exp_V_1_fu_224_p4));
    sub_ln1512_2_fu_409_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(xs_exp_V_2_fu_363_p4));
    sub_ln1512_3_fu_554_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(xs_exp_V_3_fu_508_p4));
    sub_ln1512_fu_139_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(xs_exp_V_fu_93_p4));
    tmp_170_fu_320_p4 <= r_V_3_fu_302_p2(116 downto 53);
    tmp_171_fu_459_p4 <= r_V_5_fu_441_p2(116 downto 53);
    tmp_172_fu_604_p4 <= r_V_7_fu_586_p2(116 downto 53);
    tmp_192_fu_308_p3 <= r_V_2_fu_296_p2(53 downto 53);
    tmp_196_fu_447_p3 <= r_V_4_fu_435_p2(53 downto 53);
    tmp_200_fu_592_p3 <= r_V_6_fu_580_p2(53 downto 53);
    tmp_201_fu_642_p3 <= result_V_2_fu_207_p2(63 downto 63);
    tmp_202_fu_650_p3 <= val_fu_199_p3(63 downto 63);
    tmp_fu_177_p3 <= r_V_fu_165_p2(53 downto 53);
    tmp_s_fu_189_p4 <= r_V_1_fu_171_p2(116 downto 53);
    ub_fu_666_p4 <= result_V_12_fu_344_p3(63 downto 52);
    ush_1_fu_280_p3 <= 
        sext_ln1512_1_fu_276_p1 when (isNeg_1_fu_262_p3(0) = '1') else 
        add_ln515_2_fu_256_p2;
    ush_2_fu_419_p3 <= 
        sext_ln1512_2_fu_415_p1 when (isNeg_2_fu_401_p3(0) = '1') else 
        add_ln515_3_fu_395_p2;
    ush_3_fu_564_p3 <= 
        sext_ln1512_3_fu_560_p1 when (isNeg_3_fu_546_p3(0) = '1') else 
        add_ln515_4_fu_540_p2;
    ush_fu_149_p3 <= 
        sext_ln1512_fu_145_p1 when (isNeg_fu_131_p3(0) = '1') else 
        add_ln515_fu_125_p2;
    val_1_fu_330_p3 <= 
        zext_ln818_1_fu_316_p1 when (isNeg_1_fu_262_p3(0) = '1') else 
        tmp_170_fu_320_p4;
    val_2_fu_469_p3 <= 
        zext_ln818_2_fu_455_p1 when (isNeg_2_fu_401_p3(0) = '1') else 
        tmp_171_fu_459_p4;
    val_3_fu_614_p3 <= 
        zext_ln818_3_fu_600_p1 when (isNeg_3_fu_546_p3(0) = '1') else 
        tmp_172_fu_604_p4;
    val_fu_199_p3 <= 
        zext_ln818_fu_185_p1 when (isNeg_fu_131_p3(0) = '1') else 
        tmp_s_fu_189_p4;
    xs_exp_V_1_fu_224_p4 <= data_V_1_fu_213_p1(62 downto 52);
    xs_exp_V_2_fu_363_p4 <= data_V_2_fu_352_p1(62 downto 52);
    xs_exp_V_3_fu_508_p4 <= data_V_3_fu_497_p1(62 downto 52);
    xs_exp_V_fu_93_p4 <= data_V_fu_82_p1(62 downto 52);
    zext_ln1488_2_fu_292_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1488_1_fu_288_p1),169));
    zext_ln1488_3_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1488_2_fu_427_p1),169));
    zext_ln1488_4_fu_576_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1488_3_fu_572_p1),169));
    zext_ln1488_fu_161_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1488_fu_157_p1),169));
    zext_ln15_1_fu_248_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_1_fu_238_p4),169));
    zext_ln15_2_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_2_fu_377_p4),169));
    zext_ln15_3_fu_532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_3_fu_522_p4),169));
    zext_ln15_fu_117_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_fu_107_p4),169));
    zext_ln515_2_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xs_exp_V_1_fu_224_p4),12));
    zext_ln515_3_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xs_exp_V_2_fu_363_p4),12));
    zext_ln515_4_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xs_exp_V_3_fu_508_p4),12));
    zext_ln515_fu_121_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xs_exp_V_fu_93_p4),12));
    zext_ln818_1_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_192_fu_308_p3),64));
    zext_ln818_2_fu_455_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_196_fu_447_p3),64));
    zext_ln818_3_fu_600_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_200_fu_592_p3),64));
    zext_ln818_fu_185_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_177_p3),64));
    zext_ln99_fu_682_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln99_fu_676_p2),13));
end behav;
