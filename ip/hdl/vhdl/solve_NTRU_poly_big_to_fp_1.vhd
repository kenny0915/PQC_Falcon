-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity solve_NTRU_poly_big_to_fp_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    vla1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    vla1_ce0 : OUT STD_LOGIC;
    vla1_we0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    vla1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    vla1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    vla1_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    vla1_ce1 : OUT STD_LOGIC;
    vla1_we1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    vla1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    vla1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    d : IN STD_LOGIC_VECTOR (13 downto 0);
    f : IN STD_LOGIC_VECTOR (13 downto 0);
    flen : IN STD_LOGIC_VECTOR (3 downto 0);
    fstride : IN STD_LOGIC_VECTOR (8 downto 0);
    logn : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of solve_NTRU_poly_big_to_fp_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv64_3FF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv64_41E0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000111100000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv12_FFF : STD_LOGIC_VECTOR (11 downto 0) := "111111111111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal fstride_cast_fu_248_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal fstride_cast_reg_658 : STD_LOGIC_VECTOR (63 downto 0);
    signal n_fu_256_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal n_reg_663 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln2413_fu_262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln2413_reg_669 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln2419_fu_268_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln2419_reg_689 : STD_LOGIC_VECTOR (11 downto 0);
    signal u_198_fu_295_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal u_198_reg_700 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal trunc_ln2429_fu_301_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln2429_reg_705 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln2419_fu_290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln2421_fu_423_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln2421_reg_718 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal cc_fu_427_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln2430_fu_441_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln2430_reg_728 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln2430_fu_445_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln2430_reg_733 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_32_fu_454_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal v_32_reg_741 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln2434_fu_449_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_751 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal sext_ln2441_fu_636_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln2441_reg_756 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fpr_of_fu_228_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal x_assign_reg_761 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_238_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal fsc_reg_766 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal y_assign_s_reg_771 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_fu_233_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_fpr_of_fu_228_ap_start : STD_LOGIC;
    signal grp_fpr_of_fu_228_ap_done : STD_LOGIC;
    signal grp_fpr_of_fu_228_ap_idle : STD_LOGIC;
    signal grp_fpr_of_fu_228_ap_ready : STD_LOGIC;
    signal fsc_1_reg_183 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_22_reg_195 : STD_LOGIC_VECTOR (63 downto 0);
    signal cc_04_reg_207 : STD_LOGIC_VECTOR (0 downto 0);
    signal v_reg_217 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fpr_of_fu_228_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln2429_fu_339_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2415_fu_382_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln2414_fu_344_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln2415_1_fu_393_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2437_1_fu_492_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2443_fu_527_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2443_1_fu_554_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal u_01_fu_92 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln2419_1_fu_559_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal u_196_fu_349_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal u_17_fu_96 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln2443_3_fu_532_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_238_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_238_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2412_fu_252_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln2429_fu_305_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln2429_2_fu_311_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln73_fu_316_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln2429_1_fu_324_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal lshr_ln2429_1_fu_329_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln2415_fu_355_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln_fu_359_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln2415_fu_367_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln_fu_372_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln2415_1_fu_387_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln2429_1_fu_403_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln2429_1_fu_413_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal neg_fu_417_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal xm_fu_431_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln2437_fu_460_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln2437_fu_464_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln75_fu_469_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln2437_1_fu_477_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal lshr_ln_fu_482_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln2443_fu_497_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln74_fu_500_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln2443_fu_508_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln2443_2_fu_517_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal bitcast_ln2443_fu_513_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln2443_1_fu_548_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln2437_fu_573_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal xor_ln2437_fu_577_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln2434_fu_591_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln2437_1_fu_586_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln2437_2_fu_582_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal w_fu_595_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_57_fu_601_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal shl_ln2440_fu_619_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln2435_fu_615_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln2440_fu_625_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_58_fu_630_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_238_ce : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component solve_NTRU_fpr_of IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        i : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component solve_NTRU_dadd_64ns_64ns_64_3_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component solve_NTRU_dmul_64ns_64ns_64_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    grp_fpr_of_fu_228 : component solve_NTRU_fpr_of
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_fpr_of_fu_228_ap_start,
        ap_done => grp_fpr_of_fu_228_ap_done,
        ap_idle => grp_fpr_of_fu_228_ap_idle,
        ap_ready => grp_fpr_of_fu_228_ap_ready,
        i => sext_ln2441_reg_756,
        ap_return => grp_fpr_of_fu_228_ap_return);

    dadd_64ns_64ns_64_3_full_dsp_1_U100 : component solve_NTRU_dadd_64ns_64ns_64_3_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => x_22_reg_195,
        din1 => y_assign_s_reg_771,
        ce => ap_const_logic_1,
        dout => grp_fu_233_p2);

    dmul_64ns_64ns_64_4_max_dsp_1_U101 : component solve_NTRU_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_238_p0,
        din1 => grp_fu_238_p1,
        ce => grp_fu_238_ce,
        dout => grp_fu_238_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_fpr_of_fu_228_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_fpr_of_fu_228_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_fpr_of_fu_228_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_fpr_of_fu_228_ap_ready = ap_const_logic_1)) then 
                    grp_fpr_of_fu_228_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    cc_04_reg_207_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                cc_04_reg_207 <= tmp_reg_751;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                cc_04_reg_207 <= cc_fu_427_p1;
            end if; 
        end if;
    end process;

    fsc_1_reg_183_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                fsc_1_reg_183 <= fsc_reg_766;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                fsc_1_reg_183 <= ap_const_lv64_3FF0000000000000;
            end if; 
        end if;
    end process;

    u_01_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln2413_fu_262_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((icmp_ln2413_fu_262_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
                u_01_fu_92 <= ap_const_lv64_0;
            elsif (((icmp_ln2413_reg_669 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln2414_fu_344_p2 = ap_const_lv1_0))) then 
                u_01_fu_92 <= u_196_fu_349_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln2434_fu_449_p2 = ap_const_lv1_1))) then 
                u_01_fu_92 <= add_ln2419_1_fu_559_p2;
            end if; 
        end if;
    end process;

    u_17_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln2413_fu_262_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                u_17_fu_96 <= ap_const_lv64_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln2434_fu_449_p2 = ap_const_lv1_1))) then 
                u_17_fu_96 <= u_198_reg_700;
            end if; 
        end if;
    end process;

    v_reg_217_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                v_reg_217 <= v_32_reg_741;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                v_reg_217 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    x_22_reg_195_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                x_22_reg_195 <= grp_fu_233_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                x_22_reg_195 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                fsc_reg_766 <= grp_fu_238_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    fstride_cast_reg_658(8 downto 0) <= fstride_cast_fu_248_p1(8 downto 0);
                icmp_ln2413_reg_669 <= icmp_ln2413_fu_262_p2;
                n_reg_663 <= n_fu_256_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                sext_ln2421_reg_718 <= sext_ln2421_fu_423_p1;
                sext_ln2430_reg_728 <= sext_ln2430_fu_441_p1;
                    zext_ln2430_reg_733(30 downto 0) <= zext_ln2430_fu_445_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                sext_ln2441_reg_756 <= sext_ln2441_fu_636_p1;
                tmp_reg_751 <= w_fu_595_p2(31 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln2419_fu_290_p2 = ap_const_lv1_0) and (icmp_ln2413_reg_669 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                trunc_ln2429_reg_705 <= trunc_ln2429_fu_301_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln2413_reg_669 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                u_198_reg_700 <= u_198_fu_295_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                v_32_reg_741 <= v_32_fu_454_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                x_assign_reg_761 <= grp_fpr_of_fu_228_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                y_assign_s_reg_771 <= grp_fu_238_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln2413_fu_262_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    zext_ln2419_reg_689(3 downto 0) <= zext_ln2419_fu_268_p1(3 downto 0);
            end if;
        end if;
    end process;
    fstride_cast_reg_658(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    zext_ln2419_reg_689(11 downto 4) <= "00000000";
    zext_ln2430_reg_733(31) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln2413_reg_669, ap_CS_fsm_state2, icmp_ln2419_fu_290_p2, ap_CS_fsm_state4, icmp_ln2434_fu_449_p2, ap_CS_fsm_state6, grp_fpr_of_fu_228_ap_done, icmp_ln2414_fu_344_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (((icmp_ln2419_fu_290_p2 = ap_const_lv1_1) and (icmp_ln2413_reg_669 = ap_const_lv1_0)) or ((icmp_ln2413_reg_669 = ap_const_lv1_1) and (icmp_ln2414_fu_344_p2 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((icmp_ln2413_reg_669 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln2414_fu_344_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln2434_fu_449_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_fpr_of_fu_228_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    add_ln2415_1_fu_387_p2 <= std_logic_vector(unsigned(trunc_ln_fu_372_p4) + unsigned(ap_const_lv12_1));
    add_ln2415_fu_367_p2 <= std_logic_vector(unsigned(shl_ln_fu_359_p3) + unsigned(d));
    add_ln2419_1_fu_559_p2 <= std_logic_vector(unsigned(u_01_fu_92) + unsigned(fstride_cast_reg_658));
    add_ln2429_1_fu_324_p2 <= std_logic_vector(unsigned(shl_ln73_fu_316_p3) + unsigned(f));
    add_ln2429_2_fu_311_p2 <= std_logic_vector(unsigned(add_ln2429_fu_305_p2) + unsigned(zext_ln2419_reg_689));
    add_ln2429_fu_305_p2 <= std_logic_vector(unsigned(trunc_ln2429_fu_301_p1) + unsigned(ap_const_lv12_FFF));
    add_ln2437_1_fu_477_p2 <= std_logic_vector(unsigned(shl_ln75_fu_469_p3) + unsigned(f));
    add_ln2437_fu_464_p2 <= std_logic_vector(unsigned(zext_ln2437_fu_460_p1) + unsigned(trunc_ln2429_reg_705));
    add_ln2443_1_fu_548_p2 <= std_logic_vector(unsigned(trunc_ln2443_2_fu_517_p4) + unsigned(ap_const_lv12_1));
    add_ln2443_fu_508_p2 <= std_logic_vector(unsigned(shl_ln74_fu_500_p3) + unsigned(d));
    and_ln2440_fu_625_p2 <= (shl_ln2440_fu_619_p2 and sext_ln2421_reg_718);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_ST_fsm_state6_blk_assign_proc : process(grp_fpr_of_fu_228_ap_done)
    begin
        if ((grp_fpr_of_fu_228_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln2413_reg_669, ap_CS_fsm_state2, icmp_ln2419_fu_290_p2, icmp_ln2414_fu_344_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (((icmp_ln2419_fu_290_p2 = ap_const_lv1_1) and (icmp_ln2413_reg_669 = ap_const_lv1_0)) or ((icmp_ln2413_reg_669 = ap_const_lv1_1) and (icmp_ln2414_fu_344_p2 = ap_const_lv1_1)))) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln2413_reg_669, ap_CS_fsm_state2, icmp_ln2419_fu_290_p2, icmp_ln2414_fu_344_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (((icmp_ln2419_fu_290_p2 = ap_const_lv1_1) and (icmp_ln2413_reg_669 = ap_const_lv1_0)) or ((icmp_ln2413_reg_669 = ap_const_lv1_1) and (icmp_ln2414_fu_344_p2 = ap_const_lv1_1))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln2443_fu_513_p1 <= x_22_reg_195;
    cc_fu_427_p1 <= neg_fu_417_p2(1 - 1 downto 0);
    fstride_cast_fu_248_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fstride),64));
    grp_fpr_of_fu_228_ap_start <= grp_fpr_of_fu_228_ap_start_reg;

    grp_fu_238_ce_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state10, grp_fpr_of_fu_228_ap_done, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_fpr_of_fu_228_ap_done = ap_const_logic_1)))) then 
            grp_fu_238_ce <= ap_const_logic_1;
        else 
            grp_fu_238_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_238_p0_assign_proc : process(ap_CS_fsm_state4, x_assign_reg_761, ap_CS_fsm_state7, fsc_1_reg_183)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_238_p0 <= x_assign_reg_761;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_238_p0 <= fsc_1_reg_183;
        else 
            grp_fu_238_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_238_p1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state7, fsc_1_reg_183)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_238_p1 <= fsc_1_reg_183;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_238_p1 <= ap_const_lv64_41E0000000000000;
        else 
            grp_fu_238_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln2413_fu_262_p2 <= "1" when (flen = ap_const_lv4_0) else "0";
    icmp_ln2414_fu_344_p2 <= "1" when (u_01_fu_92 = n_reg_663) else "0";
    icmp_ln2419_fu_290_p2 <= "1" when (u_17_fu_96 = n_reg_663) else "0";
    icmp_ln2434_fu_449_p2 <= "1" when (v_reg_217 = flen) else "0";
    lshr_ln2429_1_fu_329_p4 <= add_ln2429_1_fu_324_p2(13 downto 2);
    lshr_ln_fu_482_p4 <= add_ln2437_1_fu_477_p2(13 downto 2);
    n_fu_256_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_1),to_integer(unsigned('0' & zext_ln2412_fu_252_p1(31-1 downto 0)))));
    neg_fu_417_p2 <= std_logic_vector(unsigned(ap_const_lv3_0) - unsigned(zext_ln2429_1_fu_413_p1));
        sext_ln2421_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(neg_fu_417_p2),32));

        sext_ln2430_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xm_fu_431_p4),31));

        sext_ln2441_fu_636_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(w_58_fu_630_p2),64));

    shl_ln2440_fu_619_p2 <= std_logic_vector(shift_left(unsigned(w_fu_595_p2),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    shl_ln73_fu_316_p3 <= (add_ln2429_2_fu_311_p2 & ap_const_lv2_0);
    shl_ln74_fu_500_p3 <= (trunc_ln2443_fu_497_p1 & ap_const_lv3_0);
    shl_ln75_fu_469_p3 <= (add_ln2437_fu_464_p2 & ap_const_lv2_0);
    shl_ln_fu_359_p3 <= (trunc_ln2415_fu_355_p1 & ap_const_lv3_0);
    trunc_ln2415_fu_355_p1 <= u_01_fu_92(11 - 1 downto 0);
    trunc_ln2429_1_fu_403_p4 <= vla1_q0(31 downto 30);
    trunc_ln2429_fu_301_p1 <= u_01_fu_92(12 - 1 downto 0);
    trunc_ln2437_fu_573_p1 <= vla1_q1(31 - 1 downto 0);
    trunc_ln2443_2_fu_517_p4 <= add_ln2443_fu_508_p2(13 downto 2);
    trunc_ln2443_3_fu_532_p1 <= bitcast_ln2443_fu_513_p1(32 - 1 downto 0);
    trunc_ln2443_fu_497_p1 <= u_17_fu_96(11 - 1 downto 0);
    trunc_ln_fu_372_p4 <= add_ln2415_fu_367_p2(13 downto 2);
    u_196_fu_349_p2 <= std_logic_vector(unsigned(u_01_fu_92) + unsigned(ap_const_lv64_1));
    u_198_fu_295_p2 <= std_logic_vector(unsigned(u_17_fu_96) + unsigned(ap_const_lv64_1));
    v_32_fu_454_p2 <= std_logic_vector(unsigned(v_reg_217) + unsigned(ap_const_lv4_1));

    vla1_address0_assign_proc : process(icmp_ln2413_reg_669, ap_CS_fsm_state2, icmp_ln2419_fu_290_p2, ap_CS_fsm_state4, zext_ln2429_fu_339_p1, icmp_ln2414_fu_344_p2, zext_ln2415_1_fu_393_p1, zext_ln2443_fu_527_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            vla1_address0 <= zext_ln2443_fu_527_p1(12 - 1 downto 0);
        elsif (((icmp_ln2413_reg_669 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln2414_fu_344_p2 = ap_const_lv1_0))) then 
            vla1_address0 <= zext_ln2415_1_fu_393_p1(12 - 1 downto 0);
        elsif (((icmp_ln2419_fu_290_p2 = ap_const_lv1_0) and (icmp_ln2413_reg_669 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            vla1_address0 <= zext_ln2429_fu_339_p1(12 - 1 downto 0);
        else 
            vla1_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    vla1_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, icmp_ln2434_fu_449_p2, zext_ln2415_fu_382_p1, zext_ln2437_1_fu_492_p1, zext_ln2443_1_fu_554_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln2434_fu_449_p2 = ap_const_lv1_1))) then 
            vla1_address1 <= zext_ln2443_1_fu_554_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln2434_fu_449_p2 = ap_const_lv1_0))) then 
            vla1_address1 <= zext_ln2437_1_fu_492_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            vla1_address1 <= zext_ln2415_fu_382_p1(12 - 1 downto 0);
        else 
            vla1_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    vla1_ce0_assign_proc : process(icmp_ln2413_reg_669, ap_CS_fsm_state2, icmp_ln2419_fu_290_p2, ap_CS_fsm_state4, icmp_ln2414_fu_344_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((icmp_ln2419_fu_290_p2 = ap_const_lv1_0) and (icmp_ln2413_reg_669 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((icmp_ln2413_reg_669 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln2414_fu_344_p2 = ap_const_lv1_0)))) then 
            vla1_ce0 <= ap_const_logic_1;
        else 
            vla1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    vla1_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, icmp_ln2434_fu_449_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln2434_fu_449_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln2434_fu_449_p2 = ap_const_lv1_0)))) then 
            vla1_ce1 <= ap_const_logic_1;
        else 
            vla1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    vla1_d0_assign_proc : process(icmp_ln2413_reg_669, ap_CS_fsm_state2, ap_CS_fsm_state4, icmp_ln2414_fu_344_p2, trunc_ln2443_3_fu_532_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            vla1_d0 <= trunc_ln2443_3_fu_532_p1;
        elsif (((icmp_ln2413_reg_669 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln2414_fu_344_p2 = ap_const_lv1_0))) then 
            vla1_d0 <= ap_const_lv32_0;
        else 
            vla1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    vla1_d1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, icmp_ln2434_fu_449_p2, bitcast_ln2443_fu_513_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln2434_fu_449_p2 = ap_const_lv1_1))) then 
            vla1_d1 <= bitcast_ln2443_fu_513_p1(63 downto 32);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            vla1_d1 <= ap_const_lv32_0;
        else 
            vla1_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    vla1_we0_assign_proc : process(icmp_ln2413_reg_669, ap_CS_fsm_state2, ap_CS_fsm_state4, icmp_ln2434_fu_449_p2, icmp_ln2414_fu_344_p2)
    begin
        if ((((icmp_ln2413_reg_669 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln2414_fu_344_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln2434_fu_449_p2 = ap_const_lv1_1)))) then 
            vla1_we0 <= ap_const_lv4_F;
        else 
            vla1_we0 <= ap_const_lv4_0;
        end if; 
    end process;


    vla1_we1_assign_proc : process(icmp_ln2413_reg_669, ap_CS_fsm_state2, ap_CS_fsm_state4, icmp_ln2434_fu_449_p2, icmp_ln2414_fu_344_p2)
    begin
        if ((((icmp_ln2413_reg_669 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln2414_fu_344_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln2434_fu_449_p2 = ap_const_lv1_1)))) then 
            vla1_we1 <= ap_const_lv4_F;
        else 
            vla1_we1 <= ap_const_lv4_0;
        end if; 
    end process;

    w_57_fu_601_p2 <= std_logic_vector(unsigned(xor_ln2437_1_fu_586_p2) + unsigned(zext_ln2437_2_fu_582_p1));
    w_58_fu_630_p2 <= std_logic_vector(unsigned(zext_ln2435_fu_615_p1) - unsigned(and_ln2440_fu_625_p2));
    w_fu_595_p2 <= std_logic_vector(unsigned(xor_ln2437_fu_577_p2) + unsigned(zext_ln2434_fu_591_p1));
    xm_fu_431_p4 <= neg_fu_417_p2(2 downto 1);
    xor_ln2437_1_fu_586_p2 <= (trunc_ln2437_fu_573_p1 xor sext_ln2430_reg_728);
    xor_ln2437_fu_577_p2 <= (zext_ln2430_reg_733 xor vla1_q1);
    zext_ln2412_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(logn),64));
    zext_ln2415_1_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2415_1_fu_387_p2),64));
    zext_ln2415_fu_382_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln_fu_372_p4),64));
    zext_ln2419_fu_268_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(flen),12));
    zext_ln2429_1_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln2429_1_fu_403_p4),3));
    zext_ln2429_fu_339_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln2429_1_fu_329_p4),64));
    zext_ln2430_fu_445_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln2430_fu_441_p1),32));
    zext_ln2434_fu_591_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cc_04_reg_207),32));
    zext_ln2435_fu_615_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_57_fu_601_p2),32));
    zext_ln2437_1_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_482_p4),64));
    zext_ln2437_2_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cc_04_reg_207),31));
    zext_ln2437_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(v_reg_217),12));
    zext_ln2443_1_fu_554_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2443_1_fu_548_p2),64));
    zext_ln2443_fu_527_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln2443_2_fu_517_p4),64));
end behav;
