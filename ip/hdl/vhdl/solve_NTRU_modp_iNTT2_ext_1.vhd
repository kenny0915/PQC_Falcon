-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity solve_NTRU_modp_iNTT2_ext_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    vla1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    vla1_ce0 : OUT STD_LOGIC;
    vla1_we0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    vla1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    vla1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    vla1_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    vla1_ce1 : OUT STD_LOGIC;
    vla1_we1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    vla1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    vla1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    a : IN STD_LOGIC_VECTOR (13 downto 0);
    stride : IN STD_LOGIC_VECTOR (8 downto 0);
    igm : IN STD_LOGIC_VECTOR (13 downto 0);
    logn : IN STD_LOGIC_VECTOR (31 downto 0);
    p : IN STD_LOGIC_VECTOR (24 downto 0);
    p0i : IN STD_LOGIC_VECTOR (30 downto 0) );
end;


architecture behav of solve_NTRU_modp_iNTT2_ext_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv63_1 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv25_1FFFFFF : STD_LOGIC_VECTOR (24 downto 0) := "1111111111111111111111111";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal stride_cast1_fu_235_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal stride_cast1_reg_698 : STD_LOGIC_VECTOR (63 downto 0);
    signal p0i_cast_fu_239_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p0i_cast_reg_704 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast_cast_cast_cast_fu_247_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast_cast_cast_cast_reg_709 : STD_LOGIC_VECTOR (31 downto 0);
    signal stride_cast_fu_251_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal stride_cast_reg_715 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln1411_fu_255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1411_reg_721 : STD_LOGIC_VECTOR (0 downto 0);
    signal n_fu_265_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal n_reg_739 : STD_LOGIC_VECTOR (63 downto 0);
    signal hm_fu_300_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal hm_reg_747 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln1416_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln1420_fu_310_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1420_reg_752 : STD_LOGIC_VECTOR (63 downto 0);
    signal dt_fu_314_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal dt_reg_757 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln_reg_763 : STD_LOGIC_VECTOR (11 downto 0);
    signal ni_fu_335_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ni_reg_782 : STD_LOGIC_VECTOR (31 downto 0);
    signal u_fu_356_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal u_reg_790 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal lshr_ln_reg_795 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln1422_fu_351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1422_fu_394_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal s_reg_815 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_665_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1429_reg_820 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_670_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1430_reg_825 : STD_LOGIC_VECTOR (11 downto 0);
    signal v_fu_426_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal v_reg_833 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal vla1_addr_312_reg_838 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln1431_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal vla1_addr_313_reg_844 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1431_1_fu_502_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln1431_1_reg_849 : STD_LOGIC_VECTOR (63 downto 0);
    signal v1_1_fu_507_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_modp_montymul_fu_222_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_859 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal vla1_addr_311_reg_867 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal icmp_ln1450_fu_604_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_modp_montymul_fu_222_ap_ready : STD_LOGIC;
    signal grp_modp_montymul_fu_222_a : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_modp_montymul_fu_222_b : STD_LOGIC_VECTOR (31 downto 0);
    signal v1_reg_177 : STD_LOGIC_VECTOR (63 downto 0);
    signal u_09_reg_189 : STD_LOGIC_VECTOR (62 downto 0);
    signal v_05_reg_200 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal idx18_reg_211 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln697_fu_594_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal zext_ln1428_fu_416_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1435_fu_482_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1436_fu_497_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1451_fu_645_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_fu_84 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_fu_88 : STD_LOGIC_VECTOR (63 downto 0);
    signal idx_fu_92 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln1450_1_fu_650_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_02_fu_96 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_13_fu_609_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_cast_cast_fu_243_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_cast_cast_cast_fu_243_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln1414_fu_261_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_174_fu_284_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal sub_ln1449_fu_330_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1428_fu_362_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1428_fu_366_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln_fu_371_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln1428_1_fu_379_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln1406_1_fu_398_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln1431_fu_432_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1425_fu_436_p2 : STD_LOGIC_VECTOR (11 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln1425_fu_436_p2 : signal is "no";
    signal shl_ln77_fu_441_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln1425_2_fu_454_p2 : STD_LOGIC_VECTOR (11 downto 0);
    attribute use_dsp48 of add_ln1425_2_fu_454_p2 : signal is "no";
    signal shl_ln1425_1_fu_459_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal r1_fu_449_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal lshr_ln36_fu_472_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal r2_fu_467_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal lshr_ln37_fu_487_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln685_fu_512_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln685_fu_517_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_175_fu_523_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln685_fu_531_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal and_ln685_fu_539_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal and_ln685_fu_539_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln685_fu_544_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln685_fu_548_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln697_fu_559_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_176_fu_565_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln697_fu_573_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal and_ln697_fu_581_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal and_ln697_fu_581_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln697_fu_586_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln697_fu_590_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1406_fu_618_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln76_fu_622_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_fu_630_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal lshr_ln35_fu_635_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_665_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_670_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_670_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component solve_NTRU_modp_montymul IS
    port (
        ap_ready : OUT STD_LOGIC;
        a : IN STD_LOGIC_VECTOR (31 downto 0);
        b : IN STD_LOGIC_VECTOR (31 downto 0);
        p : IN STD_LOGIC_VECTOR (31 downto 0);
        p0i : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component solve_NTRU_mul_mul_12s_9ns_12_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;



begin
    grp_modp_montymul_fu_222 : component solve_NTRU_modp_montymul
    port map (
        ap_ready => grp_modp_montymul_fu_222_ap_ready,
        a => grp_modp_montymul_fu_222_a,
        b => grp_modp_montymul_fu_222_b,
        p => p_cast_cast_cast_cast_reg_709,
        p0i => p0i_cast_reg_704,
        ap_return => grp_modp_montymul_fu_222_ap_return);

    mul_mul_12s_9ns_12_4_1_U29 : component solve_NTRU_mul_mul_12s_9ns_12_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 9,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => trunc_ln1422_fu_394_p1,
        din1 => grp_fu_665_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_665_p2);

    mul_mul_12s_9ns_12_4_1_U30 : component solve_NTRU_mul_mul_12s_9ns_12_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 9,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_670_p0,
        din1 => grp_fu_670_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_670_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    idx18_reg_211_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                idx18_reg_211 <= add_ln1431_1_reg_849;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                idx18_reg_211 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    idx_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1416_fu_294_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                idx_fu_92 <= ap_const_lv64_0;
            elsif (((icmp_ln1411_reg_721 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln1450_fu_604_p2 = ap_const_lv1_0))) then 
                idx_fu_92 <= add_ln1450_1_fu_650_p2;
            end if; 
        end if;
    end process;

    k_02_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1416_fu_294_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                k_02_fu_96 <= ap_const_lv64_0;
            elsif (((icmp_ln1411_reg_721 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln1450_fu_604_p2 = ap_const_lv1_0))) then 
                k_02_fu_96 <= k_13_fu_609_p2;
            end if; 
        end if;
    end process;

    m_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1411_fu_255_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                m_fu_88 <= n_fu_265_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln1422_fu_351_p2 = ap_const_lv1_1))) then 
                m_fu_88 <= zext_ln1420_reg_752;
            end if; 
        end if;
    end process;

    t_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1411_fu_255_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                t_fu_84 <= ap_const_lv64_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln1422_fu_351_p2 = ap_const_lv1_1))) then 
                t_fu_84 <= dt_reg_757;
            end if; 
        end if;
    end process;

    u_09_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln1431_fu_420_p2 = ap_const_lv1_1))) then 
                u_09_reg_189 <= u_reg_790;
            elsif (((icmp_ln1416_fu_294_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                u_09_reg_189 <= ap_const_lv63_0;
            end if; 
        end if;
    end process;

    v1_reg_177_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln1431_fu_420_p2 = ap_const_lv1_1))) then 
                v1_reg_177 <= v1_1_fu_507_p2;
            elsif (((icmp_ln1416_fu_294_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                v1_reg_177 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    v_05_reg_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                v_05_reg_200 <= v_reg_833;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                v_05_reg_200 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln1431_fu_420_p2 = ap_const_lv1_0))) then
                add_ln1431_1_reg_849 <= add_ln1431_1_fu_502_p2;
                vla1_addr_312_reg_838 <= zext_ln1435_fu_482_p1(12 - 1 downto 0);
                vla1_addr_313_reg_844 <= zext_ln1436_fu_497_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1416_fu_294_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    dt_reg_757(63 downto 1) <= dt_fu_314_p2(63 downto 1);
                hm_reg_747 <= m_fu_88(63 downto 1);
                trunc_ln_reg_763 <= m_fu_88(12 downto 1);
                    zext_ln1420_reg_752(62 downto 0) <= zext_ln1420_fu_310_p1(62 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                icmp_ln1411_reg_721 <= icmp_ln1411_fu_255_p2;
                    p0i_cast_reg_704(30 downto 0) <= p0i_cast_fu_239_p1(30 downto 0);
                    p_cast_cast_cast_cast_reg_709(30 downto 0) <= p_cast_cast_cast_cast_fu_247_p1(30 downto 0);
                    stride_cast1_reg_698(8 downto 0) <= stride_cast1_fu_235_p1(8 downto 0);
                    stride_cast_reg_715(8 downto 0) <= stride_cast_fu_251_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln1422_fu_351_p2 = ap_const_lv1_0))) then
                lshr_ln_reg_795 <= add_ln1428_1_fu_379_p2(13 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                mul_ln1429_reg_820 <= grp_fu_665_p2;
                mul_ln1430_reg_825 <= grp_fu_670_p2;
                s_reg_815 <= vla1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1411_fu_255_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                n_reg_739 <= n_fu_265_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1416_fu_294_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                ni_reg_782 <= ni_fu_335_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_s_reg_859 <= grp_modp_montymul_fu_222_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                u_reg_790 <= u_fu_356_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                v_reg_833 <= v_fu_426_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1411_reg_721 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln1450_fu_604_p2 = ap_const_lv1_0))) then
                vla1_addr_311_reg_867 <= zext_ln1451_fu_645_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;
    stride_cast1_reg_698(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    p0i_cast_reg_704(31) <= '0';
    p_cast_cast_cast_cast_reg_709(31) <= '0';
    stride_cast_reg_715(11 downto 9) <= "000";
    zext_ln1420_reg_752(63) <= '0';
    dt_reg_757(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln1411_fu_255_p2, icmp_ln1411_reg_721, ap_CS_fsm_state2, icmp_ln1416_fu_294_p2, ap_CS_fsm_state3, icmp_ln1422_fu_351_p2, ap_CS_fsm_state7, icmp_ln1431_fu_420_p2, ap_CS_fsm_state10, icmp_ln1450_fu_604_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((icmp_ln1411_fu_255_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((icmp_ln1411_fu_255_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln1416_fu_294_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln1422_fu_351_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln1431_fu_420_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and ((icmp_ln1411_reg_721 = ap_const_lv1_1) or (icmp_ln1450_fu_604_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    add_ln1425_2_fu_454_p2 <= std_logic_vector(unsigned(trunc_ln1431_fu_432_p1) + unsigned(mul_ln1430_reg_825));
    add_ln1425_fu_436_p2 <= std_logic_vector(unsigned(trunc_ln1431_fu_432_p1) + unsigned(mul_ln1429_reg_820));
    add_ln1428_1_fu_379_p2 <= std_logic_vector(unsigned(shl_ln_fu_371_p3) + unsigned(igm));
    add_ln1428_fu_366_p2 <= std_logic_vector(unsigned(trunc_ln1428_fu_362_p1) + unsigned(trunc_ln_reg_763));
    add_ln1431_1_fu_502_p2 <= std_logic_vector(unsigned(idx18_reg_211) + unsigned(stride_cast1_reg_698));
    add_ln1450_1_fu_650_p2 <= std_logic_vector(unsigned(idx_fu_92) + unsigned(stride_cast1_reg_698));
    add_ln685_fu_517_p2 <= std_logic_vector(unsigned(vla1_q0) + unsigned(sub_ln685_fu_512_p2));
    add_ln697_fu_594_p2 <= std_logic_vector(unsigned(zext_ln697_fu_590_p1) + unsigned(sub_ln697_fu_559_p2));
    and_ln685_fu_539_p1 <= p;
    and_ln685_fu_539_p2 <= (select_ln685_fu_531_p3 and and_ln685_fu_539_p1);
    and_ln697_fu_581_p1 <= p;
    and_ln697_fu_581_p2 <= (select_ln697_fu_573_p3 and and_ln697_fu_581_p1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln1411_reg_721, ap_CS_fsm_state10, icmp_ln1450_fu_604_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)) or ((ap_const_logic_1 = ap_CS_fsm_state10) and ((icmp_ln1411_reg_721 = ap_const_lv1_1) or (icmp_ln1450_fu_604_p2 = ap_const_lv1_1))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln1411_reg_721, ap_CS_fsm_state10, icmp_ln1450_fu_604_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and ((icmp_ln1411_reg_721 = ap_const_lv1_1) or (icmp_ln1450_fu_604_p2 = ap_const_lv1_1)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    dt_fu_314_p2 <= std_logic_vector(shift_left(unsigned(t_fu_84),to_integer(unsigned('0' & ap_const_lv64_1(31-1 downto 0)))));
    grp_fu_665_p1 <= stride_cast_reg_715(9 - 1 downto 0);
    grp_fu_670_p0 <= std_logic_vector(signed(trunc_ln1422_fu_394_p1) + signed(trunc_ln1406_1_fu_398_p1));
    grp_fu_670_p1 <= stride_cast_reg_715(9 - 1 downto 0);

    grp_modp_montymul_fu_222_a_assign_proc : process(vla1_q1, ap_CS_fsm_state8, add_ln697_fu_594_p2, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_modp_montymul_fu_222_a <= vla1_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_modp_montymul_fu_222_a <= add_ln697_fu_594_p2;
        else 
            grp_modp_montymul_fu_222_a <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_modp_montymul_fu_222_b_assign_proc : process(ni_reg_782, s_reg_815, ap_CS_fsm_state8, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_modp_montymul_fu_222_b <= ni_reg_782;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_modp_montymul_fu_222_b <= s_reg_815;
        else 
            grp_modp_montymul_fu_222_b <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    hm_fu_300_p4 <= m_fu_88(63 downto 1);
    icmp_ln1411_fu_255_p2 <= "1" when (logn = ap_const_lv32_0) else "0";
    icmp_ln1416_fu_294_p2 <= "1" when (tmp_174_fu_284_p4 = ap_const_lv63_0) else "0";
    icmp_ln1422_fu_351_p2 <= "1" when (u_09_reg_189 = hm_reg_747) else "0";
    icmp_ln1431_fu_420_p2 <= "1" when (v_05_reg_200 = t_fu_84) else "0";
    icmp_ln1450_fu_604_p2 <= "1" when (k_02_fu_96 = n_reg_739) else "0";
    k_13_fu_609_p2 <= std_logic_vector(unsigned(k_02_fu_96) + unsigned(ap_const_lv64_1));
    lshr_ln35_fu_635_p4 <= r_fu_630_p2(13 downto 2);
    lshr_ln36_fu_472_p4 <= r1_fu_449_p2(13 downto 2);
    lshr_ln37_fu_487_p4 <= r2_fu_467_p2(13 downto 2);
    n_fu_265_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_1),to_integer(unsigned('0' & zext_ln1414_fu_261_p1(31-1 downto 0)))));
    ni_fu_335_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_1),to_integer(unsigned('0' & sub_ln1449_fu_330_p2(31-1 downto 0)))));
    p0i_cast_fu_239_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p0i),32));
    p_cast_cast_cast_cast_fu_247_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_cast_cast_cast_fu_243_p1),32));
    p_cast_cast_cast_fu_243_p0 <= p;
        p_cast_cast_cast_fu_243_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_cast_cast_cast_fu_243_p0),31));

    r1_fu_449_p2 <= std_logic_vector(unsigned(shl_ln77_fu_441_p3) + unsigned(a));
    r2_fu_467_p2 <= std_logic_vector(unsigned(shl_ln1425_1_fu_459_p3) + unsigned(a));
    r_fu_630_p2 <= std_logic_vector(unsigned(shl_ln76_fu_622_p3) + unsigned(a));
    select_ln685_fu_531_p3 <= 
        ap_const_lv25_1FFFFFF when (tmp_175_fu_523_p3(0) = '1') else 
        ap_const_lv25_0;
    select_ln697_fu_573_p3 <= 
        ap_const_lv25_1FFFFFF when (tmp_176_fu_565_p3(0) = '1') else 
        ap_const_lv25_0;
        sext_ln685_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(and_ln685_fu_539_p2),31));

        sext_ln697_fu_586_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(and_ln697_fu_581_p2),31));

    shl_ln1425_1_fu_459_p3 <= (add_ln1425_2_fu_454_p2 & ap_const_lv2_0);
    shl_ln76_fu_622_p3 <= (trunc_ln1406_fu_618_p1 & ap_const_lv2_0);
    shl_ln77_fu_441_p3 <= (add_ln1425_fu_436_p2 & ap_const_lv2_0);
    shl_ln_fu_371_p3 <= (add_ln1428_fu_366_p2 & ap_const_lv2_0);
    stride_cast1_fu_235_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(stride),64));
    stride_cast_fu_251_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(stride),12));
    sub_ln1449_fu_330_p2 <= std_logic_vector(unsigned(ap_const_lv32_1F) - unsigned(logn));
    sub_ln685_fu_512_p2 <= std_logic_vector(unsigned(vla1_q1) - unsigned(p_cast_cast_cast_cast_reg_709));
    sub_ln697_fu_559_p2 <= std_logic_vector(unsigned(vla1_q1) - unsigned(vla1_q0));
    tmp_174_fu_284_p4 <= m_fu_88(63 downto 1);
    tmp_175_fu_523_p3 <= add_ln685_fu_517_p2(31 downto 31);
    tmp_176_fu_565_p3 <= sub_ln697_fu_559_p2(31 downto 31);
    trunc_ln1406_1_fu_398_p1 <= t_fu_84(12 - 1 downto 0);
    trunc_ln1406_fu_618_p1 <= idx_fu_92(12 - 1 downto 0);
    trunc_ln1422_fu_394_p1 <= v1_reg_177(12 - 1 downto 0);
    trunc_ln1428_fu_362_p1 <= u_09_reg_189(12 - 1 downto 0);
    trunc_ln1431_fu_432_p1 <= idx18_reg_211(12 - 1 downto 0);
    u_fu_356_p2 <= std_logic_vector(unsigned(u_09_reg_189) + unsigned(ap_const_lv63_1));
    v1_1_fu_507_p2 <= std_logic_vector(unsigned(dt_reg_757) + unsigned(v1_reg_177));
    v_fu_426_p2 <= std_logic_vector(unsigned(v_05_reg_200) + unsigned(ap_const_lv64_1));

    vla1_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, vla1_addr_313_reg_844, vla1_addr_311_reg_867, ap_CS_fsm_state9, ap_CS_fsm_state11, zext_ln1428_fu_416_p1, zext_ln1436_fu_497_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            vla1_address0 <= vla1_addr_311_reg_867;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            vla1_address0 <= vla1_addr_313_reg_844;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            vla1_address0 <= zext_ln1436_fu_497_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            vla1_address0 <= zext_ln1428_fu_416_p1(12 - 1 downto 0);
        else 
            vla1_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    vla1_address1_assign_proc : process(ap_CS_fsm_state7, vla1_addr_312_reg_838, ap_CS_fsm_state8, ap_CS_fsm_state10, zext_ln1435_fu_482_p1, zext_ln1451_fu_645_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            vla1_address1 <= zext_ln1451_fu_645_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            vla1_address1 <= vla1_addr_312_reg_838;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            vla1_address1 <= zext_ln1435_fu_482_p1(12 - 1 downto 0);
        else 
            vla1_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    vla1_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            vla1_ce0 <= ap_const_logic_1;
        else 
            vla1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    vla1_ce1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            vla1_ce1 <= ap_const_logic_1;
        else 
            vla1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    vla1_d0_assign_proc : process(grp_modp_montymul_fu_222_ap_return, tmp_s_reg_859, ap_CS_fsm_state9, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            vla1_d0 <= grp_modp_montymul_fu_222_ap_return;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            vla1_d0 <= tmp_s_reg_859;
        else 
            vla1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    vla1_d1 <= std_logic_vector(unsigned(zext_ln685_fu_548_p1) + unsigned(add_ln685_fu_517_p2));

    vla1_we0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            vla1_we0 <= ap_const_lv4_F;
        else 
            vla1_we0 <= ap_const_lv4_0;
        end if; 
    end process;


    vla1_we1_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            vla1_we1 <= ap_const_lv4_F;
        else 
            vla1_we1 <= ap_const_lv4_0;
        end if; 
    end process;

    zext_ln1414_fu_261_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(logn),64));
    zext_ln1420_fu_310_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(hm_fu_300_p4),64));
    zext_ln1428_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_reg_795),64));
    zext_ln1435_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln36_fu_472_p4),64));
    zext_ln1436_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln37_fu_487_p4),64));
    zext_ln1451_fu_645_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln35_fu_635_p4),64));
    zext_ln685_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln685_fu_544_p1),32));
    zext_ln697_fu_590_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln697_fu_586_p1),32));
end behav;
